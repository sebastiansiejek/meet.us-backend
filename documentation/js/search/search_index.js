var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AccessToken.html",[0,0.251,1,2.625]],["body/classes/AccessToken.html",[0,0.387,1,4.839,2,0.676,3,0.116,4,0.116,5,0.091,6,2.926,7,0.285,8,1.373,9,4.616,10,4.637,11,1.524,12,0.459,13,0.013,14,1.111,15,1.4,16,1.526,17,0.621,18,4.016,19,1.61,20,4.016,21,4.016,22,4.016,23,0.227,24,2.185,25,0.797,26,1.913,27,3.447,28,2.169,29,2.875,30,2.434,31,0.589,32,1.287,33,3.447,34,2.727,35,2.751,36,3.175,37,2.185,38,4.041,39,3.175,40,2.42,41,3.531,42,3.175,43,2.561,44,1.913,45,3.175,46,3.012,47,2.561,48,3.175,49,0.204,50,4.864,51,2.42,52,2.561,53,1.996,54,1.245,55,3.175,56,1.784,57,3.175,58,1.287,59,1.579,60,3.175,61,3.175,62,2.926,63,3.175,64,1.923,65,1.662,66,3.175,67,3.012,68,3.175,69,3.175,70,3.175,71,3.175,72,3.175,73,1.766,74,1.422,75,0.008,76,0.008]],["title/classes/ActivateUserInput.html",[0,0.251,77,2.625]],["body/classes/ActivateUserInput.html",[0,0.365,2,1.007,3,0.173,4,0.173,5,0.135,7,0.425,8,1.775,12,0.402,13,0.012,14,1.164,15,1.226,16,1.472,17,0.544,23,0.173,31,0.877,49,0.192,75,0.01,76,0.01,77,4.564,78,6.253,79,4.061,80,1.564,81,4.614,82,5.225,83,2.918]],["title/modules/AppModule.html",[84,1.319,85,2.999]],["body/modules/AppModule.html",[0,0.218,3,0.103,4,0.103,5,0.08,11,0.663,12,0.24,13,0.013,23,0.238,25,0.708,31,0.523,49,0.115,74,2.657,75,0.007,76,0.007,84,1.904,85,6.109,86,1.568,87,1.568,88,1.698,89,1.698,90,1.568,91,1.698,92,1.698,93,3.116,94,3.116,95,4.84,96,4.84,97,4.294,98,4.294,99,4.546,100,4.294,101,4.84,102,4.84,103,4.074,104,3.542,105,2.426,106,1.631,107,1.698,108,3.565,109,2.531,110,3.565,111,3.116,112,2.819,113,3.565,114,3.565,115,3.565,116,5.093,117,1.698,118,2.531,119,3.565,120,3.248,121,3.565,122,3.565,123,2.819,124,1.94,125,1.402,126,3.565,127,3.116,128,4.45,129,3.116,130,3.565,131,1.852,132,2.598,133,3.565,134,3.565,135,3.565,136,3.116,137,3.116,138,3.565,139,3.565,140,2.819,141,3.565,142,5.093,143,3.565,144,3.565,145,3.116,146,3.116,147,3.565,148,3.116,149,3.116,150,3.565,151,2.819,152,3.116,153,3.565,154,3.565,155,3.565,156,3.565,157,3.565,158,1.631,159,3.565,160,3.116,161,3.116,162,1.772,163,3.116,164,3.565,165,3.565,166,3.565,167,3.565,168,3.565,169,3.565,170,3.565,171,3.565,172,3.565,173,3.565]],["title/modules/AuthModule.html",[84,1.319,95,2.795]],["body/modules/AuthModule.html",[0,0.279,3,0.132,4,0.132,5,0.103,11,0.851,13,0.013,23,0.239,25,0.908,32,1.466,33,4.186,34,3.108,49,0.147,52,3.856,74,1.621,75,0.009,76,0.009,84,2.17,86,2.012,87,2.012,88,2.18,89,2.18,90,2.012,91,3.225,92,2.18,95,5.607,104,3.823,105,2.88,106,2.093,107,2.18,109,3.004,111,3.999,112,3.618,124,2.49,125,1.799,136,3.999,137,3.999,174,3.999,175,4.576,176,3.999,177,5.225,178,5.225,179,4.576,180,2.919,181,4.576,182,3.618,183,4.576,184,2.919,185,4.576,186,4.576,187,4.576,188,4.106,189,4.576,190,4.576,191,3.334,192,4.576,193,3.999,194,3.618,195,4.576,196,3.999,197,3.999,198,3.999,199,3.999]],["title/classes/AuthResolver.html",[0,0.251,52,2.625]],["body/classes/AuthResolver.html",[0,0.372,1,4.219,2,0.628,3,0.108,4,0.108,5,0.084,6,2.72,7,0.265,9,2.72,10,4.492,11,1.532,12,0.445,13,0.013,14,0.856,15,1.249,16,1.39,17,0.602,19,1.085,23,0.223,24,2.031,25,0.741,26,1.778,27,3.315,28,2.086,29,2.733,30,2.313,31,0.547,32,1.196,33,3.937,34,2.535,35,2.614,36,2.952,37,2.031,38,4.615,39,2.952,40,2.249,41,4.219,42,2.952,43,2.381,44,1.778,45,2.952,46,2.863,47,2.381,48,2.952,49,0.196,50,4.736,51,2.249,52,3.356,53,1.855,54,1.158,55,2.952,56,2.174,57,2.952,58,1.196,59,1.468,60,2.952,61,2.952,62,2.72,63,2.952,64,1.863,65,1.58,66,2.952,67,2.863,68,4.817,69,2.952,70,2.952,71,2.952,72,2.952,73,1.641,74,1.322,75,0.008,76,0.008,80,1.446,200,1.347,201,4.597,202,5.261,203,1.368,204,3.262,205,3.733,206,1.694,207,1.23,208,3.733,209,3.733,210,3.733,211,1.511,212,2.902,213,3.733,214,2.381,215,3.733,216,3.733,217,2.952,218,3.733]],["title/injectables/AuthService.html",[33,2.239,219,1.021]],["body/injectables/AuthService.html",[0,0.181,1,1.89,3,0.086,4,0.086,5,0.067,7,0.21,9,2.159,10,2.012,11,1.482,12,0.449,13,0.013,14,1.268,17,0.63,23,0.211,25,0.588,33,2.419,49,0.095,54,1.655,56,2.244,58,2.472,59,2.099,62,3.24,64,1.79,65,2.339,75,0.006,76,0.006,80,1.459,81,4.29,117,1.411,118,2.948,158,2.441,182,2.342,188,3.019,193,3.885,194,3.516,196,4.664,200,1.138,201,4.664,203,1.63,206,1.709,207,1.241,211,1.656,212,1.411,219,1.103,220,1.208,221,2.589,222,4.446,223,5.932,224,4.446,225,3.516,226,4.446,227,2.962,228,2.825,229,6.923,230,3.574,231,2.962,232,3.516,233,2.962,234,2.962,235,2.118,236,2.864,237,2.962,238,2.962,239,3.885,240,2.962,241,4.446,242,2.962,243,3.885,244,2.962,245,2.772,246,4.446,247,2.962,248,3.516,249,2.342,250,2.962,251,3.574,252,2.589,253,2.159,254,2.589,255,2.589,256,2.589,257,2.342,258,2.962,259,2.589,260,2.652,261,2.962,262,3.24,263,2.904,264,2.589,265,4.446,266,2.962,267,3.516,268,2.962,269,1.63,270,2.962,271,4.446,272,2.962,273,2.962,274,4.446,275,2.589,276,2.962,277,2.962,278,2.962,279,2.962,280,2.962,281,2.962,282,2.962,283,4.446,284,2.962,285,3.885,286,2.589,287,2.962,288,2.962,289,2.962]],["title/modules/CompaniesModule.html",[84,1.319,96,2.795]],["body/modules/CompaniesModule.html",[0,0.325,3,0.154,4,0.154,5,0.12,13,0.012,23,0.232,25,1.058,49,0.171,75,0.01,76,0.01,84,2.333,86,2.344,87,2.344,88,2.54,89,2.54,90,2.344,91,3.468,92,2.54,96,5.581,104,3.981,105,3.177,106,2.438,107,2.54,109,3.315,124,2.901,125,2.097,180,3.401,290,4.659,291,4.659,292,5.332,293,5.11,294,5.332,295,4.659,296,4.861,297,5.332,298,3.047,299,4.216,300,5.332]],["title/classes/CompaniesResolver.html",[0,0.251,296,2.999]],["body/classes/CompaniesResolver.html",[0,0.25,2,0.689,3,0.118,4,0.118,5,0.092,7,0.291,11,1.555,12,0.463,13,0.013,15,1.312,17,0.626,23,0.228,24,2.228,25,0.813,26,3.049,27,3.483,29,2.914,30,2.467,31,0.6,32,1.312,35,3.181,37,2.228,44,1.951,46,2.228,49,0.132,53,2.035,54,1.27,64,1.802,67,3.483,75,0.008,76,0.008,80,1.505,200,1.437,203,1.501,206,1.763,207,1.385,211,1.588,214,3.579,217,3.238,293,4.751,295,3.579,296,4.089,298,3.935,299,3.238,301,3.579,302,6.401,303,5.611,304,6.401,305,4.095,306,4.095,307,4.095,308,4.954,309,4.095,310,4.095,311,4.095,312,4.095,313,5.274,314,4.095,315,2.341,316,2.612,317,2.467,318,4.437,319,2.467,320,4.095,321,4.095,322,4.095,323,4.095]],["title/injectables/CompaniesService.html",[219,1.021,293,2.625]],["body/injectables/CompaniesService.html",[0,0.237,3,0.112,4,0.112,5,0.088,7,0.276,11,1.551,12,0.453,13,0.013,17,0.613,23,0.222,25,0.772,32,1.246,49,0.125,54,1.679,56,2.194,58,1.995,59,2.128,64,1.754,65,1.87,75,0.008,76,0.008,80,1.472,125,1.529,200,1.386,203,1.984,206,1.724,207,1.252,211,1.545,212,2.966,219,1.343,220,1.585,228,3.207,232,4.924,251,2.342,253,2.833,260,2.69,263,2.115,293,3.452,298,4.298,299,3.074,308,4.515,313,4.978,317,2.342,318,4.28,319,2.342,324,3.397,325,2.945,326,3.676,327,3.452,328,3.887,329,4.057,330,3.887,331,5.413,332,5.413,333,3.887,334,5.413,335,3.887,336,5.413,337,3.887,338,2.342,339,1.287,340,3.887,341,5.413,342,3.887,343,3.887,344,3.887,345,3.887,346,3.887,347,3.887,348,3.887,349,3.887,350,3.887,351,3.887,352,3.887,353,5.413,354,3.887,355,2.115,356,3.887,357,3.887,358,3.887]],["title/entities/Company.html",[298,2.352,359,1.618]],["body/entities/Company.html",[0,0.258,3,0.122,4,0.122,5,0.095,7,0.301,8,1.423,11,1.505,12,0.533,13,0.012,14,1.327,15,1.626,16,1.478,17,0.722,23,0.188,28,1.964,31,0.62,32,1.355,49,0.136,75,0.008,76,0.008,162,2.102,207,1.357,269,2.673,298,3.278,339,1.401,355,2.301,359,2.255,360,3.696,361,5.146,362,4.742,363,3.72,364,5.687,365,3.72,366,5.687,367,7.294,368,4.23,369,4.23,370,2.744,371,3.72,372,4.23,373,2.418,374,4.23,375,4.23,376,4.23,377,3.72,378,4.23,379,3.696,380,4.23,381,3.658,382,4.23,383,4.23,384,4.299,385,3.658,386,4.179,387,2.418,388,4.23,389,2.418]],["title/classes/ConnectionArgs.html",[0,0.251,390,2.239]],["body/classes/ConnectionArgs.html",[2,0.463,3,0.08,4,0.08,5,0.062,7,0.196,8,1.043,11,0.782,12,0.49,13,0.013,14,1.133,15,1.463,16,1.297,17,0.683,19,2.152,23,0.122,26,1.311,31,0.404,58,2.286,59,1.654,64,1.437,74,2.527,75,0.006,76,0.006,80,1.732,148,2.406,200,1.077,211,1.266,262,3.719,263,2.289,269,1.009,390,3.349,391,1.87,392,1.574,393,4.206,394,4.774,395,6.962,396,3.91,397,6.752,398,7.135,399,5.132,400,5.132,401,4.206,402,4.206,403,5.104,404,5.104,405,5.104,406,4.993,407,4.551,408,3.882,409,5.714,410,4.206,411,4.46,412,2.753,413,2.753,414,2.753,415,2.753,416,2.753,417,2.753,418,2.753,419,4.206,420,2.753,421,3.371,422,2.753,423,2.753,424,2.753,425,2.753,426,2.84,427,3.059,428,2.753,429,1.311,430,1.659,431,2.753,432,3.326,433,5.104,434,4.206,435,4.206,436,2.753,437,4.993,438,3.676,439,2.431,440,5.714,441,5.104,442,2.753,443,2.753,444,2.753,445,2.753,446,2.753,447,2.753,448,2.753,449,2.406,450,2.177,451,2.177,452,2.406,453,1.659,454,2.406,455,2.753,456,2.753,457,2.753,458,2.406,459,5.104,460,2.006,461,5.104,462,3.065,463,2.006,464,2.406,465,4.206,466,2.177,467,2.753,468,3.326,469,2.753,470,2.753,471,2.753,472,2.753]],["title/classes/CreateCompanyInput.html",[0,0.251,308,2.625]],["body/classes/CreateCompanyInput.html",[0,0.316,2,0.871,3,0.15,4,0.15,5,0.117,7,0.367,8,1.623,12,0.523,13,0.012,14,1.352,15,1.595,16,1.606,17,0.708,23,0.15,31,0.758,49,0.166,75,0.009,76,0.009,83,2.668,207,1.335,308,4.174,361,5.677,362,5.231,364,6.273,366,6.273,473,6.947,474,4.089,475,5.172,476,5.172,477,5.172,478,5.172,479,5.172]],["title/classes/CreateEventAddress.html",[0,0.251,480,3.254]],["body/classes/CreateEventAddress.html",[0,0.339,2,0.934,3,0.16,4,0.16,5,0.125,7,0.394,12,0.373,13,0.012,17,0.505,23,0.198,49,0.178,56,2.087,65,1.665,75,0.01,76,0.01,80,1.212,200,1.75,206,1.42,207,1.032,211,1.376,236,2.688,339,1.837,392,3.907,394,4.465,480,5.406,481,4.119,482,2.421,483,4.847,484,5.032,485,4.36,486,4.642,487,5.395,488,5.546,489,3.17,490,5.546,491,4.041,492,3.538,493,2.181,494,5.546]],["title/classes/CreateEventAddressInput.html",[0,0.251,495,2.795]],["body/classes/CreateEventAddressInput.html",[0,0.28,2,0.772,3,0.133,4,0.133,5,0.103,7,0.326,8,1.502,12,0.536,13,0.012,14,1.369,15,1.634,16,1.622,17,0.725,23,0.133,31,0.672,49,0.147,75,0.009,76,0.009,83,2.469,362,4.939,482,2.856,495,4.112,496,6.376,497,4.008,498,5.923,499,5.923,500,5.923,501,5.923,502,5.923,503,5.923,504,4.603,505,4.586,506,4.586,507,4.586,508,4.586,509,4.586,510,4.586,511,4.586,512,4.586]],["title/classes/CreateEventInput.html",[0,0.251,513,2.625]],["body/classes/CreateEventInput.html",[0,0.246,2,0.679,3,0.117,4,0.117,5,0.091,7,0.286,8,1.377,12,0.551,13,0.012,14,1.113,15,1.629,16,1.604,17,0.723,19,2.155,23,0.207,31,0.591,49,0.13,74,2.422,75,0.008,76,0.008,83,2.263,262,2.938,325,2.194,370,2.689,408,3.454,429,1.92,482,1.428,489,3.629,495,4.311,496,6.346,513,3.541,514,3.188,515,3.825,516,5.547,517,5.547,518,5.547,519,4.049,520,3.825,521,4.049,522,4.032,523,4.032,524,4.032,525,4.032,526,4.032,527,4.389,528,3.007,529,4.032,530,4.032,531,3.454,532,4.032,533,4.032,534,3.024,535,4.032,536,4.032,537,3.188,538,3.523,539,4.85,540,2.738,541,4.85,542,3.188,543,3.523,544,3.188]],["title/classes/CreateEvents.html",[0,0.251,545,3.254]],["body/classes/CreateEvents.html",[0,0.341,2,0.941,3,0.162,4,0.162,5,0.126,7,0.397,12,0.376,13,0.012,17,0.509,23,0.199,49,0.18,56,2.094,65,1.679,75,0.01,76,0.01,80,1.222,200,1.759,206,1.432,207,1.04,211,1.387,236,2.702,339,1.852,392,3.927,394,4.481,481,4.139,482,1.98,484,5.051,485,4.382,486,4.666,487,5.408,492,3.566,493,2.199,545,5.432,546,4.886,547,5.591,548,2.366,549,5.591]],["title/classes/CreateParticipants.html",[0,0.251,550,3.254]],["body/classes/CreateParticipants.html",[0,0.341,2,0.941,3,0.162,4,0.162,5,0.126,7,0.397,12,0.376,13,0.012,17,0.509,23,0.199,49,0.18,56,2.094,65,1.679,75,0.01,76,0.01,80,1.222,200,1.759,206,1.432,207,1.04,211,1.387,236,2.702,339,1.852,392,3.927,394,4.481,481,4.139,484,5.051,485,4.382,486,4.666,487,5.408,492,3.566,493,2.199,550,5.432,551,4.886,552,5.591,553,2.663,554,4.421,555,5.591]],["title/classes/CreateTags.html",[0,0.251,556,3.254]],["body/classes/CreateTags.html",[0,0.282,2,0.777,3,0.133,4,0.133,5,0.104,7,0.328,12,0.486,13,0.012,17,0.42,23,0.209,49,0.148,56,1.915,58,2.179,65,1.386,75,0.009,76,0.009,80,1.009,200,1.557,206,1.182,207,1.344,211,1.145,236,2.391,339,2.014,392,3.476,394,4.097,481,3.664,484,4.618,485,3.879,486,4.13,487,5.101,492,2.945,493,1.816,520,3.664,531,4.087,534,2.199,537,3.651,544,3.651,548,1.954,556,4.809,557,3.651,558,7.98,559,4.617,560,3.364,561,4.034,562,4.034,563,4.034,564,4.034,565,4.034,566,4.034,567,4.034,568,4.034,569,4.034,570,4.034,571,4.034,572,4.034,573,4.034,574,4.034,575,4.034,576,5.314,577,4.034,578,4.034,579,4.034,580,4.034,581,4.034,582,4.034,583,4.034,584,4.034,585,6.801,586,4.617,587,4.617,588,3.651,589,4.034,590,4.617,591,4.617,592,3.651]],["title/classes/CreateUserInput.html",[0,0.251,593,2.48]],["body/classes/CreateUserInput.html",[0,0.402,2,0.879,3,0.151,4,0.151,5,0.118,7,0.371,8,1.634,12,0.443,13,0.012,14,1.232,15,1.35,16,1.386,17,0.599,19,1.915,23,0.19,31,0.766,49,0.168,75,0.009,76,0.009,79,3.548,80,1.655,83,2.685,158,3.57,245,3.746,593,3.968,594,6.302,595,5.224,596,5.207,597,4.565,598,4.565,599,4.131,600,5.207,601,5.207,602,4.201,603,5.207,604,5.207,605,5.207,606,4.565,607,5.755,608,4.131,609,4.131,610,3.332,611,4.565,612,4.131,613,3.806,614,4.131]],["title/classes/CreateUsers.html",[0,0.251,615,3.254]],["body/classes/CreateUsers.html",[0,0.341,2,0.941,3,0.162,4,0.162,5,0.126,7,0.397,11,1.04,12,0.376,13,0.012,17,0.509,23,0.199,32,1.792,49,0.18,56,2.094,65,1.679,75,0.01,76,0.01,80,1.222,200,1.759,206,1.432,207,1.04,211,1.387,236,2.702,339,1.852,392,3.927,394,4.481,481,4.139,484,5.051,485,4.382,486,4.666,487,5.408,492,3.566,493,2.199,615,5.432,616,4.886,617,5.591,618,5.591]],["title/entities/Event.html",[359,1.618,482,1.458]],["body/entities/Event.html",[0,0.127,3,0.06,4,0.06,5,0.047,7,0.148,8,0.839,11,1.216,12,0.544,13,0.012,14,0.939,15,1.615,16,1.507,17,0.717,19,2.192,23,0.189,28,1.158,31,0.306,32,0.669,49,0.109,51,2.038,54,1.521,73,3.479,74,2.845,75,0.005,76,0.005,80,1.578,162,1.038,207,0.912,262,1.522,269,1.975,327,3.128,339,0.692,359,1.33,363,2.438,365,2.438,370,2.487,371,2.438,373,1.194,377,2.438,381,2.158,384,4.069,385,2.72,386,2.465,387,1.194,389,1.194,396,2.57,407,3.874,408,2.321,429,0.995,439,2.748,450,3.878,482,1.908,489,3.838,491,1.522,493,2.487,504,2.896,515,2.57,516,3.727,517,3.727,518,3.727,519,2.72,520,2.57,521,2.72,527,3.878,528,3.554,531,2.321,534,2.336,537,1.651,539,2.956,541,2.956,542,1.651,544,1.651,553,3.113,554,1.651,560,1.522,589,4.285,619,1.651,620,4.265,621,4.265,622,4.265,623,3.727,624,3.727,625,2.72,626,2.215,627,2.896,628,3.727,629,2.088,630,2.088,631,2.088,632,2.088,633,2.088,634,3.33,635,2.088,636,1.825,637,3.383,638,2.088,639,2.088,640,2.088,641,2.088,642,2.956,643,2.088,644,2.956,645,5.04,646,5.04,647,5.04,648,5.04,649,2.088,650,2.088,651,2.088,652,1.651,653,2.088,654,2.321,655,2.088,656,2.088,657,2.088,658,2.088,659,2.088,660,2.038,661,2.088,662,2.088,663,2.088,664,2.088,665,3.108,666,2.088,667,2.088,668,2.088,669,2.088,670,2.088,671,2.088,672,2.088,673,3.383,674,1.825,675,2.088,676,2.088,677,2.088,678,1.418,679,2.465,680,3.383,681,1.651,682,1.522,683,1.825,684,1.825,685,1.651,686,1.258,687,1.825,688,1.825,689,3.383,690,2.088,691,2.088]],["title/entities/EventAddress.html",[359,1.618,489,2.352]],["body/entities/EventAddress.html",[0,0.206,3,0.097,4,0.097,5,0.076,7,0.239,8,1.212,12,0.527,13,0.012,14,1.328,15,1.606,16,1.47,17,0.713,23,0.166,28,1.674,31,0.494,49,0.108,74,2.952,75,0.007,76,0.007,162,1.674,207,0.909,269,2.457,339,1.115,359,1.922,362,4.192,363,3.288,365,3.288,370,2.482,371,3.288,373,1.925,377,3.288,379,2.943,381,3.118,384,4.305,385,3.118,386,3.562,387,1.925,389,1.925,407,4.713,482,2.744,489,2.794,498,5.027,499,5.027,500,5.027,501,5.027,502,5.027,503,5.027,504,3.907,528,3.551,652,5.842,674,2.943,687,2.943,692,6.909,693,2.943,694,3.368,695,3.368,696,3.368,697,3.368,698,3.368,699,3.368,700,3.865,701,4.888,702,3.368,703,3.368,704,3.368,705,3.368,706,3.368,707,3.368,708,3.368,709,2.943]],["title/classes/EventResponse.html",[0,0.251,710,2.999]],["body/classes/EventResponse.html",[0,0.377,2,1.04,3,0.179,4,0.179,5,0.139,13,0.012,23,0.224,28,2.498,31,0.906,49,0.199,75,0.011,76,0.011,482,2.187,493,2.429,540,4.194,710,5.315,711,5.397,712,3.721,713,4.194,714,2.942,715,6.176]],["title/modules/EventsModule.html",[84,1.319,97,2.48]],["body/modules/EventsModule.html",[0,0.292,3,0.138,4,0.138,5,0.108,13,0.012,23,0.235,25,0.95,49,0.154,75,0.009,76,0.009,84,2.218,86,2.105,87,2.105,88,2.281,89,2.281,90,2.105,91,3.297,92,3.297,97,4.977,99,3.973,103,4.453,104,3.871,105,2.967,106,2.19,107,2.281,109,3.095,124,2.605,125,1.883,131,2.487,132,3.489,180,3.054,482,1.696,489,3.56,491,3.489,540,3.252,716,4.184,717,4.184,718,4.184,719,4.788,720,4.751,721,4.788,722,4.23,723,4.184,724,4.538,725,4.788,726,4.184,727,2.379,728,4.788,729,4.788]],["title/classes/EventsResolver.html",[0,0.251,724,2.999]],["body/classes/EventsResolver.html",[0,0.116,2,0.32,3,0.055,4,0.055,5,0.043,7,0.135,11,1.375,12,0.519,13,0.013,14,1.291,15,1.25,16,1.06,17,0.575,19,1.162,23,0.204,24,1.034,25,0.377,26,3.749,27,2.522,29,1.627,30,3.331,31,0.279,32,0.609,35,1.986,37,1.034,44,0.905,46,1.034,49,0.061,53,0.944,54,0.589,56,1.919,58,2.41,64,1.717,65,1.2,67,2.522,73,2.038,74,2.159,75,0.005,76,0.005,80,1.381,200,0.802,203,0.696,206,1.618,207,1.451,211,1.512,212,0.905,214,2.549,217,1.502,235,3.582,236,2.169,315,1.086,316,1.212,317,1.145,319,1.145,326,2.713,355,1.034,370,2.169,390,3.541,396,2.792,399,3.665,400,3.665,408,1.034,421,2.865,426,3.14,427,3.386,429,0.905,430,1.145,439,1.903,460,2.282,482,2.238,504,4.419,513,3.721,515,3.089,519,3.27,528,2.996,534,3.1,540,1.29,543,3.492,548,0.804,665,4.251,681,1.502,686,3.324,710,3.377,720,3.153,723,1.66,724,2.282,730,1.66,731,3.996,732,2.737,733,3.132,734,3.492,735,3.996,736,3.996,737,1.9,738,1.9,739,1.9,740,1.9,741,1.9,742,4.48,743,3.147,744,1.9,745,1.9,746,3.174,747,1.9,748,1.66,749,1.9,750,1.9,751,1.9,752,1.9,753,4.14,754,1.9,755,1.9,756,1.9,757,1.9,758,1.9,759,2.477,760,1.9,761,1.29,762,1.29,763,1.9,764,1.9,765,3.132,766,1.9,767,1.9,768,2.713,769,2.713,770,3.132,771,3.159,772,3.132,773,3.996,774,2.89,775,3.159,776,3.746,777,3.159,778,2.713,779,2.713,780,2.284,781,1.9,782,1.9,783,1.9,784,1.9,785,1.9,786,1.9,787,1.9,788,1.9]],["title/injectables/EventsService.html",[219,1.021,720,2.352]],["body/injectables/EventsService.html",[0,0.077,3,0.037,4,0.037,5,0.028,7,0.09,11,1.344,12,0.489,13,0.013,14,1.287,16,0.974,17,0.553,19,2.115,23,0.19,25,0.251,30,2.439,32,0.405,49,0.041,54,1.375,56,2.087,58,2.298,59,1.394,64,1.562,65,2.136,75,0.003,76,0.003,80,1.328,117,0.601,118,1.761,125,0.497,131,0.656,200,0.566,203,0.811,206,1.556,207,1.13,211,1.469,212,2.537,219,0.549,220,0.515,228,1.688,230,2.135,232,2.334,235,3.218,251,1.778,253,0.92,260,2.203,263,1.204,269,1.082,275,1.103,317,1.333,319,0.761,325,1.204,326,1.502,327,1.883,329,2.878,338,0.761,339,0.418,355,1.928,361,3.506,370,1.994,396,2.671,399,3.186,400,3.186,408,1.928,421,2.882,426,2.002,427,2.203,439,1.406,453,2.135,462,3.88,463,2.582,482,2.625,489,3.384,491,0.92,495,3.244,504,3.011,513,2.828,515,2.878,519,3.234,521,2.26,534,2.275,538,1.103,540,0.858,548,0.534,553,1.919,554,0.998,588,0.998,592,0.998,623,2.579,624,1.103,625,0.805,626,1.841,627,0.858,628,1.933,654,1.204,660,2.671,665,2.582,681,0.998,686,2.427,700,0.998,709,2.579,720,1.264,722,0.858,726,1.103,727,0.627,732,1.933,734,1.933,742,3.097,746,3.019,748,1.933,753,3.443,759,1.749,789,1.103,790,1.749,791,2.004,792,2.951,793,1.933,794,2.212,795,2.212,796,2.212,797,1.933,798,1.263,799,2.951,800,2.73,801,3.234,802,1.263,803,2.212,804,2.212,805,1.263,806,2.212,807,1.263,808,0.92,809,4.434,810,1.263,811,1.263,812,1.263,813,1.263,814,2.212,815,1.263,816,1.263,817,2.212,818,1.263,819,2.212,820,1.263,821,2.212,822,1.263,823,3.544,824,0.858,825,0.998,826,1.263,827,2.212,828,1.263,829,2.212,830,1.263,831,0.92,832,0.92,833,1.263,834,1.263,835,1.263,836,1.263,837,0.998,838,2.951,839,1.263,840,1.263,841,1.263,842,1.263,843,2.951,844,2.212,845,1.933,846,2.212,847,3.544,848,2.951,849,2.334,850,4.776,851,1.883,852,2.334,853,3.544,854,2.212,855,4.029,856,3.097,857,3.544,858,3.544,859,2.212,860,5.92,861,2.951,862,4.009,863,2.951,864,2.951,865,2.951,866,5.548,867,2.951,868,2.951,869,1.263,870,1.263,871,2.951,872,1.263,873,1.263,874,1.263,875,1.263,876,1.263,877,1.263,878,1.263,879,0.92,880,1.263,881,0.998,882,2.951,883,1.263,884,1.263,885,1.103,886,1.933,887,1.263,888,1.263,889,1.749,890,1.749,891,1.263,892,1.103,893,1.263,894,2.212,895,2.212,896,2.212,897,4.434,898,3.544,899,4.434,900,3.544,901,2.212,902,2.212,903,3.544,904,1.263,905,2.212,906,1.103,907,1.263,908,1.103,909,1.263,910,1.263,911,2.802,912,2.212,913,1.263,914,1.263,915,1.263,916,2.212,917,3.544,918,2.212,919,1.263,920,1.263,921,1.263,922,1.263,923,2.212,924,1.263,925,1.263,926,1.263,927,1.263,928,1.103,929,1.263,930,1.103,931,0.998,932,1.263,933,2.212,934,1.263,935,1.263,936,1.263,937,1.263,938,0.998,939,1.263,940,1.263,941,2.212,942,1.263,943,1.263,944,2.212,945,1.263,946,2.212,947,1.263,948,2.951,949,1.263]],["title/classes/GqlAuthGuard.html",[0,0.251,44,1.96]],["body/classes/GqlAuthGuard.html",[0,0.345,2,0.952,3,0.163,4,0.163,5,0.127,7,0.402,12,0.38,13,0.012,17,0.514,23,0.216,25,1.122,31,0.829,44,3.294,49,0.182,58,1.811,64,1.592,75,0.01,76,0.01,80,1.235,184,3.605,200,1.771,206,1.447,207,1.051,211,1.402,316,4.411,714,2.692,950,4.47,951,6.044,952,6.044,953,5.288,954,4.939,955,3.605,956,4.939,957,4.939,958,5.652,959,4.47,960,4.47,961,5.652]],["title/injectables/JwtStrategy.html",[177,2.795,219,1.021]],["body/injectables/JwtStrategy.html",[0,0.307,3,0.146,4,0.146,5,0.113,7,0.358,11,0.936,12,0.502,13,0.012,14,1.047,17,0.585,23,0.223,25,0.999,49,0.162,53,2.501,54,1.561,56,1.996,64,1.417,73,2.213,75,0.009,76,0.009,80,1.406,177,4.368,184,3.21,191,3.667,194,3.98,200,1.647,203,1.845,206,1.647,207,1.196,211,1.248,219,1.595,220,2.052,225,5.086,228,3.76,236,2.529,245,2.614,252,4.398,269,1.845,714,2.397,962,4.398,963,4.398,964,5.033,965,6.432,966,5.62,967,5.033,968,5.033,969,4.398,970,5.033,971,4.398,972,3.98,973,5.033,974,4.398,975,4.398,976,5.033,977,5.033,978,5.033,979,5.033,980,5.033]],["title/classes/LocalAuthGuard.html",[0,0.251,47,2.625]],["body/classes/LocalAuthGuard.html",[0,0.335,2,0.924,3,0.159,4,0.159,5,0.124,7,0.39,12,0.369,13,0.012,17,0.499,23,0.213,25,1.089,31,0.805,47,4.332,49,0.176,58,2.176,64,1.545,75,0.01,76,0.01,80,1.199,184,3.5,200,1.739,206,1.405,207,1.021,211,1.361,714,2.614,950,4.339,951,5.934,952,5.934,953,5.234,954,4.795,955,3.5,956,4.795,957,4.795,959,4.339,960,4.339,981,5.934,982,6.791,983,5.487,984,5.37,985,5.487,986,5.487,987,5.487]],["title/injectables/LocalStrategy.html",[178,2.795,219,1.021]],["body/injectables/LocalStrategy.html",[0,0.285,3,0.135,4,0.135,5,0.105,7,0.332,11,1.35,12,0.412,13,0.012,14,1.259,17,0.557,23,0.224,25,0.927,32,1.496,33,4.21,34,3.171,49,0.15,54,1.9,56,1.926,58,1.496,59,2.409,64,1.315,65,1.84,75,0.009,76,0.009,80,1.339,117,2.224,118,3.608,178,4.161,184,2.978,200,1.569,203,2.245,204,4.08,206,1.569,207,1.14,211,1.158,219,1.52,220,1.904,225,4.845,230,4.374,236,2.409,243,5.354,245,3.182,260,3.045,263,3.334,714,2.224,969,4.08,971,4.08,972,3.692,974,4.08,975,4.08,988,4.08,989,4.669,990,6.344,991,4.669,992,6.838,993,4.08,994,4.669,995,4.669,996,4.08,997,4.669]],["title/classes/LoginUserInput.html",[0,0.251,38,2.625]],["body/classes/LoginUserInput.html",[0,0.353,2,0.973,3,0.167,4,0.167,5,0.13,7,0.411,8,1.739,12,0.471,13,0.012,14,1.277,15,1.437,16,1.544,17,0.638,23,0.167,31,0.847,38,4.471,49,0.186,75,0.01,76,0.01,79,3.924,82,5.05,83,2.858,158,3.451,245,3.919,597,5.05,998,6.594]],["title/modules/MailModule.html",[84,1.319,98,2.48]],["body/modules/MailModule.html",[0,0.281,3,0.133,4,0.133,5,0.104,11,0.857,13,0.013,23,0.223,25,0.914,49,0.148,56,1.297,59,1.811,73,2.025,74,2.151,75,0.009,76,0.009,84,2.177,86,2.025,87,2.025,88,2.194,89,2.194,90,2.025,91,3.236,92,3.236,98,4.735,105,2.893,106,2.107,107,2.194,109,2.289,112,3.643,117,2.893,127,4.025,128,4.025,145,5.307,149,5.936,152,4.025,831,3.357,990,4.025,999,4.025,1000,4.025,1001,4.025,1002,4.979,1003,4.607,1004,6.793,1005,6.073,1006,4.607,1007,4.607,1008,4.607,1009,3.643,1010,4.607,1011,4.607,1012,4.607,1013,4.607,1014,4.607,1015,4.607,1016,4.607,1017,4.607,1018,4.607,1019,4.607,1020,4.025,1021,4.025,1022,6.073,1023,4.607,1024,4.607,1025,6.073,1026,4.607,1027,4.607]],["title/injectables/MailService.html",[219,1.021,1002,2.48]],["body/injectables/MailService.html",[0,0.203,3,0.096,4,0.096,5,0.075,7,0.237,12,0.468,13,0.012,14,1.373,17,0.634,23,0.165,25,0.661,49,0.107,54,1.033,56,2.256,65,2.421,75,0.007,76,0.007,80,1.522,81,4.597,106,1.523,117,2.309,118,3.12,158,1.523,200,1.241,203,1.777,206,1.783,207,1.295,211,1.655,219,1.202,220,1.358,230,3.783,245,4.269,260,2.409,521,3.092,626,1.73,746,4.36,955,4.256,1002,2.921,1009,2.633,1021,5.831,1028,2.91,1029,4.236,1030,4.848,1031,4.236,1032,4.848,1033,4.848,1034,3.33,1035,6.964,1036,3.33,1037,4.848,1038,3.33,1039,4.848,1040,3.33,1041,4.848,1042,3.33,1043,4.848,1044,3.33,1045,4.848,1046,3.33,1047,6.672,1048,6.672,1049,2.91,1050,3.33,1051,3.33,1052,3.33,1053,6.672,1054,6.672,1055,3.33,1056,3.33,1057,3.33,1058,3.33,1059,3.33,1060,3.33,1061,5.716,1062,2.261,1063,5.716,1064,3.33,1065,3.33,1066,2.633,1067,3.33,1068,3.33,1069,3.33]],["title/modules/NotificationsModule.html",[84,1.319,99,2.625]],["body/modules/NotificationsModule.html",[0,0.32,3,0.151,4,0.151,5,0.118,13,0.012,23,0.219,25,1.04,49,0.168,75,0.009,76,0.009,84,2.314,86,2.303,87,2.303,88,2.495,89,2.495,90,2.303,91,3.439,92,3.439,98,4.805,99,5.341,100,4.805,105,3.142,106,2.395,107,2.495,109,3.278,801,5.368,1070,4.576,1071,4.576,1072,4.576,1073,5.237,1074,5.237,1075,5.237,1076,5.237,1077,4.576]],["title/injectables/NotificationsService.html",[219,1.021,801,2.625]],["body/injectables/NotificationsService.html",[0,0.183,3,0.087,4,0.087,5,0.068,7,0.214,12,0.451,13,0.013,14,0.876,17,0.633,23,0.201,25,0.597,49,0.097,54,1.394,56,2.156,58,2.48,59,2.349,65,1.616,75,0.006,76,0.006,80,1.52,123,2.377,188,3.052,200,1.151,203,1.647,206,1.781,207,1.294,211,1.665,219,1.115,220,1.226,260,2.675,453,1.811,482,2.844,553,2.564,625,4.281,660,2.708,700,5.5,722,2.041,801,2.867,824,3.052,831,2.19,837,2.377,845,4.704,1002,4.191,1029,5.864,1031,5.864,1078,2.626,1079,4.494,1080,6.711,1081,4.494,1082,6.711,1083,3.005,1084,6.711,1085,4.704,1086,3.656,1087,3.005,1088,4.494,1089,3.005,1090,4.494,1091,3.005,1092,4.494,1093,3.005,1094,3.005,1095,4.494,1096,3.005,1097,4.494,1098,3.005,1099,4.494,1100,3.005,1101,3.005,1102,2.626,1103,2.626,1104,6.396,1105,3.005,1106,3.005,1107,5.974,1108,5.974,1109,5.974,1110,5.974,1111,3.005,1112,3.005,1113,3.005,1114,3.005,1115,3.005,1116,3.005,1117,3.005,1118,5.974,1119,3.005,1120,3.005,1121,3.005,1122,3.005,1123,3.005,1124,6.711,1125,5.384,1126,5.384,1127,3.005,1128,3.005,1129,3.005,1130,3.005,1131,5.974]],["title/classes/PageData.html",[0,0.251,780,2.352]],["body/classes/PageData.html",[0,0.331,2,0.912,3,0.157,4,0.157,5,0.122,7,0.385,8,1.671,12,0.493,13,0.012,15,1.503,16,1.567,17,0.667,19,2.339,23,0.157,28,2.306,31,0.794,49,0.174,75,0.01,76,0.01,394,5.008,426,3.643,427,3.643,493,2.13,774,3.353,780,3.85,1132,6.703,1133,4.732,1134,5.415,1135,5.415,1136,5.415]],["title/entities/Participant.html",[359,1.618,553,1.96]],["body/entities/Participant.html",[0,0.244,3,0.115,4,0.115,5,0.09,7,0.284,8,1.368,11,1.475,12,0.539,13,0.012,14,0.897,15,1.582,16,1.506,17,0.702,19,1.603,23,0.197,28,1.888,31,0.585,32,1.279,49,0.177,73,2.995,75,0.008,76,0.008,162,1.984,207,1.267,269,2.776,339,1.322,359,2.168,363,3.61,365,3.61,370,3.081,371,3.61,373,2.282,377,3.61,381,4.345,384,3.152,385,4.029,387,2.282,389,2.282,482,2.809,528,3.143,548,1.69,553,2.626,625,2.547,634,2.711,678,2.711,679,4.602,682,2.909,774,2.888,1062,2.711,1137,3.157,1138,3.993,1139,3.993,1140,3.993,1141,4.36,1142,4.36,1143,3.993,1144,3.993,1145,5.386,1146,3.993,1147,3.993,1148,3.993,1149,3.489,1150,3.489,1151,3.993]],["title/classes/ParticipantByDateListResponse.html",[0,0.251,1152,3.254]],["body/classes/ParticipantByDateListResponse.html",[0,0.374,2,1.03,3,0.177,4,0.177,5,0.138,13,0.012,23,0.224,28,2.484,31,0.897,49,0.197,75,0.01,76,0.01,493,2.407,553,2.916,712,4.372,713,4.157,714,2.916,1152,5.738,1153,3.904,1154,4.46,1155,5.349,1156,4.628,1157,4.84]],["title/classes/ParticipantByDateResponse.html",[0,0.251,1156,2.625]],["body/classes/ParticipantByDateResponse.html",[0,0.344,2,0.949,3,0.163,4,0.163,5,0.127,7,0.401,8,1.713,12,0.464,13,0.012,14,1.124,15,1.415,16,1.434,17,0.628,19,2.007,23,0.163,28,2.364,31,0.826,49,0.181,74,2.755,75,0.01,76,0.01,370,2.935,407,4.404,493,2.217,528,3.036,774,3.414,1153,4.761,1156,4.404,1158,4.926,1159,5.637,1160,5.637]],["title/classes/ParticipantListResponse.html",[0,0.251,1161,2.999]],["body/classes/ParticipantListResponse.html",[0,0.374,2,1.03,3,0.177,4,0.177,5,0.138,13,0.012,23,0.224,28,2.484,31,0.897,49,0.197,75,0.01,76,0.01,493,2.407,553,3.456,712,4.372,713,4.157,714,2.916,1153,3.904,1161,5.287,1162,4.84,1163,4.157]],["title/classes/ParticipantResponse.html",[0,0.251,1164,2.795]],["body/classes/ParticipantResponse.html",[0,0.331,2,0.912,3,0.157,4,0.157,5,0.122,7,0.385,8,1.671,11,1.496,12,0.541,13,0.012,15,1.503,16,1.567,17,0.667,19,1.958,23,0.212,31,0.794,32,1.735,49,0.174,75,0.01,76,0.01,83,2.747,482,2.848,548,2.292,1153,4.893,1164,4.574,1165,4.282,1166,4.732,1167,4.732,1168,4.732]],["title/classes/ParticipantUpdate.html",[0,0.251,1169,2.999]],["body/classes/ParticipantUpdate.html",[0,0.348,2,0.959,3,0.165,4,0.165,5,0.128,7,0.405,8,1.724,12,0.538,13,0.012,14,1.131,15,1.425,16,1.538,17,0.632,23,0.201,31,0.836,49,0.183,75,0.01,76,0.01,83,2.834,746,4.081,1145,5.931,1153,4.784,1163,3.87,1169,5.065,1170,4.507,1171,4.98,1172,5.699]],["title/modules/ParticipantsModule.html",[84,1.319,100,2.48]],["body/modules/ParticipantsModule.html",[0,0.297,3,0.141,4,0.141,5,0.11,11,0.905,13,0.012,23,0.233,25,0.966,49,0.157,75,0.009,76,0.009,84,2.236,86,2.14,87,2.14,88,2.318,89,2.318,90,2.14,91,3.323,92,3.323,97,3.793,100,4.99,103,4.473,104,3.888,105,2.998,106,2.226,107,2.318,109,3.128,124,2.648,125,1.914,131,2.528,132,3.546,180,3.104,553,2.318,722,4.275,1086,4.762,1163,3.305,1173,4.253,1174,4.253,1175,4.253,1176,4.867,1177,4.867,1178,4.253,1179,4.253,1180,4.587,1181,4.867,1182,4.867]],["title/classes/ParticipantsResolver.html",[0,0.251,1180,2.999]],["body/classes/ParticipantsResolver.html",[0,0.164,2,0.453,3,0.078,4,0.078,5,0.061,7,0.191,11,1.389,12,0.509,13,0.013,14,1.256,15,1.158,16,1.085,17,0.554,19,1.87,23,0.219,24,1.465,25,0.534,26,3.447,27,2.25,29,2.148,30,3.285,31,0.395,32,0.863,35,2.501,37,1.465,44,1.282,46,1.465,49,0.087,53,1.338,54,0.835,56,1.996,58,2.394,64,1.59,65,1.511,67,2.25,73,1.184,74,2.278,75,0.006,76,0.006,80,1.332,200,1.059,203,0.987,206,1.56,207,1.369,211,1.401,212,1.282,214,1.717,235,2.69,236,2.529,315,1.539,316,1.717,355,1.465,390,3.645,421,2.933,426,3.196,427,3.435,429,1.282,430,1.622,439,1.97,460,1.962,528,2.945,553,1.97,625,2.637,743,3.418,746,3.5,761,1.828,762,1.828,768,2.808,769,2.808,771,3.269,774,2.942,775,3.269,776,3.835,778,2.808,779,2.808,780,2.363,1085,3.613,1086,3.228,1154,1.962,1156,2.637,1157,2.129,1161,3.668,1163,1.828,1164,1.828,1169,4.881,1178,2.353,1180,3.013,1183,2.353,1184,6.094,1185,6.094,1186,4.399,1187,5.648,1188,2.692,1189,2.692,1190,2.692,1191,2.692,1192,2.692,1193,2.692,1194,2.692,1195,2.692,1196,2.692,1197,2.692,1198,2.692,1199,4.935,1200,1.962,1201,2.353,1202,2.692,1203,2.692,1204,2.692,1205,2.692,1206,3.613,1207,2.353,1208,3.613,1209,3.613,1210,4.135,1211,4.135,1212,4.135,1213,2.692]],["title/injectables/ParticipantsService.html",[219,1.021,1086,2.352]],["body/injectables/ParticipantsService.html",[0,0.124,3,0.059,4,0.059,5,0.046,7,0.145,11,1.528,12,0.557,13,0.013,14,1.249,16,0.806,17,0.606,19,2.271,23,0.201,25,0.404,30,2.507,32,0.653,49,0.066,54,1.499,56,2.048,58,2.3,59,0.801,64,1.825,65,2,75,0.005,76,0.005,80,1.456,117,0.97,118,2.401,125,0.801,131,1.058,188,2.252,200,0.849,203,1.215,206,1.705,207,1.239,211,1.607,212,2.302,219,0.822,220,0.831,230,2.911,235,2.534,236,1.304,251,1.998,260,2.401,263,1.108,267,3.821,269,1.771,325,1.804,327,3.082,329,2.911,338,1.227,339,0.675,370,2.092,408,1.804,421,2.51,426,2.084,427,2.084,439,0.97,453,1.227,462,2.416,463,2.416,482,2.935,521,2.115,548,0.862,553,0.97,625,3.637,660,1.227,686,1.227,720,3.581,722,1.383,727,1.012,746,3.525,774,1.516,790,2.622,791,2.847,800,3.436,808,1.484,824,1.383,825,2.622,831,1.484,832,1.484,837,1.611,849,2.622,851,1.299,852,1.611,862,1.611,879,2.416,885,2.897,886,2.897,889,1.611,890,1.611,911,2.622,1086,1.895,1156,3.082,1157,1.611,1163,1.383,1164,3.282,1186,3.664,1199,2.897,1200,1.484,1214,1.78,1215,3.315,1216,3.315,1217,3.315,1218,2.897,1219,2.037,1220,2.037,1221,3.315,1222,3.315,1223,2.037,1224,2.897,1225,2.037,1226,2.897,1227,2.037,1228,2.037,1229,3.315,1230,2.037,1231,3.315,1232,2.037,1233,2.037,1234,2.037,1235,2.897,1236,2.037,1237,2.037,1238,1.78,1239,2.037,1240,1.78,1241,1.78,1242,2.037,1243,2.037,1244,5.82,1245,3.664,1246,1.78,1247,1.78,1248,3.315,1249,3.315,1250,2.037,1251,2.037,1252,2.037,1253,1.78,1254,2.037,1255,3.315,1256,2.037,1257,2.037,1258,2.037,1259,2.037,1260,2.037,1261,2.037,1262,2.037,1263,2.037,1264,3.315,1265,2.037,1266,2.037,1267,1.78,1268,2.037,1269,2.037,1270,4.193,1271,2.037,1272,1.78,1273,1.78,1274,2.037,1275,2.037,1276,2.037]],["title/injectables/QueryResolver.html",[120,2.625,219,1.021]],["body/injectables/QueryResolver.html",[0,0.33,3,0.156,4,0.156,5,0.122,7,0.384,12,0.363,13,0.012,14,0.879,17,0.491,23,0.194,25,1.072,49,0.174,64,1.521,75,0.01,76,0.01,80,1.18,117,2.573,118,2.684,120,4.289,140,4.271,200,1.722,206,1.383,207,1.005,211,1.34,219,1.668,220,2.202,392,3.087,429,2.573,466,4.271,468,5.318,953,5.205,955,3.445,984,5.791,1277,4.72,1278,5.876,1279,5.876,1280,5.401,1281,5.876,1282,4.72,1283,4.72,1284,4.72,1285,5.876,1286,4.72,1287,4.72,1288,4.72]],["title/injectables/QueryResolver-1.html",[120,2.188,219,0.851,453,2.067]],["body/injectables/QueryResolver-1.html",[0,0.33,3,0.156,4,0.156,5,0.122,7,0.384,12,0.363,13,0.012,14,0.879,17,0.491,23,0.194,25,1.072,49,0.174,64,1.521,75,0.01,76,0.01,80,1.18,117,2.573,118,2.684,120,4.289,140,4.271,200,1.722,206,1.383,207,1.005,211,1.34,219,1.668,220,2.202,392,3.087,429,2.573,466,4.271,468,5.318,953,5.205,955,3.445,984,5.791,1278,5.876,1279,5.876,1281,5.876,1282,4.72,1283,4.72,1284,4.72,1285,5.876,1286,4.72,1287,4.72,1288,4.72,1289,4.72,1290,5.401]],["title/entities/Rating.html",[359,1.618,654,2.239]],["body/entities/Rating.html",[0,0.351,3,0.123,4,0.123,5,0.096,7,0.302,8,1.427,11,1.493,12,0.506,13,0.012,14,0.936,15,1.544,16,1.404,17,0.685,19,1.672,23,0.211,28,1.969,31,0.623,32,1.361,49,0.137,73,2.867,75,0.008,76,0.008,162,2.11,207,1.213,269,2.822,339,1.406,359,2.262,363,3.728,365,3.728,370,2.749,371,3.728,373,2.427,377,3.728,381,4.458,384,3.288,385,4.16,387,2.427,389,2.427,482,2.843,528,3.212,548,1.797,610,2.709,626,3.387,634,2.884,654,3.13,679,4.752,1141,4.548,1142,4.548,1291,3.711,1292,4.247,1293,4.247,1294,4.247,1295,4.247,1296,4.247,1297,4.247,1298,4.247,1299,3.095,1300,3.095,1301,3.358,1302,3.711,1303,3.711]],["title/classes/RatingListResponse.html",[0,0.251,1304,2.999]],["body/classes/RatingListResponse.html",[0,0.376,2,1.037,3,0.178,4,0.178,5,0.139,13,0.012,23,0.224,28,2.493,31,0.903,49,0.198,75,0.01,76,0.01,493,2.421,654,3.351,712,3.71,713,4.182,714,2.933,1162,4.869,1304,5.306,1305,4.487,1306,4.487,1307,6.158]],["title/classes/RatingResponse.html",[0,0.251,1308,2.795]],["body/classes/RatingResponse.html",[0,0.331,2,0.912,3,0.157,4,0.157,5,0.122,7,0.385,8,1.671,11,1.496,12,0.493,13,0.012,15,1.503,16,1.567,17,0.667,19,1.958,23,0.212,31,0.794,32,1.735,49,0.174,75,0.01,76,0.01,83,2.747,482,2.848,548,2.292,626,3.808,1165,4.282,1166,4.732,1167,4.732,1168,4.732,1305,5.59,1308,4.574]],["title/classes/RatingUpdate.html",[0,0.251,1309,2.999]],["body/classes/RatingUpdate.html",[0,0.421,2,0.949,3,0.163,4,0.163,5,0.127,7,0.401,8,1.713,12,0.464,13,0.012,14,1.124,15,1.415,16,1.495,17,0.628,19,2.007,23,0.2,31,0.826,49,0.181,75,0.01,76,0.01,83,2.815,610,3.596,626,3.877,746,4.061,1170,4.457,1171,4.926,1299,4.108,1300,4.108,1302,4.926,1303,4.926,1305,5.439,1309,5.031,1310,5.637,1311,5.637]],["title/modules/RatingsModule.html",[84,1.319,101,2.795]],["body/modules/RatingsModule.html",[0,0.293,3,0.139,4,0.139,5,0.108,13,0.012,23,0.235,25,0.953,49,0.154,75,0.009,76,0.009,84,2.221,86,2.11,87,2.11,88,2.286,89,2.286,90,2.11,91,3.301,92,2.286,97,4.697,100,4.697,101,5.701,103,4.456,104,3.874,105,2.971,106,2.195,107,2.286,109,3.1,124,2.611,125,1.887,129,4.194,131,2.493,132,3.497,180,3.061,654,2.611,727,2.385,1179,4.194,1306,3.497,1312,4.194,1313,4.194,1314,4.799,1315,4.972,1316,4.799,1317,4.545,1318,4.799,1319,4.194,1320,4.799]],["title/classes/RatingsResolver.html",[0,0.251,1317,2.999]],["body/classes/RatingsResolver.html",[0,0.182,2,0.501,3,0.086,4,0.086,5,0.067,7,0.211,11,1.421,12,0.4,13,0.013,14,1.243,15,1.097,16,1.142,17,0.541,23,0.221,24,1.619,25,0.591,26,3.538,27,2.427,29,2.317,30,3.315,31,0.436,32,0.953,35,2.659,37,1.619,44,1.417,46,1.619,49,0.096,53,1.478,54,0.923,56,1.883,58,2.447,64,1.507,65,1.339,67,2.427,74,2.105,75,0.006,76,0.006,80,1.299,200,1.142,203,1.09,206,1.522,207,1.326,211,1.327,214,1.898,235,2.831,236,2.629,315,1.701,316,1.898,355,1.619,390,3.772,421,3.087,426,3.322,427,3.543,429,1.417,430,1.793,439,2.125,460,2.168,528,2.614,654,2.427,743,3.029,746,3.234,761,2.02,762,2.02,768,3.029,769,3.029,771,3.527,774,3.058,775,3.527,776,4.037,778,3.029,779,3.029,780,2.55,1154,2.168,1200,2.168,1201,2.6,1206,2.6,1207,2.6,1209,3.898,1301,3.527,1304,3.899,1306,2.168,1308,2.02,1309,5.052,1315,4.264,1317,3.25,1319,2.6,1321,2.6,1322,4.676,1323,6.368,1324,5.944,1325,2.975,1326,2.975,1327,2.975,1328,2.975,1329,2.975,1330,2.975,1331,2.975,1332,2.975,1333,2.975,1334,4.676,1335,2.975,1336,2.975,1337,2.975,1338,2.975,1339,4.46,1340,4.46,1341,4.46]],["title/injectables/RatingsService.html",[219,1.021,1315,2.625]],["body/injectables/RatingsService.html",[0,0.122,3,0.058,4,0.058,5,0.045,7,0.142,11,1.534,12,0.446,13,0.013,14,1.217,16,0.797,17,0.603,19,2.174,23,0.196,25,0.398,30,2.488,32,0.642,49,0.064,54,1.635,56,2.105,58,2.435,59,2.073,64,1.681,65,2.245,75,0.005,76,0.005,80,1.448,117,0.954,118,2.378,125,0.788,131,1.04,200,0.837,203,1.199,206,1.696,207,1.232,211,1.598,212,2.279,219,0.811,220,0.817,230,2.883,235,2.512,236,1.286,251,2.883,260,2.62,263,2.255,267,4.474,269,1.754,325,1.78,327,3.052,329,2.883,338,1.207,339,0.663,370,0.788,408,1.78,421,2.485,426,1.625,427,2.06,439,1.558,462,2.383,463,1.46,482,2.969,515,1.971,521,2.086,548,0.848,626,4.085,654,3.765,686,1.207,720,3.412,727,0.995,746,3.248,774,1.496,790,2.586,791,2.815,797,2.858,800,3.412,808,1.46,824,1.36,825,2.586,832,1.46,849,2.586,851,1.278,852,1.584,862,1.584,879,2.383,889,1.584,890,1.584,911,2.586,1086,3.412,1200,1.46,1218,2.858,1224,2.858,1226,2.858,1235,2.858,1238,1.751,1240,1.751,1241,1.751,1244,2.858,1245,4.181,1246,1.751,1247,1.751,1253,1.751,1273,2.858,1301,3.783,1306,1.46,1308,2.221,1315,2.086,1322,3.622,1334,1.751,1342,1.751,1343,3.271,1344,3.271,1345,2.003,1346,2.003,1347,3.271,1348,3.271,1349,2.003,1350,2.003,1351,2.003,1352,2.003,1353,2.003,1354,2.003,1355,3.271,1356,2.003,1357,2.003,1358,2.003,1359,3.271,1360,2.003,1361,2.003,1362,2.003,1363,1.751,1364,3.271,1365,2.003,1366,2.003,1367,2.003,1368,2.003,1369,2.003,1370,3.271,1371,2.003,1372,3.271,1373,3.271,1374,3.271,1375,2.003,1376,2.003,1377,2.003,1378,2.003,1379,2.003,1380,2.003,1381,3.271,1382,3.271,1383,2.003,1384,2.003,1385,2.003,1386,2.003,1387,2.003,1388,3.271,1389,2.003,1390,2.003,1391,4.145,1392,2.003,1393,2.003]],["title/classes/RefreshUserToken.html",[0,0.251,41,2.625]],["body/classes/RefreshUserToken.html",[0,0.365,2,1.007,3,0.173,4,0.173,5,0.135,7,0.425,8,1.775,11,1.331,12,0.402,13,0.012,14,1.164,15,1.226,16,1.472,17,0.544,23,0.173,31,0.877,41,4.564,49,0.192,75,0.01,76,0.01,81,4.614,83,2.918,1394,6.253,1395,4.728,1396,5.98]],["title/classes/ResetPasswordInput.html",[0,0.251,1397,2.795]],["body/classes/ResetPasswordInput.html",[0,0.367,2,1.012,3,0.174,4,0.174,5,0.136,7,0.427,8,1.781,12,0.404,13,0.012,14,1.168,15,1.233,16,1.475,17,0.547,23,0.174,31,0.882,49,0.193,75,0.01,76,0.01,83,2.928,245,3.987,1397,4.876,1398,5.678,1399,5.256,1400,6.014]],["title/classes/ResetPasswordTokenInput.html",[0,0.251,1401,2.625]],["body/classes/ResetPasswordTokenInput.html",[0,0.383,2,0.815,3,0.14,4,0.14,5,0.109,7,0.344,8,1.557,12,0.468,13,0.012,14,1.272,15,1.427,16,1.466,17,0.633,19,2.141,23,0.181,31,0.71,49,0.156,75,0.009,76,0.009,81,4.194,83,2.559,158,3.687,598,5.484,599,4.962,600,5.823,601,5.823,602,4.697,603,5.823,604,5.823,605,5.823,608,3.83,609,3.83,610,3.09,612,4.962,613,4.573,614,4.962,1395,3.83,1398,5.823,1401,4.003,1402,6.961,1403,6.961,1404,4.844,1405,4.844,1406,4.844]],["title/classes/ResetResponse.html",[0,0.251,1407,2.999]],["body/classes/ResetResponse.html",[0,0.303,2,0.579,3,0.099,4,0.099,5,0.078,7,0.244,8,1.231,11,1.476,12,0.231,13,0.013,14,1.037,15,0.705,16,1.299,17,0.313,23,0.231,24,1.872,25,0.683,26,3.037,27,3.95,28,1.7,29,2.578,30,2.803,31,0.504,35,2.894,37,1.872,40,3.509,43,2.195,44,1.639,46,1.872,49,0.16,53,1.71,54,1.067,56,0.969,58,2.043,64,2.132,65,1.033,67,3.169,75,0.007,76,0.007,77,3.714,158,1.574,207,1.186,228,2.774,235,1.639,236,1.353,269,1.261,315,1.967,317,2.073,319,2.073,355,1.872,390,2.701,421,2.578,426,2.894,427,3.168,429,1.639,430,2.073,439,1.639,593,3.509,602,3.714,686,2.073,761,2.337,762,2.337,768,2.337,769,2.337,774,2.663,776,3.371,777,2.721,778,2.337,779,2.337,780,1.967,851,2.195,1397,3.955,1401,3.714,1407,4.645,1408,2.721,1409,3.441,1410,2.721,1411,2.195,1412,4.312,1413,3.007,1414,2.721,1415,3.371,1416,3.007,1417,3.925,1418,3.007,1419,2.337,1420,3.007,1421,3.007,1422,3.007,1423,3.007,1424,3.007,1425,3.007,1426,3.007,1427,2.721,1428,3.007,1429,3.007,1430,3.007,1431,3.007,1432,4.338,1433,3.007,1434,3.007,1435,2.721,1436,3.007,1437,3.007,1438,3.007,1439,3.007,1440,3.007]],["title/entities/Tag.html",[359,1.618,531,2.239]],["body/entities/Tag.html",[0,0.294,3,0.139,4,0.139,5,0.109,7,0.343,8,1.552,12,0.542,13,0.012,14,1.196,15,1.561,16,1.412,17,0.693,23,0.201,28,2.142,31,0.707,49,0.155,73,3.232,75,0.009,76,0.009,162,2.396,207,1.417,269,2.546,339,1.597,359,2.46,363,3.97,365,3.97,370,2.89,371,3.97,373,2.756,377,3.97,384,3.97,387,2.756,389,2.756,520,2.905,528,2.751,531,3.404,534,3.501,634,4.249,678,3.274,685,3.813,1102,4.213,1441,4.213,1442,4.822,1443,4.822,1444,4.822,1445,4.822,1446,4.822]],["title/modules/TagsModule.html",[84,1.319,102,2.795]],["body/modules/TagsModule.html",[0,0.339,3,0.16,4,0.16,5,0.125,13,0.012,23,0.23,25,1.101,49,0.178,75,0.01,76,0.01,84,2.374,86,2.439,87,2.439,88,2.642,89,2.642,90,2.439,91,3.53,92,2.642,102,5.494,105,3.256,106,2.536,107,2.642,109,2.756,124,3.018,125,2.181,531,3.018,1447,4.847,1448,4.847,1449,5.16,1450,5.546,1451,4.847,1452,4.981,1453,5.546,1454,4.386,1455,5.546]],["title/classes/TagsResolver.html",[0,0.251,1452,2.999]],["body/classes/TagsResolver.html",[0,0.309,2,0.853,3,0.147,4,0.147,5,0.114,7,0.36,12,0.504,13,0.012,15,1.039,17,0.588,23,0.217,26,2.415,29,3.356,30,2.841,31,0.743,49,0.163,53,2.519,54,1.572,56,2.003,64,1.428,65,1.522,74,1.796,75,0.009,76,0.009,80,1.412,200,1.654,203,1.858,206,1.654,207,1.393,211,1.258,236,2.541,520,4.661,528,2.229,531,3.516,534,3.568,548,2.146,743,3.443,1208,4.43,1449,5.045,1451,4.43,1452,4.709,1454,4.009,1456,4.43,1457,5.07,1458,5.07,1459,5.07,1460,5.07,1461,5.07]],["title/injectables/TagsService.html",[219,1.021,1449,2.625]],["body/injectables/TagsService.html",[0,0.316,3,0.15,4,0.15,5,0.117,7,0.368,12,0.524,13,0.012,17,0.596,23,0.225,25,1.029,49,0.167,54,1.608,56,2.024,64,1.46,65,1.557,75,0.009,76,0.009,80,1.432,125,2.039,200,1.678,203,2.402,206,1.678,207,1.219,211,1.286,212,2.47,219,1.626,220,2.114,260,2.576,329,4.55,338,3.124,339,1.717,531,2.821,534,3.597,548,2.194,1449,4.181,1454,4.1,1462,4.53,1463,6.554,1464,5.185,1465,5.185,1466,6.554,1467,6.554,1468,5.185,1469,5.185,1470,5.185]],["title/injectables/TokenService.html",[219,1.021,1471,2.625]],["body/injectables/TokenService.html",[0,0.23,3,0.109,4,0.109,5,0.085,7,0.268,8,1.313,11,1.235,12,0.412,13,0.013,14,1.213,17,0.678,23,0.192,25,0.748,49,0.121,51,2.27,54,2.251,58,2.242,59,2.408,64,1.724,75,0.008,76,0.008,80,1.529,81,2.27,200,1.356,206,1.792,207,1.301,211,1.736,219,1.313,220,1.536,235,3.164,251,2.27,259,3.292,263,2.881,370,2.408,493,2.082,928,4.627,930,4.627,931,4.187,1411,2.403,1471,3.377,1472,3.292,1473,6.123,1474,6.123,1475,5.295,1476,5.295,1477,5.295,1478,5.295,1479,5.295,1480,3.767,1481,3.767,1482,5.295,1483,3.767,1484,5.295,1485,3.767,1486,5.295,1487,3.767,1488,5.295,1489,3.767,1490,4.627,1491,5.295,1492,3.767,1493,5.295,1494,3.767,1495,5.295,1496,5.295,1497,3.767,1498,3.767,1499,3.767,1500,3.767,1501,3.767,1502,5.295,1503,5.295,1504,5.295,1505,5.295,1506,5.295,1507,6.642,1508,3.767,1509,5.295,1510,5.295,1511,3.767,1512,5.295,1513,5.295,1514,3.767,1515,5.295,1516,4.627,1517,3.767,1518,3.767,1519,3.767,1520,5.295,1521,3.767,1522,3.767,1523,3.767,1524,3.767]],["title/classes/UpdateCompanyInput.html",[0,0.251,313,2.795]],["body/classes/UpdateCompanyInput.html",[0,0.378,2,1.043,3,0.179,4,0.179,5,0.14,13,0.012,23,0.211,31,0.908,49,0.199,75,0.011,76,0.011,83,2.98,308,3.951,313,4.963,318,4.898,325,3.371,474,4.898,714,2.951,1525,5.413,1526,4.898,1527,6.195]],["title/classes/UpdateEventInput.html",[0,0.251,753,2.795]],["body/classes/UpdateEventInput.html",[0,0.358,2,0.987,3,0.169,4,0.169,5,0.132,7,0.416,8,1.754,12,0.394,13,0.012,14,1.15,15,1.201,16,1.459,17,0.533,23,0.204,31,0.859,49,0.188,75,0.01,76,0.01,83,2.883,269,2.783,325,3.189,513,3.738,514,4.634,714,2.792,753,4.801,759,4.634,1526,4.634,1528,6.178,1529,5.861,1530,5.861]],["title/classes/UpdateUserInput.html",[0,0.251,1412,2.625]],["body/classes/UpdateUserInput.html",[0,0.335,2,0.668,3,0.115,4,0.115,5,0.089,7,0.282,8,1.362,12,0.518,13,0.012,14,1.331,15,1.58,16,1.504,17,0.701,19,1.975,23,0.182,31,0.582,40,2.392,49,0.128,74,2.879,75,0.008,76,0.008,79,2.696,83,2.239,158,3.262,245,3.27,269,2.308,325,2.16,407,4.917,408,3.426,528,3.389,593,2.392,596,4.343,599,3.139,600,4.343,601,4.343,602,3.503,603,4.343,604,4.343,605,4.343,606,3.469,607,4.799,608,3.139,609,3.139,610,2.532,611,3.469,612,3.139,613,2.892,614,3.139,714,1.891,1299,2.892,1300,2.892,1412,3.503,1526,3.139,1531,6.839,1532,5.502,1533,5.502,1534,5.502,1535,4.979,1536,3.97,1537,3.97,1538,3.97,1539,3.97,1540,3.97,1541,3.97,1542,3.97,1543,3.97,1544,3.97,1545,3.97,1546,3.97,1547,3.97,1548,3.97]],["title/entities/User.html",[11,0.765,359,1.618]],["body/entities/User.html",[0,0.186,3,0.088,4,0.088,5,0.069,7,0.217,8,1.127,10,3.688,11,0.845,12,0.535,13,0.012,14,1.31,15,1.63,16,1.436,17,0.724,23,0.157,28,1.556,31,0.447,49,0.146,51,2.738,73,3.228,74,2.952,75,0.007,76,0.007,80,0.993,158,2.484,162,1.516,207,0.845,245,2.821,269,1.99,298,4.196,339,1.01,359,1.787,363,3.104,365,3.104,370,2.825,371,3.104,373,1.743,377,3.104,384,4.389,386,3.311,387,1.743,389,1.743,407,4.458,408,2.955,493,1.199,528,3.602,636,2.665,642,2.665,652,3.593,678,2.071,682,2.222,688,2.665,851,1.945,1532,4.746,1533,4.746,1534,4.746,1535,5.527,1549,2.412,1550,5.431,1551,5.431,1552,5.431,1553,4.746,1554,4.544,1555,3.05,1556,3.05,1557,3.05,1558,3.05,1559,3.05,1560,3.05,1561,3.05,1562,3.05,1563,3.05,1564,4.544,1565,3.05,1566,3.05,1567,6.435,1568,3.05,1569,3.05,1570,3.05,1571,3.05,1572,3.05,1573,3.05,1574,3.05,1575,3.05,1576,2.665,1577,2.665,1578,3.05,1579,5.431]],["title/entities/UserActivity.html",[359,1.618,1580,2.795]],["body/entities/UserActivity.html",[0,0.225,3,0.106,4,0.106,5,0.083,7,0.261,8,1.292,11,1.451,12,0.525,13,0.012,14,0.847,15,1.577,16,1.454,17,0.7,19,2.094,23,0.19,28,1.783,31,0.539,32,1.179,49,0.167,73,3.05,74,2.551,75,0.008,76,0.008,162,1.829,207,1.223,269,2.542,339,1.219,359,2.048,363,3.455,365,3.455,370,2.585,371,3.455,373,2.103,377,3.455,381,3.322,384,4.117,385,3.322,387,2.103,389,2.103,396,2.217,528,3.326,534,3.527,548,1.557,626,1.911,627,4.105,634,4.464,644,3.215,645,4.551,646,4.551,647,4.551,648,4.551,660,3.138,678,2.499,679,3.795,682,2.681,685,2.91,727,3.876,774,2.764,1062,2.499,1066,2.91,1141,2.91,1142,2.91,1580,3.537,1581,2.91,1582,5.396,1583,4.78,1584,3.68,1585,3.68,1586,3.68,1587,3.68,1588,3.68,1589,3.68,1590,3.68,1591,3.68,1592,3.68,1593,3.215,1594,3.215,1595,3.215,1596,3.68,1597,3.68]],["title/modules/UserActivityModule.html",[84,1.319,103,2.352]],["body/modules/UserActivityModule.html",[0,0.319,3,0.151,4,0.151,5,0.118,11,0.972,13,0.012,23,0.226,25,1.037,49,0.168,75,0.009,76,0.009,84,2.311,86,2.297,87,2.297,88,2.488,89,2.488,90,2.297,91,3.435,92,3.435,103,4.721,104,3.961,105,3.137,106,2.389,107,2.488,109,3.273,124,2.842,125,2.054,131,2.713,180,3.332,727,2.596,800,4.809,832,3.806,1580,3.548,1598,4.565,1599,4.565,1600,4.565,1601,5.224,1602,5.224,1603,4.131,1604,5.224]],["title/classes/UserActivitySave.html",[0,0.251,1605,2.999]],["body/classes/UserActivitySave.html",[0,0.283,2,0.781,3,0.134,4,0.134,5,0.105,7,0.33,8,1.513,11,1.464,12,0.519,13,0.012,15,1.583,16,1.59,17,0.703,19,2.245,23,0.209,28,2.088,31,0.68,32,1.486,49,0.149,75,0.009,76,0.009,493,1.824,527,3.667,534,3.679,548,1.963,627,4.629,727,3.912,774,3.117,1582,5.627,1583,5.389,1603,3.667,1605,4.445,1606,6.879,1607,6.225,1608,4.053,1609,4.638,1610,4.638,1611,4.638,1612,4.638,1613,4.638,1614,4.638]],["title/injectables/UserActivityService.html",[219,1.021,800,2.352]],["body/injectables/UserActivityService.html",[0,0.14,3,0.066,4,0.066,5,0.052,7,0.163,11,1.485,12,0.503,13,0.013,14,0.92,17,0.614,19,2.195,23,0.189,25,0.455,30,2.879,32,0.735,49,0.074,54,1.132,56,2.053,58,2.022,59,1.435,64,1.458,65,1.364,75,0.005,76,0.005,80,1.474,125,0.902,131,3.592,200,0.934,203,1.337,206,1.727,207,1.255,211,1.624,212,1.738,219,0.905,220,0.936,228,3.006,235,1.093,253,1.672,260,1.813,329,3.119,338,1.383,339,0.76,355,2.472,396,3.404,439,3.006,453,3.119,482,2.5,515,1.383,519,1.464,534,1.738,548,0.971,588,1.814,592,1.814,626,1.192,627,4.793,660,2.737,727,3.436,774,2.078,800,2.086,824,2.478,881,1.814,892,4.524,938,1.814,1062,1.558,1267,2.005,1363,2.005,1427,1.814,1580,3.085,1582,4.772,1583,5.468,1603,1.814,1605,2.659,1607,3.592,1615,2.005,1616,3.649,1617,4.543,1618,3.649,1619,3.649,1620,3.649,1621,3.649,1622,3.649,1623,3.649,1624,2.295,1625,2.295,1626,3.649,1627,3.649,1628,2.295,1629,2.295,1630,2.295,1631,2.295,1632,2.295,1633,3.649,1634,2.295,1635,3.649,1636,2.295,1637,2.295,1638,2.295,1639,3.649,1640,2.295,1641,2.295,1642,2.295,1643,2.295,1644,2.295,1645,2.295,1646,4.543,1647,3.649,1648,3.649,1649,2.005,1650,2.295,1651,3.649,1652,3.649,1653,2.295,1654,3.649,1655,4.543,1656,2.295,1657,2.295,1658,2.295,1659,2.295,1660,2.295,1661,2.295,1662,2.295,1663,2.295,1664,2.295,1665,3.189,1666,2.295,1667,3.189,1668,3.189,1669,4.543,1670,3.649,1671,3.649,1672,2.295,1673,2.295,1674,2.295,1675,2.295,1676,2.295,1677,2.295,1678,2.295,1679,2.295,1680,2.295,1681,2.295,1682,2.295,1683,3.649,1684,6.31,1685,6.31,1686,6.31,1687,5.651,1688,5.177,1689,5.177,1690,2.295,1691,2.295,1692,2.295,1693,2.295,1694,2.295,1695,2.295]],["title/classes/UserResponse.html",[0,0.251,1415,2.795]],["body/classes/UserResponse.html",[0,0.377,2,1.04,3,0.179,4,0.179,5,0.139,11,1.149,13,0.012,23,0.224,28,2.498,31,0.906,49,0.199,75,0.011,76,0.011,493,2.429,712,3.721,713,4.194,714,2.942,1411,3.939,1415,4.954,1696,5.397,1697,6.176]],["title/modules/UsersModule.html",[84,1.319,104,2.045]],["body/modules/UsersModule.html",[0,0.306,3,0.145,4,0.145,5,0.113,11,0.934,13,0.012,23,0.232,25,0.997,49,0.161,75,0.009,76,0.009,84,2.269,86,2.208,87,2.208,88,2.392,89,2.392,90,2.208,91,3.373,92,3.373,98,4.753,104,4.135,105,3.059,106,2.296,107,2.392,109,3.191,124,2.732,125,1.974,199,4.387,228,3.986,1077,4.387,1410,3.97,1411,3.202,1419,4.361,1471,5.032,1698,4.387,1699,4.387,1700,5.021,1701,4.387,1702,5.021,1703,5.021,1704,4.387]],["title/classes/UsersResolver.html",[0,0.251,1419,2.795]],["body/classes/UsersResolver.html",[0,0.25,2,0.447,3,0.077,4,0.077,5,0.06,7,0.189,11,1.482,12,0.485,13,0.013,14,1.085,15,1.448,16,1.078,17,0.656,23,0.22,24,1.446,25,0.528,26,2.886,27,3.628,28,1.402,29,2.126,30,2.466,31,0.39,35,3.01,37,1.446,40,3.008,43,1.695,44,1.266,46,1.446,49,0.132,53,1.321,54,0.824,56,1.406,58,1.797,64,1.989,65,0.798,67,2.717,75,0.006,76,0.006,77,4.082,80,1.576,158,1.215,200,1.048,203,0.974,206,1.846,207,1.455,211,1.752,214,2.611,228,3.048,235,1.95,236,1.61,269,1.5,315,1.519,317,1.601,319,1.601,326,2.78,355,1.446,390,3.052,421,2.126,426,2.481,427,2.788,429,1.266,430,1.601,439,1.266,593,3.856,602,1.695,686,1.601,743,3.391,761,1.805,762,1.805,768,1.805,769,1.805,774,2.284,776,2.78,777,2.101,778,1.805,779,1.805,780,1.519,791,2.78,851,2.611,963,2.322,1397,4.346,1401,4.082,1407,3.638,1408,2.101,1410,2.101,1411,1.695,1412,4.505,1413,2.322,1414,2.101,1415,2.78,1416,2.322,1417,3.237,1418,2.322,1419,2.78,1420,2.322,1421,2.322,1422,2.322,1423,2.322,1424,2.322,1425,2.322,1426,2.322,1427,2.101,1428,2.322,1429,2.322,1430,4.363,1431,2.322,1432,3.577,1433,2.322,1434,2.322,1435,3.948,1436,2.322,1437,2.322,1438,4.363,1439,2.322,1440,2.322,1705,3.577,1706,4.094,1707,4.094,1708,2.658,1709,2.322,1710,5.61,1711,2.658,1712,2.658,1713,2.658,1714,2.658,1715,2.658,1716,2.658,1717,2.658,1718,2.658,1719,2.658,1720,2.658,1721,2.658,1722,2.658,1723,2.658,1724,2.658,1725,2.658,1726,2.658,1727,2.658,1728,2.658]],["title/injectables/UsersService.html",[219,1.021,228,1.96]],["body/injectables/UsersService.html",[0,0.144,3,0.068,4,0.068,5,0.053,7,0.168,11,1.383,12,0.479,13,0.013,14,1.294,16,1.012,17,0.648,19,1.773,23,0.209,25,0.47,40,2.793,43,1.509,49,0.076,54,1.633,56,2.267,58,2.32,59,2.255,64,1.864,65,2.233,74,0.838,75,0.005,76,0.005,77,3.658,80,1.556,81,3.847,117,1.127,118,2.617,125,0.93,158,1.082,200,0.957,203,1.37,206,1.822,207,1.324,211,1.731,212,3.041,219,0.927,220,0.965,228,1.781,230,3.173,235,1.127,236,2.398,239,3.267,245,1.942,251,2.793,254,2.067,255,2.067,256,2.067,257,1.871,260,2.617,263,2.866,264,2.067,269,2.102,285,3.267,286,2.067,298,2.137,317,1.425,319,1.425,325,2.034,326,2.539,327,2.384,329,3.173,338,1.425,339,0.783,370,2.255,421,2.735,426,2.303,427,2.617,593,3.456,602,1.509,613,1.724,791,3.148,793,3.267,808,1.724,879,2.724,881,1.871,996,4.05,1002,3.847,1049,2.067,1103,2.067,1272,2.067,1401,3.359,1411,1.509,1412,4.222,1414,1.871,1417,1.871,1435,2.956,1471,4.073,1516,2.067,1553,5.328,1649,2.067,1667,2.067,1704,2.067,1705,3.267,1709,3.267,1729,2.067,1730,3.738,1731,3.738,1732,2.366,1733,2.366,1734,2.366,1735,3.738,1736,2.366,1737,2.366,1738,3.738,1739,2.366,1740,3.738,1741,3.738,1742,2.366,1743,3.738,1744,2.366,1745,3.738,1746,2.366,1747,2.366,1748,2.366,1749,2.366,1750,2.366,1751,3.738,1752,2.366,1753,2.366,1754,2.366,1755,2.366,1756,2.366,1757,2.366,1758,2.366,1759,2.366,1760,2.366,1761,2.366,1762,3.738,1763,3.738,1764,2.366,1765,2.366,1766,2.366,1767,4.635,1768,2.366,1769,2.366,1770,2.366,1771,2.366,1772,2.366,1773,2.366,1774,3.738,1775,2.366,1776,2.366,1777,3.738,1778,3.738,1779,2.366,1780,2.366,1781,2.366,1782,2.366,1783,2.366,1784,2.366]],["title/coverage.html",[1785,4.452]],["body/coverage.html",[0,0.513,1,1.435,5,0.051,6,3.267,11,0.834,12,0.151,13,0.012,33,1.224,35,1.118,38,1.435,41,1.435,44,1.072,47,1.435,50,1.528,52,1.435,59,0.885,75,0.005,76,0.005,77,1.435,78,1.966,79,3.477,90,0.989,120,2.291,131,1.168,158,1.029,177,1.528,178,1.528,219,1.845,221,1.966,228,1.072,248,1.779,249,1.779,293,1.435,296,1.639,298,2.053,301,1.966,308,1.435,313,1.528,315,1.286,316,1.435,324,1.966,359,2.557,360,3.139,390,1.224,391,4.252,437,5.213,439,4.112,451,1.779,473,1.966,474,2.84,480,1.779,481,3.594,482,1.813,483,1.966,489,2.053,495,1.528,496,2.84,497,1.966,513,1.435,514,2.84,520,1.355,531,1.955,545,1.779,546,1.966,550,1.779,551,1.966,553,1.711,556,1.779,557,2.84,593,1.355,594,1.966,615,1.779,616,1.966,619,2.84,654,1.955,692,3.139,693,3.139,710,1.639,711,1.966,712,1.355,720,1.286,724,1.639,727,2.544,730,1.966,753,1.528,780,1.286,789,1.966,800,1.286,801,1.435,950,2.84,962,1.966,981,1.966,988,1.966,998,1.966,1002,1.355,1028,1.966,1078,1.966,1086,1.286,1132,1.966,1133,1.966,1137,2.84,1152,1.779,1153,3.569,1154,1.639,1155,1.966,1156,1.435,1158,1.966,1161,1.639,1162,2.84,1164,1.528,1165,2.84,1169,1.639,1170,2.84,1180,1.639,1183,1.966,1214,1.966,1277,1.966,1289,1.966,1291,3.139,1304,1.639,1305,3.267,1308,1.528,1309,1.639,1315,1.435,1317,1.639,1321,1.966,1342,1.966,1394,1.966,1395,2.84,1397,1.528,1398,2.84,1399,1.966,1401,1.435,1407,1.639,1408,2.84,1412,1.435,1415,1.528,1419,1.528,1441,3.139,1449,1.435,1452,1.639,1456,1.966,1462,1.966,1471,1.435,1472,1.966,1525,1.966,1528,1.966,1531,1.966,1549,2.84,1580,2.439,1581,2.84,1605,1.639,1606,1.966,1607,1.779,1608,1.966,1615,1.966,1696,1.966,1729,1.966,1785,1.779,1786,1.966,1787,2.25,1788,2.25,1789,7.44,1790,1.966,1791,7.353,1792,1.966,1793,8.194,1794,5.596,1795,4.484,1796,1.966,1797,6.703,1798,4.484,1799,5.12,1800,4.484,1801,5.12,1802,3.592,1803,2.25,1804,2.25,1805,4.484,1806,1.966,1807,1.966,1808,1.966,1809,1.966,1810,1.966,1811,1.966,1812,5.12,1813,2.84,1814,1.966,1815,2.25,1816,2.25,1817,3.139,1818,1.966,1819,1.966,1820,4.89,1821,1.966,1822,1.966,1823,1.966,1824,1.966,1825,1.966,1826,2.25,1827,2.25]],["title/dependencies.html",[87,2.178,1828,3.43]],["body/dependencies.html",[0,0.378,12,0.417,13,0.013,25,0.944,31,0.697,75,0.009,76,0.009,87,2.091,117,2.953,118,2.363,123,3.76,125,1.87,182,3.76,184,3.033,188,3.229,191,3.465,257,3.76,339,2.053,429,3.612,430,3.736,492,3.033,542,3.76,610,3.033,972,5.455,993,4.155,1009,3.76,1668,4.155,1829,4.755,1830,4.755,1831,4.755,1832,6.2,1833,4.755,1834,6.2,1835,4.755,1836,4.755,1837,4.755,1838,4.755,1839,4.755,1840,4.755,1841,6.2,1842,4.755,1843,4.755,1844,4.755,1845,4.755,1846,4.755,1847,4.755,1848,4.755,1849,4.755,1850,4.755,1851,4.755,1852,4.755,1853,4.755,1854,4.755,1855,4.755,1856,4.155,1857,4.755,1858,4.755,1859,4.755,1860,4.155,1861,4.755,1862,4.755,1863,4.755,1864,4.755,1865,4.755,1866,4.755,1867,4.755,1868,4.755,1869,4.755,1870,4.755,1871,4.755,1872,4.755,1873,4.755,1874,4.755,1875,4.755,1876,4.755,1877,4.755,1878,4.755,1879,4.755,1880,4.755,1881,4.755]],["title/miscellaneous/enumerations.html",[1882,1.961,1883,4.328]],["body/miscellaneous/enumerations.html",[7,0.429,13,0.01,75,0.01,76,0.01,396,3.634,534,3.426,560,4.395,619,4.77,626,3.133,683,5.271,684,5.271,727,2.997,1062,4.885,1066,4.77,1137,4.77,1145,5.688,1149,5.271,1150,5.271,1535,5.688,1549,4.77,1576,5.271,1577,5.271,1581,4.77,1582,5.241,1593,5.271,1594,5.271,1595,5.271,1882,3.448,1883,5.271,1884,6.032,1885,6.032,1886,6.032,1887,6.032]],["title/miscellaneous/functions.html",[1882,1.961,1888,4.328]],["body/miscellaneous/functions.html",[7,0.384,12,0.554,13,0.012,26,3.651,75,0.01,76,0.01,80,1.723,90,3.22,206,2.019,207,1.466,211,1.668,390,4.483,391,3.668,432,4.271,438,4.72,454,4.72,458,4.72,464,4.72,712,4.052,1806,4.72,1807,5.876,1808,5.876,1809,5.876,1810,5.876,1813,4.271,1882,3.087,1888,4.72,1889,5.401,1890,6.06,1891,4.72,1892,5.401]],["title/index.html",[7,0.244,1893,3.43,1894,3.43]],["body/index.html",[5,0.113,13,0.012,75,0.009,76,0.009,146,4.398,151,3.98,158,2.302,191,3.667,339,1.667,429,2.397,485,3.21,584,4.398,856,4.398,938,3.98,1020,4.398,1785,3.98,1786,4.398,1856,4.398,1860,4.398,1895,5.033,1896,5.033,1897,5.033,1898,5.033,1899,5.033,1900,6.432,1901,5.033,1902,5.033,1903,5.033,1904,5.033,1905,5.033,1906,5.033,1907,5.033,1908,5.033,1909,5.033,1910,5.033,1911,5.033,1912,5.033,1913,5.033,1914,5.033,1915,5.033,1916,5.033,1917,7.47,1918,5.033,1919,5.033,1920,5.033,1921,5.033,1922,5.033,1923,5.033,1924,5.033,1925,5.033,1926,5.033,1927,5.033,1928,6.432,1929,8.126,1930,5.033,1931,5.033,1932,5.033,1933,5.033,1934,6.432,1935,5.033,1936,5.033,1937,5.033,1938,5.033,1939,6.432,1940,6.432,1941,5.033,1942,5.033,1943,5.033,1944,5.033,1945,5.033,1946,5.033,1947,5.033,1948,5.033,1949,5.033]],["title/classes/isValid.html",[0,0.251,50,2.795]],["body/classes/isValid.html",[0,0.399,1,4.466,2,0.718,3,0.123,4,0.123,5,0.096,6,3.107,7,0.303,8,1.431,9,3.107,10,3.917,11,1.507,12,0.287,13,0.013,14,0.939,15,0.874,16,1.481,17,0.388,19,1.24,23,0.23,24,2.32,25,0.846,26,2.031,27,3.556,28,2.238,29,2.996,30,2.536,31,0.625,32,1.366,33,3.556,34,2.896,35,2.866,36,3.372,37,2.32,38,4.169,39,3.372,40,2.569,41,3.679,42,3.372,43,2.72,44,2.031,45,3.372,46,3.138,47,2.72,48,3.372,49,0.21,50,5.324,51,3.475,52,2.72,53,2.119,54,1.323,55,3.372,56,1.84,57,3.372,58,1.366,59,1.677,60,3.372,61,3.372,62,3.107,63,3.372,64,1.972,65,1.732,66,3.372,67,3.138,68,3.372,69,3.372,70,3.372,71,3.372,72,3.372,73,1.875,74,1.51,75,0.008,76,0.008,1950,4.264]],["title/modules.html",[86,2.475]],["body/modules.html",[13,0.01,75,0.01,76,0.01,85,4.141,86,2.499,95,3.86,96,3.86,97,3.424,98,3.424,99,3.625,100,3.424,101,3.86,102,3.86,103,3.249,104,2.824,1951,8.471,1952,8.471,1953,8.471,1954,8.471]],["title/overview.html",[1955,4.92]],["body/overview.html",[2,0.592,13,0.012,33,3.208,75,0.007,76,0.007,84,1.127,85,6.068,86,1.546,87,1.546,88,1.675,89,1.675,90,1.546,91,1.675,92,1.675,93,3.073,94,3.073,95,5.309,96,4.963,97,4.71,98,4.504,99,4.926,100,4.759,101,5.411,102,4.63,103,4.469,104,4.039,105,2.402,106,1.608,107,1.675,162,1.748,174,3.073,176,3.073,177,4.004,178,4.004,220,1.434,228,3.481,290,3.073,291,3.073,293,3.76,596,2.781,716,3.073,717,3.073,718,3.073,720,4.177,800,4.177,801,4.661,999,3.073,1000,3.073,1001,3.073,1002,4.403,1070,3.073,1071,3.073,1072,3.073,1086,4.177,1173,3.073,1174,3.073,1175,3.073,1312,3.073,1313,3.073,1315,3.76,1447,3.073,1448,3.073,1449,3.76,1471,3.76,1598,3.073,1599,3.073,1600,3.073,1698,3.073,1699,3.073,1701,3.073,1955,3.073,1956,3.517,1957,3.517,1958,3.517]],["title/miscellaneous/typealiases.html",[1882,1.961,1959,4.953]],["body/miscellaneous/typealiases.html",[7,0.441,12,0.54,13,0.012,75,0.011,76,0.011,391,4.219,432,5.788,665,5.334,906,5.429,908,5.429,966,6.801,1882,3.551,1890,4.913,1960,6.213,1961,6.213,1962,6.213,1963,6.213]],["title/miscellaneous/variables.html",[1882,1.961,1964,4.328]],["body/miscellaneous/variables.html",[7,0.247,12,0.431,13,0.013,19,1.456,35,2.488,51,2.098,58,2.054,59,1.369,64,1.805,73,1.531,74,1.233,75,0.007,76,0.007,151,2.753,160,3.042,161,3.042,162,1.73,163,3.042,197,3.042,198,4.375,212,1.658,248,3.959,249,3.959,315,1.99,370,2.67,391,2.364,406,4.375,411,4.375,449,3.042,450,2.753,451,3.959,452,3.042,453,4.091,481,2.098,493,3.152,515,3.532,519,4.088,520,3.016,557,3.959,560,2.537,561,3.042,562,3.042,563,3.042,564,3.042,565,3.042,566,3.042,567,3.042,568,3.042,569,3.042,570,3.042,571,3.042,572,3.042,573,3.042,574,3.042,575,3.042,576,4.375,577,3.042,578,3.042,579,3.042,580,3.042,581,3.042,582,3.042,583,3.042,660,2.098,931,2.753,953,2.364,955,2.221,959,2.753,960,2.753,1299,3.648,1300,4.271,1490,7.004,1665,3.042,1790,4.375,1792,4.375,1796,4.375,1811,4.375,1813,2.753,1814,4.375,1817,3.042,1818,3.042,1819,4.375,1820,3.042,1821,4.375,1822,4.375,1823,4.375,1824,4.375,1825,4.375,1882,1.99,1890,3.959,1891,3.042,1964,3.042,1965,3.481,1966,3.481,1967,6.791,1968,5.006,1969,3.481,1970,5.862,1971,3.481,1972,3.481,1973,3.481,1974,3.481,1975,3.481,1976,3.481,1977,3.481,1978,3.481,1979,3.481,1980,3.481,1981,3.481,1982,3.481,1983,3.481,1984,3.481,1985,5.006,1986,3.481,1987,5.006,1988,3.481,1989,3.481,1990,3.481,1991,5.862,1992,3.481,1993,3.481,1994,3.481,1995,3.481,1996,3.481,1997,3.481,1998,3.481,1999,3.481,2000,3.481,2001,3.481,2002,3.481,2003,3.481,2004,3.481]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/isValid.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":439,"title":{},"body":{"classes/ConnectionArgs.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["0.02",{"_index":1660,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["0.03",{"_index":1648,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["0.05",{"_index":1653,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["0.1.13",{"_index":1875,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1854,"title":{},"body":{"dependencies.html":{}}}],["0.2.41",{"_index":1880,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":1862,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1853,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1870,"title":{},"body":{"dependencies.html":{}}}],["0.44.1",{"_index":1830,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1847,"title":{},"body":{"dependencies.html":{}}}],["0.8.0",{"_index":1859,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1793,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1799,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1801,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1816,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1802,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1804,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1815,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1789,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":1803,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1797,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1812,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1794,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1798,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1805,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1795,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1800,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":453,"title":{"injectables/QueryResolver-1.html":{}},"body":{"classes/ConnectionArgs.html":{},"injectables/EventsService.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UserActivityService.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1872,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":1838,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":1842,"title":{},"body":{"dependencies.html":{}}}],["1.1.1",{"_index":1879,"title":{},"body":{"dependencies.html":{}}}],["1.10.5",{"_index":1855,"title":{},"body":{"dependencies.html":{}}}],["1.6.0",{"_index":1831,"title":{},"body":{"dependencies.html":{}}}],["1.6.1",{"_index":1881,"title":{},"body":{"dependencies.html":{}}}],["1.7.2",{"_index":1845,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":450,"title":{},"body":{"classes/ConnectionArgs.html":{},"entities/Event.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":881,"title":{},"body":{"injectables/EventsService.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{}}}],["11",{"_index":1956,"title":{},"body":{"overview.html":{}}}],["15",{"_index":1958,"title":{},"body":{"overview.html":{}}}],["15.5.0",{"_index":1858,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":660,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{},"entities/UserActivity.html":{},"injectables/UserActivityService.html":{},"miscellaneous/variables.html":{}}}],["2.2.5",{"_index":1866,"title":{},"body":{"dependencies.html":{}}}],["2.22.2",{"_index":1850,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":613,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{},"injectables/UsersService.html":{}}}],["20)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":599,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{}}}],["24",{"_index":1522,"title":{},"body":{"injectables/TokenService.html":{}}}],["256",{"_index":1503,"title":{},"body":{"injectables/TokenService.html":{}}}],["3",{"_index":1652,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["3.0.2",{"_index":1877,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":1683,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["3306",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["4",{"_index":1988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1871,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":1864,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1273,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["5.0.1",{"_index":1851,"title":{},"body":{"dependencies.html":{}}}],["5.5.3",{"_index":1857,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":596,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/UpdateUserInput.html":{},"overview.html":{}}}],["59",{"_index":944,"title":{},"body":{"injectables/EventsService.html":{}}}],["6",{"_index":648,"title":{},"body":{"entities/Event.html":{},"entities/UserActivity.html":{}}}],["6.5.0",{"_index":1869,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1667,"title":{},"body":{"injectables/UserActivityService.html":{},"injectables/UsersService.html":{}}}],["6371",{"_index":895,"title":{},"body":{"injectables/EventsService.html":{}}}],["7",{"_index":1668,"title":{},"body":{"injectables/UserActivityService.html":{},"dependencies.html":{}}}],["7.10.3",{"_index":1835,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":1692,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["8",{"_index":1957,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":1832,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1839,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1843,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":1867,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":1861,"title":{},"body":{"dependencies.html":{}}}],["8.2.3",{"_index":1834,"title":{},"body":{"dependencies.html":{}}}],["999",{"_index":945,"title":{},"body":{"injectables/EventsService.html":{}}}],["__dirname",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["_data",{"_index":1979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":1,"title":{"classes/AccessToken.html":{}},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"classes/isValid.html":{}}}],["accesstokenexpires",{"_index":9,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/isValid.html":{}}}],["acos",{"_index":896,"title":{},"body":{"injectables/EventsService.html":{}}}],["action",{"_index":1646,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["actiontype",{"_index":1582,"title":{},"body":{"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"miscellaneous/enumerations.html":{}}}],["actiontype.category",{"_index":1656,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["actiontype.distance",{"_index":1690,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["actiontype.duration",{"_index":1658,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["actiontype.interested",{"_index":1647,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["actiontype.rate",{"_index":1693,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["actiontype.takepart",{"_index":1651,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["actiontype.visit",{"_index":1694,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activated",{"_index":1771,"title":{},"body":{"injectables/UsersService.html":{}}}],["activateuser",{"_index":1705,"title":{},"body":{"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["activateuser(@args('activateuser",{"_index":1422,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["activateuser(activateuserinput",{"_index":1709,"title":{},"body":{"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["activateuserinput",{"_index":77,"title":{"classes/ActivateUserInput.html":{}},"body":{"classes/ActivateUserInput.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["activationdate",{"_index":1520,"title":{},"body":{"injectables/TokenService.html":{}}}],["activationdate.sethours(activationdate.gethours",{"_index":1521,"title":{},"body":{"injectables/TokenService.html":{}}}],["activity",{"_index":1607,"title":{},"body":{"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"coverage.html":{}}}],["activity.actiontype",{"_index":1687,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.count",{"_index":1684,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.eventtype",{"_index":1689,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.module",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{}}}],["activity.module.ts",{"_index":1602,"title":{},"body":{"modules/UserActivityModule.html":{}}}],["activity.score",{"_index":1685,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.service",{"_index":832,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"modules/UserActivityModule.html":{}}}],["activity.service.ts",{"_index":1615,"title":{},"body":{"injectables/UserActivityService.html":{},"coverage.html":{}}}],["activity.service.ts:10",{"_index":1625,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.service.ts:106",{"_index":1642,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.service.ts:114",{"_index":1638,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.service.ts:118",{"_index":1632,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.service.ts:17",{"_index":1640,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.service.ts:41",{"_index":1628,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.service.ts:52",{"_index":1630,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.service.ts:91",{"_index":1634,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.service.ts:97",{"_index":1636,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity.weight",{"_index":1686,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["activity/dto/user",{"_index":1606,"title":{},"body":{"classes/UserActivitySave.html":{},"coverage.html":{}}}],["activity/entities/useractivity.entity.ts",{"_index":1581,"title":{},"body":{"entities/UserActivity.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["activity/entities/useractivity.entity.ts:38",{"_index":1588,"title":{},"body":{"entities/UserActivity.html":{}}}],["activity/entities/useractivity.entity.ts:43",{"_index":1591,"title":{},"body":{"entities/UserActivity.html":{}}}],["activity/entities/useractivity.entity.ts:47",{"_index":1584,"title":{},"body":{"entities/UserActivity.html":{}}}],["activity/entities/useractivity.entity.ts:51",{"_index":1587,"title":{},"body":{"entities/UserActivity.html":{}}}],["activity/entities/useractivity.entity.ts:55",{"_index":1585,"title":{},"body":{"entities/UserActivity.html":{}}}],["activity/entities/useractivity.entity.ts:59",{"_index":1589,"title":{},"body":{"entities/UserActivity.html":{}}}],["activity/entities/useractivity.entity.ts:63",{"_index":1592,"title":{},"body":{"entities/UserActivity.html":{}}}],["activity/entities/useractivity.entity.ts:66",{"_index":1586,"title":{},"body":{"entities/UserActivity.html":{}}}],["activity/entities/useractivity.entity.ts:69",{"_index":1590,"title":{},"body":{"entities/UserActivity.html":{}}}],["activity/user",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"modules/RatingsModule.html":{},"injectables/RatingsService.html":{},"modules/UserActivityModule.html":{},"injectables/UserActivityService.html":{},"coverage.html":{}}}],["adapter",{"_index":1024,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":1990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add(getrandomnumberbetween(minhours",{"_index":1994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addnewjob",{"_index":1079,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["addnewjob(event",{"_index":1088,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["addratetoevent",{"_index":1343,"title":{},"body":{"injectables/RatingsService.html":{}}}],["addratetoevent(user",{"_index":1348,"title":{},"body":{"injectables/RatingsService.html":{}}}],["address",{"_index":361,"title":{},"body":{"entities/Company.html":{},"classes/CreateCompanyInput.html":{},"injectables/EventsService.html":{}}}],["address.entity",{"_index":491,"title":{},"body":{"classes/CreateEventAddress.html":{},"entities/Event.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["address.entity.ts",{"_index":693,"title":{},"body":{"entities/EventAddress.html":{},"coverage.html":{}}}],["address.entity.ts:20",{"_index":703,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:26",{"_index":702,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:30",{"_index":704,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:34",{"_index":695,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:38",{"_index":696,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:42",{"_index":706,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:46",{"_index":697,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:50",{"_index":694,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:54",{"_index":699,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:58",{"_index":705,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:61",{"_index":698,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.entity.ts:64",{"_index":707,"title":{},"body":{"entities/EventAddress.html":{}}}],["address.input",{"_index":538,"title":{},"body":{"classes/CreateEventInput.html":{},"injectables/EventsService.html":{}}}],["address.input.ts",{"_index":497,"title":{},"body":{"classes/CreateEventAddressInput.html":{},"coverage.html":{}}}],["address.input.ts:12",{"_index":507,"title":{},"body":{"classes/CreateEventAddressInput.html":{}}}],["address.input.ts:15",{"_index":512,"title":{},"body":{"classes/CreateEventAddressInput.html":{}}}],["address.input.ts:18",{"_index":508,"title":{},"body":{"classes/CreateEventAddressInput.html":{}}}],["address.input.ts:21",{"_index":505,"title":{},"body":{"classes/CreateEventAddressInput.html":{}}}],["address.input.ts:24",{"_index":509,"title":{},"body":{"classes/CreateEventAddressInput.html":{}}}],["address.input.ts:27",{"_index":511,"title":{},"body":{"classes/CreateEventAddressInput.html":{}}}],["address.input.ts:6",{"_index":510,"title":{},"body":{"classes/CreateEventAddressInput.html":{}}}],["address.input.ts:9",{"_index":506,"title":{},"body":{"classes/CreateEventAddressInput.html":{}}}],["address.seed.ts",{"_index":483,"title":{},"body":{"classes/CreateEventAddress.html":{},"coverage.html":{}}}],["address.seed.ts:5",{"_index":488,"title":{},"body":{"classes/CreateEventAddress.html":{}}}],["addusertoevent",{"_index":1215,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["addusertoevent(user",{"_index":1222,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["advanced",{"_index":1973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aes",{"_index":1502,"title":{},"body":{"injectables/TokenService.html":{}}}],["aliases",{"_index":1960,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":1772,"title":{},"body":{"injectables/UsersService.html":{}}}],["andwhere(`user_activity.actiontype",{"_index":1672,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["andwhere(`user_activity.eventtype",{"_index":1673,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["andwhere(`user_activity.score",{"_index":1674,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["andwhere(`user_activity.weight",{"_index":1675,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["api",{"_index":1908,"title":{},"body":{"index.html":{}}}],["apollo",{"_index":1848,"title":{},"body":{"dependencies.html":{}}}],["apollo/gateway",{"_index":1829,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":1900,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":85,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":26,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/ConnectionArgs.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"classes/UsersResolver.html":{},"miscellaneous/functions.html":{},"classes/isValid.html":{}}}],["args('confirmresetpassword",{"_index":1439,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["args('createeventinput",{"_index":763,"title":{},"body":{"classes/EventsResolver.html":{}}}],["args('eventid",{"_index":1206,"title":{},"body":{"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{}}}],["args('id",{"_index":765,"title":{},"body":{"classes/EventsResolver.html":{}}}],["args('participateinevent",{"_index":1202,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["args('query",{"_index":1209,"title":{},"body":{"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{}}}],["args('rateevent",{"_index":1335,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["args('refreshtoken",{"_index":69,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["args('resetpasswordinput",{"_index":1436,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["args('type",{"_index":1208,"title":{},"body":{"classes/ParticipantsResolver.html":{},"classes/TagsResolver.html":{}}}],["args('updateeventinput",{"_index":784,"title":{},"body":{"classes/EventsResolver.html":{}}}],["args('userid",{"_index":1207,"title":{},"body":{"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{}}}],["args.distance",{"_index":455,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["args.distanceparams",{"_index":770,"title":{},"body":{"classes/EventsResolver.html":{}}}],["args.latitude",{"_index":456,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["args.longitude",{"_index":457,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["args.orderfield",{"_index":459,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["args.orderparams",{"_index":769,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["args.ordersort",{"_index":461,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["args.pagingparams",{"_index":768,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["argstype",{"_index":431,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["arr",{"_index":2000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arr.length",{"_index":2003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arr[math.floor(math.random",{"_index":2002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":2001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arraylength",{"_index":778,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["asc",{"_index":462,"title":{},"body":{"classes/ConnectionArgs.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["async",{"_index":56,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["auth",{"_index":1016,"title":{},"body":{"modules/MailModule.html":{}}}],["auth.guard",{"_index":46,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}}}],["auth.guard.ts",{"_index":950,"title":{},"body":{"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:6",{"_index":954,"title":{},"body":{"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{}}}],["auth.resolver",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":34,"title":{},"body":{"classes/AccessToken.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/LocalStrategy.html":{},"classes/isValid.html":{}}}],["auth/auth.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/gql",{"_index":1413,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["authguard",{"_index":957,"title":{},"body":{"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":958,"title":{},"body":{"classes/GqlAuthGuard.html":{}}}],["authguard('local",{"_index":983,"title":{},"body":{"classes/LocalAuthGuard.html":{}}}],["authmodule",{"_index":95,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorisation",{"_index":1906,"title":{},"body":{"index.html":{}}}],["authresolver",{"_index":52,"title":{"classes/AuthResolver.html":{}},"body":{"classes/AccessToken.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{},"classes/isValid.html":{}}}],["authservice",{"_index":33,"title":{"injectables/AuthService.html":{}},"body":{"classes/AccessToken.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"classes/isValid.html":{},"overview.html":{}}}],["autoschemafile",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":65,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["backward",{"_index":435,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["backwards",{"_index":445,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["badrequestexception",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/TokenService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('company",{"_index":356,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["badrequestexception('invalid",{"_index":1773,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('token",{"_index":1512,"title":{},"body":{"injectables/TokenService.html":{}}}],["badrequestexception('user",{"_index":1770,"title":{},"body":{"injectables/UsersService.html":{}}}],["base64",{"_index":1510,"title":{},"body":{"injectables/TokenService.html":{}}}],["baseconfig",{"_index":1792,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":1903,"title":{},"body":{"index.html":{}}}],["bashinstallation",{"_index":1925,"title":{},"body":{"index.html":{}}}],["basketball",{"_index":578,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["before",{"_index":395,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["body",{"_index":1063,"title":{},"body":{"injectables/MailService.html":{}}}],["bodybuilding",{"_index":567,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":51,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"entities/Event.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"classes/isValid.html":{},"miscellaneous/variables.html":{}}}],["booleans",{"_index":1981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["booleans.length",{"_index":1983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["booleans[math.floor(math.random",{"_index":1982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["boxing",{"_index":577,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["break",{"_index":1285,"title":{},"body":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["browse",{"_index":1954,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1951,"title":{},"body":{"modules.html":{}}}],["canceled",{"_index":1149,"title":{},"body":{"entities/Participant.html":{},"miscellaneous/enumerations.html":{}}}],["capital",{"_index":604,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{}}}],["cascade",{"_index":687,"title":{},"body":{"entities/Event.html":{},"entities/EventAddress.html":{}}}],["cascade'})@joincolumn({name",{"_index":674,"title":{},"body":{"entities/Event.html":{},"entities/EventAddress.html":{}}}],["case",{"_index":468,"title":{},"body":{"classes/ConnectionArgs.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["cast(updatedat",{"_index":1270,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["catch",{"_index":930,"title":{},"body":{"injectables/EventsService.html":{},"injectables/TokenService.html":{}}}],["category",{"_index":1593,"title":{},"body":{"entities/UserActivity.html":{},"miscellaneous/enumerations.html":{}}}],["cbc",{"_index":1504,"title":{},"body":{"injectables/TokenService.html":{}}}],["checkdatescore",{"_index":1616,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["checkdatescore(event",{"_index":1627,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["checkpagingsanity",{"_index":1807,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checkpagingsanity(args",{"_index":438,"title":{},"body":{"classes/ConnectionArgs.html":{},"miscellaneous/functions.html":{}}}],["cipher",{"_index":1501,"title":{},"body":{"injectables/TokenService.html":{}}}],["cipher.final('base64",{"_index":1511,"title":{},"body":{"injectables/TokenService.html":{}}}],["cipher.update(datatoencrypt",{"_index":1508,"title":{},"body":{"injectables/TokenService.html":{}}}],["city",{"_index":362,"title":{},"body":{"entities/Company.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddressInput.html":{},"entities/EventAddress.html":{}}}],["class",{"_index":0,"title":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"classes/EventResponse.html":{},"classes/EventsResolver.html":{},"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"classes/LoginUserInput.html":{},"classes/PageData.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"classes/UserActivitySave.html":{},"classes/UserResponse.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/isValid.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"classes/EventResponse.html":{},"classes/EventsResolver.html":{},"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"classes/LoginUserInput.html":{},"classes/PageData.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"classes/UserActivitySave.html":{},"classes/UserResponse.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{},"overview.html":{}}}],["clientdate",{"_index":742,"title":{},"body":{"classes/EventsResolver.html":{},"injectables/EventsService.html":{}}}],["clientdateformatted",{"_index":882,"title":{},"body":{"injectables/EventsService.html":{}}}],["cluster_appmodule",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_companiesmodule",{"_index":290,"title":{},"body":{"modules/CompaniesModule.html":{},"overview.html":{}}}],["cluster_companiesmodule_imports",{"_index":292,"title":{},"body":{"modules/CompaniesModule.html":{}}}],["cluster_companiesmodule_providers",{"_index":291,"title":{},"body":{"modules/CompaniesModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":716,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_exports",{"_index":718,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_imports",{"_index":719,"title":{},"body":{"modules/EventsModule.html":{}}}],["cluster_eventsmodule_providers",{"_index":717,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":999,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":1000,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":1001,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule",{"_index":1070,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_exports",{"_index":1072,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_imports",{"_index":1073,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["cluster_notificationsmodule_providers",{"_index":1071,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_participantsmodule",{"_index":1173,"title":{},"body":{"modules/ParticipantsModule.html":{},"overview.html":{}}}],["cluster_participantsmodule_exports",{"_index":1175,"title":{},"body":{"modules/ParticipantsModule.html":{},"overview.html":{}}}],["cluster_participantsmodule_imports",{"_index":1176,"title":{},"body":{"modules/ParticipantsModule.html":{}}}],["cluster_participantsmodule_providers",{"_index":1174,"title":{},"body":{"modules/ParticipantsModule.html":{},"overview.html":{}}}],["cluster_ratingsmodule",{"_index":1312,"title":{},"body":{"modules/RatingsModule.html":{},"overview.html":{}}}],["cluster_ratingsmodule_imports",{"_index":1314,"title":{},"body":{"modules/RatingsModule.html":{}}}],["cluster_ratingsmodule_providers",{"_index":1313,"title":{},"body":{"modules/RatingsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1447,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1448,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_useractivitymodule",{"_index":1598,"title":{},"body":{"modules/UserActivityModule.html":{},"overview.html":{}}}],["cluster_useractivitymodule_exports",{"_index":1599,"title":{},"body":{"modules/UserActivityModule.html":{},"overview.html":{}}}],["cluster_useractivitymodule_imports",{"_index":1601,"title":{},"body":{"modules/UserActivityModule.html":{}}}],["cluster_useractivitymodule_providers",{"_index":1600,"title":{},"body":{"modules/UserActivityModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1698,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1701,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1700,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1699,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":384,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["column('json",{"_index":691,"title":{},"body":{"entities/Event.html":{}}}],["column('mediumtext",{"_index":688,"title":{},"body":{"entities/Event.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":1567,"title":{},"body":{"entities/User.html":{}}}],["commitlint",{"_index":1916,"title":{},"body":{"index.html":{}}}],["companies",{"_index":388,"title":{},"body":{"entities/Company.html":{}}}],["companies.resolver",{"_index":297,"title":{},"body":{"modules/CompaniesModule.html":{}}}],["companies.service",{"_index":295,"title":{},"body":{"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{}}}],["companies/companies.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["companiesmodule",{"_index":96,"title":{"modules/CompaniesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CompaniesModule.html":{},"modules.html":{},"overview.html":{}}}],["companiesresolver",{"_index":296,"title":{"classes/CompaniesResolver.html":{}},"body":{"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"coverage.html":{}}}],["companiesservice",{"_index":293,"title":{"injectables/CompaniesService.html":{}},"body":{"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"coverage.html":{},"overview.html":{}}}],["company",{"_index":298,"title":{"entities/Company.html":{}},"body":{"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["company.input",{"_index":318,"title":{},"body":{"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/UpdateCompanyInput.html":{}}}],["company.input.ts",{"_index":474,"title":{},"body":{"classes/CreateCompanyInput.html":{},"classes/UpdateCompanyInput.html":{},"coverage.html":{}}}],["company.input.ts:12",{"_index":479,"title":{},"body":{"classes/CreateCompanyInput.html":{}}}],["company.input.ts:15",{"_index":476,"title":{},"body":{"classes/CreateCompanyInput.html":{}}}],["company.input.ts:18",{"_index":478,"title":{},"body":{"classes/CreateCompanyInput.html":{}}}],["company.input.ts:6",{"_index":477,"title":{},"body":{"classes/CreateCompanyInput.html":{}}}],["company.input.ts:9",{"_index":475,"title":{},"body":{"classes/CreateCompanyInput.html":{}}}],["company.user",{"_index":1554,"title":{},"body":{"entities/User.html":{}}}],["companyrepository",{"_index":331,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["compare",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["compare(password",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["compodoc/compodoc",{"_index":1946,"title":{},"body":{"index.html":{}}}],["compose",{"_index":1918,"title":{},"body":{"index.html":{}}}],["config",{"_index":1012,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('mail_host",{"_index":1014,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('mail_password",{"_index":1018,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('mail_user",{"_index":1017,"title":{},"body":{"modules/MailModule.html":{}}}],["configmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":1004,"title":{},"body":{"modules/MailModule.html":{}}}],["confirmation",{"_index":1052,"title":{},"body":{"injectables/MailService.html":{}}}],["confirmpassword",{"_index":1402,"title":{},"body":{"classes/ResetPasswordTokenInput.html":{}}}],["confirmresetpassword",{"_index":1438,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["confirmresetpassword(resetpasswordtokeninput",{"_index":1712,"title":{},"body":{"classes/UsersResolver.html":{}}}],["connection",{"_index":558,"title":{},"body":{"classes/CreateTags.html":{}}}],["connectionargs",{"_index":390,"title":{"classes/ConnectionArgs.html":{}},"body":{"classes/ConnectionArgs.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["connectionarguments",{"_index":393,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["connectioncursor",{"_index":406,"title":{},"body":{"classes/ConnectionArgs.html":{},"miscellaneous/variables.html":{}}}],["connectionfromarrayslice",{"_index":762,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["connectionfromarrayslice(events",{"_index":777,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["connectionfromarrayslice(participants",{"_index":1212,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["connectionfromarrayslice(ratings",{"_index":1341,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["console",{"_index":1974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error(error",{"_index":932,"title":{},"body":{"injectables/EventsService.html":{}}}],["const",{"_index":58,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"classes/ConnectionArgs.html":{},"classes/CreateTags.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":203,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":204,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(companiesservice",{"_index":305,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["constructor(companyrepository",{"_index":328,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["constructor(eventsrepository",{"_index":798,"title":{},"body":{"injectables/EventsService.html":{}}}],["constructor(eventsservice",{"_index":737,"title":{},"body":{"classes/EventsResolver.html":{}}}],["constructor(mailerservice",{"_index":1034,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(participantrepository",{"_index":1219,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["constructor(participantservice",{"_index":1188,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["constructor(private",{"_index":53,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"injectables/JwtStrategy.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}}}],["constructor(ratingrepository",{"_index":1345,"title":{},"body":{"injectables/RatingsService.html":{}}}],["constructor(ratingsservice",{"_index":1325,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["constructor(schedulerregistry",{"_index":1083,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["constructor(tagsrepository",{"_index":1464,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(tagsservice",{"_index":1457,"title":{},"body":{"classes/TagsResolver.html":{}}}],["constructor(useractivityrepository",{"_index":1624,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["constructor(userservice",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersrepository",{"_index":1732,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":963,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UsersResolver.html":{}}}],["container",{"_index":1921,"title":{},"body":{"index.html":{}}}],["contains",{"_index":603,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{}}}],["context",{"_index":955,"title":{},"body":{"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"injectables/MailService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"miscellaneous/variables.html":{}}}],["context.getargs",{"_index":1286,"title":{},"body":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["context.gettype",{"_index":1282,"title":{},"body":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["context.switchtohttp().getrequest",{"_index":1284,"title":{},"body":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["copy.ts",{"_index":1155,"title":{},"body":{"classes/ParticipantByDateListResponse.html":{},"coverage.html":{}}}],["cors",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["cos",{"_index":897,"title":{},"body":{"injectables/EventsService.html":{}}}],["count",{"_index":774,"title":{},"body":{"classes/EventsResolver.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{}}}],["count(user",{"_index":1269,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["countrycode",{"_index":498,"title":{},"body":{"classes/CreateEventAddressInput.html":{},"entities/EventAddress.html":{}}}],["countryname",{"_index":499,"title":{},"body":{"classes/CreateEventAddressInput.html":{},"entities/EventAddress.html":{}}}],["county",{"_index":500,"title":{},"body":{"classes/CreateEventAddressInput.html":{},"entities/EventAddress.html":{}}}],["coverage",{"_index":1785,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":1926,"title":{},"body":{"index.html":{}}}],["create",{"_index":325,"title":{},"body":{"injectables/CompaniesService.html":{},"classes/CreateEventInput.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"injectables/UsersService.html":{}}}],["create(createcompanyinput",{"_index":332,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["create(createeventinput",{"_index":804,"title":{},"body":{"injectables/EventsService.html":{}}}],["create(createuserinput",{"_index":1735,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(user",{"_index":1224,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["createcipheriv",{"_index":1496,"title":{},"body":{"injectables/TokenService.html":{}}}],["createcompany",{"_index":302,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["createcompany(user",{"_index":307,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["createcompanyinput",{"_index":308,"title":{"classes/CreateCompanyInput.html":{}},"body":{"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/CreateCompanyInput.html":{},"classes/UpdateCompanyInput.html":{},"coverage.html":{}}}],["createcompanyinput.address",{"_index":346,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["createcompanyinput.city",{"_index":350,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["createcompanyinput.name",{"_index":344,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["createcompanyinput.nip",{"_index":352,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["createcompanyinput.zipcode",{"_index":348,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["createdat",{"_index":363,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["createdatecolumn",{"_index":371,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["createdecipheriv",{"_index":1495,"title":{},"body":{"injectables/TokenService.html":{}}}],["createevent",{"_index":731,"title":{},"body":{"classes/EventsResolver.html":{}}}],["createevent(user",{"_index":739,"title":{},"body":{"classes/EventsResolver.html":{}}}],["createeventaddress",{"_index":480,"title":{"classes/CreateEventAddress.html":{}},"body":{"classes/CreateEventAddress.html":{},"coverage.html":{}}}],["createeventaddressinput",{"_index":495,"title":{"classes/CreateEventAddressInput.html":{}},"body":{"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"injectables/EventsService.html":{},"coverage.html":{}}}],["createeventinput",{"_index":513,"title":{"classes/CreateEventInput.html":{}},"body":{"classes/CreateEventInput.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/UpdateEventInput.html":{},"coverage.html":{}}}],["createeventinput.eventaddress",{"_index":840,"title":{},"body":{"injectables/EventsService.html":{}}}],["createevents",{"_index":545,"title":{"classes/CreateEvents.html":{}},"body":{"classes/CreateEvents.html":{},"coverage.html":{}}}],["createinputobject",{"_index":1819,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createorupdate",{"_index":1617,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["createorupdate(user",{"_index":1629,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["createparamdecorator",{"_index":1978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createparticipants",{"_index":550,"title":{"classes/CreateParticipants.html":{}},"body":{"classes/CreateParticipants.html":{},"coverage.html":{}}}],["createquerybuilder",{"_index":588,"title":{},"body":{"classes/CreateTags.html":{},"injectables/EventsService.html":{},"injectables/UserActivityService.html":{}}}],["createquerybuilder('events",{"_index":848,"title":{},"body":{"injectables/EventsService.html":{}}}],["createquerybuilder('participants",{"_index":1256,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["createquerybuilder('ratings",{"_index":1380,"title":{},"body":{"injectables/RatingsService.html":{}}}],["createquerybuilder('user_activity",{"_index":1670,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["createrefreshtoken",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["createrefreshtoken(userid",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtags",{"_index":556,"title":{"classes/CreateTags.html":{}},"body":{"classes/CreateTags.html":{},"coverage.html":{}}}],["createtoken",{"_index":1475,"title":{},"body":{"injectables/TokenService.html":{}}}],["createtoken(user",{"_index":1480,"title":{},"body":{"injectables/TokenService.html":{}}}],["createuser",{"_index":1706,"title":{},"body":{"classes/UsersResolver.html":{}}}],["createuser(@args('createuserinput",{"_index":1420,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["createuser(createuserinput",{"_index":1714,"title":{},"body":{"classes/UsersResolver.html":{}}}],["createuserinput",{"_index":593,"title":{"classes/CreateUserInput.html":{}},"body":{"classes/CreateUserInput.html":{},"classes/ResetResponse.html":{},"classes/UpdateUserInput.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserinput.password",{"_index":1754,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":615,"title":{"classes/CreateUsers.html":{}},"body":{"classes/CreateUsers.html":{},"coverage.html":{}}}],["credentials",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["cron",{"_index":1105,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["cronjob",{"_index":1104,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["crypto",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenService.html":{}}}],["ctx",{"_index":959,"title":{},"body":{"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getargs().loginuserinput",{"_index":987,"title":{},"body":{"classes/LocalAuthGuard.html":{}}}],["ctx.getcontext",{"_index":985,"title":{},"body":{"classes/LocalAuthGuard.html":{}}}],["ctx.getcontext().req",{"_index":961,"title":{},"body":{"classes/GqlAuthGuard.html":{}}}],["ctx.getcontext().req.user",{"_index":1980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":36,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["currentuser",{"_index":35,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"classes/isValid.html":{},"miscellaneous/variables.html":{}}}],["currentuser'})@useguards(gqlauthguard",{"_index":1717,"title":{},"body":{"classes/UsersResolver.html":{}}}],["currentuser(@currentuser",{"_index":1428,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["currentuser(user",{"_index":1716,"title":{},"body":{"classes/UsersResolver.html":{}}}],["cursor",{"_index":411,"title":{},"body":{"classes/ConnectionArgs.html":{},"miscellaneous/variables.html":{}}}],["d').unix",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["data.ts",{"_index":1133,"title":{},"body":{"classes/PageData.html":{},"coverage.html":{}}}],["data.ts:12",{"_index":1136,"title":{},"body":{"classes/PageData.html":{}}}],["data.ts:6",{"_index":1134,"title":{},"body":{"classes/PageData.html":{}}}],["data.ts:9",{"_index":1135,"title":{},"body":{"classes/PageData.html":{}}}],["database",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["datatoencrypt",{"_index":1499,"title":{},"body":{"injectables/TokenService.html":{}}}],["date",{"_index":370,"title":{},"body":{"entities/Company.html":{},"classes/CreateEventInput.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"injectables/ParticipantsService.html":{},"entities/Rating.html":{},"injectables/RatingsService.html":{},"entities/Tag.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["date().gettime",{"_index":1780,"title":{},"body":{"injectables/UsersService.html":{}}}],["date(clientdate",{"_index":880,"title":{},"body":{"injectables/EventsService.html":{}}}],["date(event.enddate",{"_index":1363,"title":{},"body":{"injectables/RatingsService.html":{},"injectables/UserActivityService.html":{}}}],["date(event.startdate",{"_index":1661,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["date(new",{"_index":1779,"title":{},"body":{"injectables/UsersService.html":{}}}],["date.response",{"_index":1157,"title":{},"body":{"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{}}}],["date.response.ts",{"_index":1158,"title":{},"body":{"classes/ParticipantByDateResponse.html":{},"coverage.html":{}}}],["date.response.ts:6",{"_index":1160,"title":{},"body":{"classes/ParticipantByDateResponse.html":{}}}],["date.response.ts:9",{"_index":1159,"title":{},"body":{"classes/ParticipantByDateResponse.html":{}}}],["date.toisostring().replace('t",{"_index":883,"title":{},"body":{"injectables/EventsService.html":{}}}],["dateisvalid",{"_index":1767,"title":{},"body":{"injectables/UsersService.html":{}}}],["day",{"_index":1993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dayjs",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{},"dependencies.html":{}}}],["dayjs().add(2",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["dayjs(date",{"_index":1989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dayjs(event.enddate).add(10",{"_index":1114,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["dayjs(event.enddate).add(15",{"_index":1116,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["dayjs(event.startdate).subtract(15",{"_index":1112,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["dayjs(event.startdate).subtract(50",{"_index":1106,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["dayjs(participants.date).format('dd/mm/yyyy",{"_index":1276,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["dayjs.unix(getrefreshtokenexpirestime()).todate",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["dayjs.unix(gettokenexpirestime()).add(1",{"_index":2004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":1109,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["decimal",{"_index":645,"title":{},"body":{"entities/Event.html":{},"entities/UserActivity.html":{}}}],["decipher",{"_index":1514,"title":{},"body":{"injectables/TokenService.html":{}}}],["decipher.final('utf8",{"_index":1518,"title":{},"body":{"injectables/TokenService.html":{}}}],["decipher.update(token",{"_index":1517,"title":{},"body":{"injectables/TokenService.html":{}}}],["declarations",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoded",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateUserInput.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"classes/LoginUserInput.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"classes/TagsResolver.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}}}],["decrypt",{"_index":1476,"title":{},"body":{"injectables/TokenService.html":{}}}],["decrypt(token",{"_index":1482,"title":{},"body":{"injectables/TokenService.html":{}}}],["decrypted",{"_index":1516,"title":{},"body":{"injectables/TokenService.html":{},"injectables/UsersService.html":{}}}],["decryptedtoken",{"_index":1515,"title":{},"body":{"injectables/TokenService.html":{}}}],["default",{"_index":493,"title":{},"body":{"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"classes/EventResponse.html":{},"classes/PageData.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/RatingListResponse.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"classes/UserActivitySave.html":{},"classes/UserResponse.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":1019,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultstrategy",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["defaultvalue",{"_index":543,"title":{},"body":{"classes/CreateEventInput.html":{},"classes/EventsResolver.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["deletealleventjobs",{"_index":1080,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["deletealleventjobs(event",{"_index":1090,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["deletealleventjobs.start",{"_index":1122,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["deletejob",{"_index":1081,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["deletejob(jobname",{"_index":1092,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["demo",{"_index":1896,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":87,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":463,"title":{},"body":{"classes/ConnectionArgs.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["description",{"_index":408,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/CreateEventInput.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{}}}],["dev",{"_index":1910,"title":{},"body":{"index.html":{}}}],["development",{"_index":1932,"title":{},"body":{"index.html":{}}}],["diff",{"_index":1662,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["dir",{"_index":1022,"title":{},"body":{"modules/MailModule.html":{}}}],["dist/src/i18n/queryresolver.ts",{"_index":1289,"title":{},"body":{"injectables/QueryResolver-1.html":{},"coverage.html":{}}}],["dist/src/i18n/queryresolver.ts:6",{"_index":1290,"title":{},"body":{"injectables/QueryResolver-1.html":{}}}],["distance",{"_index":396,"title":{},"body":{"classes/ConnectionArgs.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"entities/UserActivity.html":{},"injectables/UserActivityService.html":{},"miscellaneous/enumerations.html":{}}}],["distanceparams",{"_index":403,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["distancequery",{"_index":892,"title":{},"body":{"injectables/EventsService.html":{},"injectables/UserActivityService.html":{}}}],["district",{"_index":501,"title":{},"body":{"classes/CreateEventAddressInput.html":{},"entities/EventAddress.html":{}}}],["doc",{"_index":1949,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1917,"title":{},"body":{"index.html":{}}}],["docs.nestjs.com/recipes/documentation",{"_index":1944,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1786,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto/activate",{"_index":1414,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":317,"title":{},"body":{"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["dto/event.response",{"_index":760,"title":{},"body":{"classes/EventsResolver.html":{}}}],["dto/login",{"_index":39,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["dto/participant",{"_index":1199,"title":{},"body":{"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{}}}],["dto/rating",{"_index":1334,"title":{},"body":{"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{}}}],["dto/refresh",{"_index":42,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["dto/reset",{"_index":1417,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":319,"title":{},"body":{"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["dto/user",{"_index":1643,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["dto/user.response",{"_index":1416,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["duration",{"_index":1594,"title":{},"body":{"entities/UserActivity.html":{},"miscellaneous/enumerations.html":{}}}],["during",{"_index":1963,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["duse",{"_index":1920,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":1941,"title":{},"body":{"index.html":{}}}],["email",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserInput.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"injectables/MailService.html":{},"classes/ResetPasswordInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["emails.register_confirmation.subject",{"_index":1050,"title":{},"body":{"injectables/MailService.html":{}}}],["emails.reset_password.reset_password_mail",{"_index":1782,"title":{},"body":{"injectables/UsersService.html":{}}}],["emailverify",{"_index":1056,"title":{},"body":{"injectables/MailService.html":{}}}],["en",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["encrypt",{"_index":1477,"title":{},"body":{"injectables/TokenService.html":{}}}],["encrypt(userid",{"_index":1484,"title":{},"body":{"injectables/TokenService.html":{}}}],["encrypted",{"_index":1507,"title":{},"body":{"injectables/TokenService.html":{}}}],["encryptedtoken",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["encryption",{"_index":1909,"title":{},"body":{"index.html":{}}}],["encryptioniv",{"_index":1473,"title":{},"body":{"injectables/TokenService.html":{}}}],["encryptionkey",{"_index":1474,"title":{},"body":{"injectables/TokenService.html":{}}}],["enddate",{"_index":515,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/RatingsService.html":{},"injectables/UserActivityService.html":{},"miscellaneous/variables.html":{}}}],["enddate.gettime",{"_index":1663,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["enddate.sethours(23",{"_index":943,"title":{},"body":{"injectables/EventsService.html":{}}}],["enddate.toisostring().replace('t",{"_index":947,"title":{},"body":{"injectables/EventsService.html":{}}}],["enddateformated",{"_index":946,"title":{},"body":{"injectables/EventsService.html":{}}}],["entities",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/*.entity",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/company.entity",{"_index":299,"title":{},"body":{"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{}}}],["entities/event",{"_index":726,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["entities/event.entity",{"_index":540,"title":{},"body":{"classes/CreateEventInput.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{}}}],["entities/participant.entity",{"_index":1163,"title":{},"body":{"classes/ParticipantListResponse.html":{},"classes/ParticipantUpdate.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{}}}],["entities/rating.entity",{"_index":1306,"title":{},"body":{"classes/RatingListResponse.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{}}}],["entities/tag.entity",{"_index":1454,"title":{},"body":{"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{}}}],["entities/user.entity",{"_index":1411,"title":{},"body":{"classes/ResetResponse.html":{},"injectables/TokenService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["entities/useractivity.entity",{"_index":1603,"title":{},"body":{"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{}}}],["entity",{"_index":359,"title":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{}},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"coverage.html":{}}}],["entity.{js,ts",{"_index":1971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum",{"_index":682,"title":{},"body":{"entities/Event.html":{},"entities/Participant.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["enumerations",{"_index":1883,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1928,"title":{},"body":{"index.html":{}}}],["env.sample",{"_index":1927,"title":{},"body":{"index.html":{}}}],["error",{"_index":931,"title":{},"body":{"injectables/EventsService.html":{},"injectables/TokenService.html":{},"miscellaneous/variables.html":{}}}],["error('paging",{"_index":446,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["error('relay",{"_index":442,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["eslint",{"_index":1912,"title":{},"body":{"index.html":{}}}],["event",{"_index":482,"title":{"entities/Event.html":{}},"body":{"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/NotificationsService.html":{},"entities/Participant.html":{},"classes/ParticipantResponse.html":{},"injectables/ParticipantsService.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"injectables/RatingsService.html":{},"injectables/UserActivityService.html":{},"coverage.html":{}}}],["event.andwhere(`events.id",{"_index":874,"title":{},"body":{"injectables/EventsService.html":{}}}],["event.entity",{"_index":708,"title":{},"body":{"entities/EventAddress.html":{}}}],["event.eventaddress",{"_index":841,"title":{},"body":{"injectables/EventsService.html":{}}}],["event.getone",{"_index":875,"title":{},"body":{"injectables/EventsService.html":{}}}],["event.id",{"_index":700,"title":{},"body":{"entities/EventAddress.html":{},"injectables/EventsService.html":{},"injectables/NotificationsService.html":{}}}],["event.input",{"_index":759,"title":{},"body":{"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/UpdateEventInput.html":{}}}],["event.input.ts",{"_index":514,"title":{},"body":{"classes/CreateEventInput.html":{},"classes/UpdateEventInput.html":{},"coverage.html":{}}}],["event.input.ts:10",{"_index":533,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["event.input.ts:13",{"_index":522,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["event.input.ts:18",{"_index":536,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["event.input.ts:21",{"_index":530,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["event.input.ts:24",{"_index":523,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["event.input.ts:27",{"_index":525,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["event.input.ts:30",{"_index":526,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["event.input.ts:35",{"_index":532,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["event.input.ts:38",{"_index":524,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["event.input.ts:41",{"_index":529,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["event.input.ts:7",{"_index":1529,"title":{},"body":{"classes/UpdateEventInput.html":{}}}],["event.state",{"_index":920,"title":{},"body":{"injectables/EventsService.html":{}}}],["event.type",{"_index":1655,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["event.user.id",{"_index":845,"title":{},"body":{"injectables/EventsService.html":{},"injectables/NotificationsService.html":{}}}],["event_address",{"_index":709,"title":{},"body":{"entities/EventAddress.html":{},"injectables/EventsService.html":{}}}],["event_address.event",{"_index":863,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventaddress",{"_index":489,"title":{"entities/EventAddress.html":{}},"body":{"classes/CreateEventAddress.html":{},"classes/CreateEventInput.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{}}}],["eventaddress.event",{"_index":637,"title":{},"body":{"entities/Event.html":{}}}],["eventaddressrepository",{"_index":799,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventid",{"_index":746,"title":{},"body":{"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/MailService.html":{},"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{}}}],["eventowner",{"_index":1124,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["eventresponse",{"_index":710,"title":{"classes/EventResponse.html":{}},"body":{"classes/EventResponse.html":{},"classes/EventsResolver.html":{},"coverage.html":{}}}],["events",{"_index":686,"title":{},"body":{"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["events(args",{"_index":741,"title":{},"body":{"classes/EventsResolver.html":{}}}],["events.addselect",{"_index":893,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.andwhere",{"_index":905,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.andwhere('events.enddate",{"_index":909,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.andwhere('events.startdate",{"_index":907,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.andwhere('events.type",{"_index":910,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.description",{"_index":890,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["events.eventaddress",{"_index":861,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.getmany",{"_index":912,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.goingcount",{"_index":859,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.id",{"_index":862,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["events.interestedcount",{"_index":854,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.lat",{"_index":900,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.lng",{"_index":901,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.loggedinparticipants",{"_index":864,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.orderby(`events.${field",{"_index":916,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.orderby(`events.startdate",{"_index":915,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.orderby(`events_distance",{"_index":913,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.orderby(`events_score",{"_index":914,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.participantrate",{"_index":869,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.participants",{"_index":855,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.resolver",{"_index":725,"title":{},"body":{"modules/EventsModule.html":{}}}],["events.seed.ts",{"_index":546,"title":{},"body":{"classes/CreateEvents.html":{},"coverage.html":{}}}],["events.seed.ts:5",{"_index":547,"title":{},"body":{"classes/CreateEvents.html":{}}}],["events.service",{"_index":723,"title":{},"body":{"modules/EventsModule.html":{},"classes/EventsResolver.html":{}}}],["events.startdate",{"_index":948,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.take(limit).skip(offset).getmany",{"_index":918,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.title",{"_index":889,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["events.type",{"_index":949,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.user",{"_index":850,"title":{},"body":{"injectables/EventsService.html":{}}}],["events/entities/event",{"_index":490,"title":{},"body":{"classes/CreateEventAddress.html":{}}}],["events/entities/event.entity",{"_index":1102,"title":{},"body":{"injectables/NotificationsService.html":{},"entities/Tag.html":{}}}],["events/events.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["events_distance",{"_index":904,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsmapped",{"_index":917,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsmapped.map((event",{"_index":919,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsmodule",{"_index":97,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules.html":{},"overview.html":{}}}],["eventsrepository",{"_index":803,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventsresolver",{"_index":724,"title":{"classes/EventsResolver.html":{}},"body":{"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"coverage.html":{}}}],["eventsservice",{"_index":720,"title":{"injectables/EventsService.html":{}},"body":{"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"coverage.html":{},"overview.html":{}}}],["eventtype",{"_index":534,"title":{},"body":{"classes/CreateEventInput.html":{},"classes/CreateTags.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"entities/Tag.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"miscellaneous/enumerations.html":{}}}],["eventtype.party",{"_index":544,"title":{},"body":{"classes/CreateEventInput.html":{},"classes/CreateTags.html":{},"entities/Event.html":{}}}],["eventtype.social",{"_index":587,"title":{},"body":{"classes/CreateTags.html":{}}}],["eventtype.sport",{"_index":586,"title":{},"body":{"classes/CreateTags.html":{}}}],["exec",{"_index":1923,"title":{},"body":{"index.html":{}}}],["execute",{"_index":592,"title":{},"body":{"classes/CreateTags.html":{},"injectables/EventsService.html":{},"injectables/UserActivityService.html":{}}}],["executioncontext",{"_index":953,"title":{},"body":{"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["exports",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1841,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":714,"title":{},"body":{"classes/EventResponse.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/RatingListResponse.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"classes/UserResponse.html":{}}}],["extractjwt",{"_index":970,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":977,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["factory",{"_index":487,"title":{},"body":{"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{}}}],["factory(event)().createmany(10",{"_index":549,"title":{},"body":{"classes/CreateEvents.html":{}}}],["factory(eventaddress)().createmany(40",{"_index":494,"title":{},"body":{"classes/CreateEventAddress.html":{}}}],["factory(participant)().createmany(60",{"_index":555,"title":{},"body":{"classes/CreateParticipants.html":{}}}],["factory(user)().createmany(10",{"_index":618,"title":{},"body":{"classes/CreateUsers.html":{}}}],["faker",{"_index":1856,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fallbacklanguage",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["fallbacks",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":73,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"entities/Participant.html":{},"classes/ParticipantsResolver.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"classes/isValid.html":{},"miscellaneous/variables.html":{}}}],["false})@column({unique",{"_index":1559,"title":{},"body":{"entities/User.html":{}}}],["false})@joincolumn({name",{"_index":1142,"title":{},"body":{"entities/Participant.html":{},"entities/Rating.html":{},"entities/UserActivity.html":{}}}],["false})@min(1)@max(5",{"_index":1295,"title":{},"body":{"entities/Rating.html":{}}}],["female",{"_index":1576,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["field",{"_index":16,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"classes/AuthResolver.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateUserInput.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/LoginUserInput.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["field()@column",{"_index":367,"title":{},"body":{"entities/Company.html":{}}}],["field()@column('mediumtext",{"_index":630,"title":{},"body":{"entities/Event.html":{}}}],["field()@column({default",{"_index":642,"title":{},"body":{"entities/Event.html":{},"entities/User.html":{}}}],["field()@column({nullable",{"_index":634,"title":{},"body":{"entities/Event.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/UserActivity.html":{}}}],["field()@column({select",{"_index":632,"title":{},"body":{"entities/Event.html":{}}}],["field()@column({type",{"_index":644,"title":{},"body":{"entities/Event.html":{},"entities/UserActivity.html":{}}}],["field()@isemail()@length(4",{"_index":595,"title":{},"body":{"classes/CreateUserInput.html":{}}}],["field()@length(8",{"_index":598,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{}}}],["field()@manytoone(undefined",{"_index":672,"title":{},"body":{"entities/Event.html":{}}}],["field()@min(1)@max(5",{"_index":1310,"title":{},"body":{"classes/RatingUpdate.html":{}}}],["field()@primarygeneratedcolumn('uuid",{"_index":373,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["field(undefined",{"_index":527,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{},"classes/UserActivitySave.html":{}}}],["field(undefined)@manytoone(undefined",{"_index":1141,"title":{},"body":{"entities/Participant.html":{},"entities/Rating.html":{},"entities/UserActivity.html":{}}}],["field({defaultvalue",{"_index":535,"title":{},"body":{"classes/CreateEventInput.html":{}}}],["field({nullable",{"_index":407,"title":{},"body":{"classes/ConnectionArgs.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/ParticipantByDateResponse.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"classes/isValid.html":{}}}],["find",{"_index":790,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["find(eventid",{"_index":806,"title":{},"body":{"injectables/EventsService.html":{}}}],["find(user",{"_index":1226,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["findall",{"_index":791,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["findall(@args",{"_index":1424,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["findall(args",{"_index":1719,"title":{},"body":{"classes/UsersResolver.html":{}}}],["findall(limit",{"_index":808,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/UsersService.html":{}}}],["findallforcalendar",{"_index":792,"title":{},"body":{"injectables/EventsService.html":{}}}],["findallforcalendar(limit",{"_index":812,"title":{},"body":{"injectables/EventsService.html":{}}}],["findbydate",{"_index":1216,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["findbydate(eventid",{"_index":1229,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["findbymail",{"_index":1730,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbymail(mail",{"_index":1738,"title":{},"body":{"injectables/UsersService.html":{}}}],["findcompany",{"_index":303,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["findcompany(@currentuser",{"_index":322,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["findcompany(user",{"_index":310,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["findforedit",{"_index":732,"title":{},"body":{"classes/EventsResolver.html":{},"injectables/EventsService.html":{}}}],["findforedit(@currentuser",{"_index":782,"title":{},"body":{"classes/EventsResolver.html":{}}}],["findforedit(eventid",{"_index":814,"title":{},"body":{"injectables/EventsService.html":{}}}],["findforedit(user",{"_index":745,"title":{},"body":{"classes/EventsResolver.html":{}}}],["findmany",{"_index":1217,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["findmany(event",{"_index":1231,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["findone",{"_index":326,"title":{},"body":{"injectables/CompaniesService.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["findone(@args('id",{"_index":1426,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["findone(eventid",{"_index":748,"title":{},"body":{"classes/EventsResolver.html":{},"injectables/EventsService.html":{}}}],["findone(id",{"_index":1741,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(user",{"_index":334,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["findone(userid",{"_index":1721,"title":{},"body":{"classes/UsersResolver.html":{}}}],["first",{"_index":397,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["first/after",{"_index":447,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["firstname",{"_index":1532,"title":{},"body":{"classes/UpdateUserInput.html":{},"entities/User.html":{}}}],["fit",{"_index":566,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["fitness",{"_index":561,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["fitnessmotivation",{"_index":569,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["follow",{"_index":574,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["football",{"_index":576,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["forest",{"_index":582,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["forward",{"_index":434,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["forwardref",{"_index":722,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/NotificationsService.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{}}}],["forwards",{"_index":444,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["found",{"_index":357,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["fromglobalid",{"_index":428,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["frontend",{"_index":1898,"title":{},"body":{"index.html":{}}}],["fun",{"_index":579,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":437,"title":{},"body":{"classes/ConnectionArgs.html":{},"coverage.html":{}}}],["functions",{"_index":1888,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":906,"title":{},"body":{"injectables/EventsService.html":{},"miscellaneous/typealiases.html":{}}}],["generatequery",{"_index":1618,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["generatequery(user",{"_index":1631,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["gensalt",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["gensalt(10",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["getdistanceparameters",{"_index":1808,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getdistanceparameters(args",{"_index":454,"title":{},"body":{"classes/ConnectionArgs.html":{},"miscellaneous/functions.html":{}}}],["getid",{"_index":1811,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getid(before",{"_index":472,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["getid(cursor",{"_index":452,"title":{},"body":{"classes/ConnectionArgs.html":{},"miscellaneous/variables.html":{}}}],["getmany",{"_index":1267,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UserActivityService.html":{}}}],["getone",{"_index":1676,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["getorderparameters",{"_index":1809,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getorderparameters(args",{"_index":458,"title":{},"body":{"classes/ConnectionArgs.html":{},"miscellaneous/functions.html":{}}}],["getpagingparameters",{"_index":1810,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getpagingparameters(args",{"_index":464,"title":{},"body":{"classes/ConnectionArgs.html":{},"miscellaneous/functions.html":{}}}],["getrandomboolean",{"_index":1821,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrandomdatefromdate",{"_index":1822,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrandomkeyfromobject",{"_index":1823,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrandomnumberbetween",{"_index":1824,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrandomnumberbetween(minday",{"_index":1992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getrandomvaluefromarray",{"_index":1825,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrefreshtokenexpirestime",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getrequest",{"_index":951,"title":{},"body":{"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{}}}],["getrequest(context",{"_index":952,"title":{},"body":{"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{}}}],["getting",{"_index":1893,"title":{"index.html":{}},"body":{}}],["gettokenexpirestime",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gettypes",{"_index":1463,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettypes(type",{"_index":1467,"title":{},"body":{"injectables/TagsService.html":{}}}],["getuseractivity",{"_index":1619,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["getuseractivity(user",{"_index":1633,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["going",{"_index":1150,"title":{},"body":{"entities/Participant.html":{},"miscellaneous/enumerations.html":{}}}],["goingcount",{"_index":620,"title":{},"body":{"entities/Event.html":{}}}],["gqlauthguard",{"_index":44,"title":{"classes/GqlAuthGuard.html":{}},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/GqlAuthGuard.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"classes/isValid.html":{}}}],["gqlexecutioncontext",{"_index":956,"title":{},"body":{"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":960,"title":{},"body":{"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["graphql",{"_index":429,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/CreateEventInput.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"dependencies.html":{},"index.html":{}}}],["graphqljson",{"_index":541,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{}}}],["graphqlmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["group",{"_index":1271,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["guards/gql",{"_index":45,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["guards/local",{"_index":48,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["gym",{"_index":562,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["gymlife",{"_index":575,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["handlebars",{"_index":1863,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":1005,"title":{},"body":{"modules/MailModule.html":{}}}],["hash",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["hash(createuserinput.password",{"_index":1755,"title":{},"body":{"injectables/UsersService.html":{}}}],["hash(randomstring",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["health",{"_index":573,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["healthy",{"_index":570,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["hh",{"_index":1108,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["host",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["hostdomain",{"_index":1053,"title":{},"body":{"injectables/MailService.html":{}}}],["hours",{"_index":1665,"title":{},"body":{"injectables/UserActivityService.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":1283,"title":{},"body":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["https://meet",{"_index":1897,"title":{},"body":{"index.html":{}}}],["husky",{"_index":1913,"title":{},"body":{"index.html":{}}}],["i18n",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/EventsService.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"injectables/RatingsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["i18n/queryresolver",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["i18njsonparser",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nmodule.forroot",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nresolver",{"_index":1281,"title":{},"body":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["i18nservice",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventsService.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/UsersService.html":{}}}],["id",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"injectables/EventsService.html":{},"injectables/JwtStrategy.html":{},"entities/Participant.html":{},"injectables/ParticipantsService.html":{},"entities/Rating.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1787,"title":{},"body":{"coverage.html":{}}}],["ievents",{"_index":681,"title":{},"body":{"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{}}}],["ieventstate",{"_index":665,"title":{},"body":{"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"miscellaneous/typealiases.html":{}}}],["if(${distancequery",{"_index":1691,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["if(events.type",{"_index":1688,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["ignoreexpiration",{"_index":978,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":392,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["imports",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{}}}],["incorrect",{"_index":1513,"title":{},"body":{"injectables/TokenService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/isValid.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["inject",{"_index":831,"title":{},"body":{"injectables/EventsService.html":{},"modules/MailModule.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{}}}],["inject(forwardref",{"_index":837,"title":{},"body":{"injectables/EventsService.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{}}}],["injectable",{"_index":219,"title":{"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"injectables/EventsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"injectables/RatingsService.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"injectables/EventsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"injectables/RatingsService.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"injectables/EventsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"injectables/RatingsService.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":338,"title":{},"body":{"injectables/CompaniesService.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/TagsService.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(company",{"_index":340,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["injectrepository(event",{"_index":835,"title":{},"body":{"injectables/EventsService.html":{}}}],["injectrepository(eventaddress",{"_index":836,"title":{},"body":{"injectables/EventsService.html":{}}}],["injectrepository(participant",{"_index":1239,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["injectrepository(rating",{"_index":1362,"title":{},"body":{"injectables/RatingsService.html":{}}}],["injectrepository(tag",{"_index":1469,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":1753,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(useractivity",{"_index":1645,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["innerjoinandmapone",{"_index":849,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["inputtype",{"_index":83,"title":{},"body":{"classes/ActivateUserInput.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateUserInput.html":{},"classes/LoginUserInput.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{}}}],["insert",{"_index":589,"title":{},"body":{"classes/CreateTags.html":{},"entities/Event.html":{}}}],["install",{"_index":1930,"title":{},"body":{"index.html":{}}}],["int",{"_index":539,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{}}}],["interested",{"_index":1062,"title":{},"body":{"injectables/MailService.html":{},"entities/Participant.html":{},"entities/UserActivity.html":{},"injectables/UserActivityService.html":{},"miscellaneous/enumerations.html":{}}}],["interestedcount",{"_index":621,"title":{},"body":{"entities/Event.html":{}}}],["into(tag",{"_index":590,"title":{},"body":{"classes/CreateTags.html":{}}}],["inz.herokuapp.com",{"_index":1899,"title":{},"body":{"index.html":{}}}],["isactive",{"_index":1550,"title":{},"body":{"entities/User.html":{}}}],["isarchive",{"_index":622,"title":{},"body":{"entities/Event.html":{}}}],["isbackwardpaging",{"_index":441,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["isemail",{"_index":607,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/UpdateUserInput.html":{}}}],["isforwardpaging",{"_index":440,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["isglobal",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["isvalid",{"_index":50,"title":{"classes/isValid.html":{}},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"coverage.html":{},"classes/isValid.html":{}}}],["jobname",{"_index":1094,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["join",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["join(__dirname",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["joincolumn",{"_index":385,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/UserActivity.html":{}}}],["json",{"_index":542,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{},"dependencies.html":{}}}],["json.parse(decryptedtoken",{"_index":1519,"title":{},"body":{"injectables/TokenService.html":{}}}],["json.stringify",{"_index":1523,"title":{},"body":{"injectables/TokenService.html":{}}}],["json.stringify(object).replace(/\\\"([^(\\\")\"]+)\\\":/g",{"_index":1977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":1498,"title":{},"body":{"injectables/TokenService.html":{}}}],["jwt",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":976,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":177,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepconnectionalive",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["label",{"_index":502,"title":{},"body":{"classes/CreateEventAddressInput.html":{},"entities/EventAddress.html":{}}}],["language",{"_index":1288,"title":{},"body":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["last",{"_index":398,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["last/before",{"_index":448,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["lastelement",{"_index":1695,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["lastname",{"_index":1533,"title":{},"body":{"classes/UpdateUserInput.html":{},"entities/User.html":{}}}],["lat",{"_index":516,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{}}}],["latitude",{"_index":399,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{}}}],["leftjoinandmapmany",{"_index":884,"title":{},"body":{"injectables/EventsService.html":{}}}],["leftjoinandmapone",{"_index":860,"title":{},"body":{"injectables/EventsService.html":{}}}],["legend",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":609,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{}}}],["length(4",{"_index":611,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/UpdateUserInput.html":{}}}],["length(8",{"_index":612,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{}}}],["letter",{"_index":605,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{}}}],["lifestyle",{"_index":568,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":426,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/PageData.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["lint",{"_index":1914,"title":{},"body":{"index.html":{}}}],["list.response",{"_index":1154,"title":{},"body":{"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"coverage.html":{}}}],["list.response.ts",{"_index":1162,"title":{},"body":{"classes/ParticipantListResponse.html":{},"classes/RatingListResponse.html":{},"coverage.html":{}}}],["literal",{"_index":966,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["lng",{"_index":517,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{}}}],["loadrelationcountandmap",{"_index":853,"title":{},"body":{"injectables/EventsService.html":{}}}],["local",{"_index":993,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":47,"title":{"classes/LocalAuthGuard.html":{}},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/LocalAuthGuard.html":{},"coverage.html":{},"classes/isValid.html":{}}}],["localstrategy",{"_index":178,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["loggedinparticipants",{"_index":623,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{}}}],["loggedinparticipants.event",{"_index":865,"title":{},"body":{"injectables/EventsService.html":{}}}],["loggedinparticipants.user",{"_index":866,"title":{},"body":{"injectables/EventsService.html":{}}}],["loggeduser",{"_index":809,"title":{},"body":{"injectables/EventsService.html":{}}}],["loggeduser.id",{"_index":921,"title":{},"body":{"injectables/EventsService.html":{}}}],["logger",{"_index":1972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":1975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":201,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["login(@args('loginuserinput",{"_index":57,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["login(loginuserinput",{"_index":208,"title":{},"body":{"classes/AuthResolver.html":{}}}],["login(usersrepository",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserinput",{"_index":38,"title":{"classes/LoginUserInput.html":{}},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/LoginUserInput.html":{},"coverage.html":{},"classes/isValid.html":{}}}],["loginuserinput.email",{"_index":61,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["loginuserinput.password",{"_index":63,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["longitude",{"_index":400,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{}}}],["mail",{"_index":1740,"title":{},"body":{"injectables/UsersService.html":{}}}],["mail.service",{"_index":1007,"title":{},"body":{"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["mailer",{"_index":1904,"title":{},"body":{"index.html":{}}}],["mailermodule",{"_index":1008,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":1010,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":1035,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":98,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":1002,"title":{"injectables/MailService.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["male",{"_index":1577,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["manytoone",{"_index":679,"title":{},"body":{"entities/Event.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/UserActivity.html":{}}}],["matches",{"_index":608,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":614,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{}}}],["matching",{"_index":76,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/isValid.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(diff",{"_index":1666,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["math.floor(math.random",{"_index":1991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1299,"title":{},"body":{"entities/Rating.html":{},"classes/RatingUpdate.html":{},"classes/UpdateUserInput.html":{},"miscellaneous/variables.html":{}}}],["max(1",{"_index":1548,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["max(5",{"_index":1303,"title":{},"body":{"entities/Rating.html":{},"classes/RatingUpdate.html":{}}}],["maxday",{"_index":1985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxhours",{"_index":1987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxparticipants",{"_index":518,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{}}}],["meet",{"_index":1895,"title":{},"body":{"index.html":{}}}],["meet.us",{"_index":1020,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["message",{"_index":602,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"classes/UpdateUserInput.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["meta",{"_index":465,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["meta.after",{"_index":470,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["meta.first",{"_index":469,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["meta.pagingtype",{"_index":467,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["metadata",{"_index":1874,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":200,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/ConnectionArgs.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":1300,"title":{},"body":{"entities/Rating.html":{},"classes/RatingUpdate.html":{},"classes/UpdateUserInput.html":{},"miscellaneous/variables.html":{}}}],["min(0",{"_index":1547,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["min(1",{"_index":1302,"title":{},"body":{"entities/Rating.html":{},"classes/RatingUpdate.html":{}}}],["minday",{"_index":1984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minhours",{"_index":1986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minutes').format('mm",{"_index":1107,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["miscellaneous",{"_index":1882,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1110,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["mode",{"_index":1934,"title":{},"body":{"index.html":{}}}],["module",{"_index":84,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":86,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":1009,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":1006,"title":{},"body":{"modules/MailModule.html":{}}}],["motivation",{"_index":564,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["muscle",{"_index":580,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["mutation",{"_index":27,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}}}],["mutation(undefined",{"_index":1710,"title":{},"body":{"classes/UsersResolver.html":{}}}],["mutation(undefined)@useguards(gqlauthguard",{"_index":214,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/UsersResolver.html":{}}}],["mutation(undefined)@useguards(localauthguard",{"_index":209,"title":{},"body":{"classes/AuthResolver.html":{}}}],["mysql",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1865,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":207,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"entities/Participant.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["nestjs",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/EventsService.html":{},"injectables/LocalStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"injectables/RatingsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"modules/UserActivityModule.html":{},"injectables/UserActivityService.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"classes/isValid.html":{}}}],["nestjs/config",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{}}}],["nestjs/core",{"_index":1833,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":31,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateUserInput.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"classes/EventsResolver.html":{},"classes/GqlAuthGuard.html":{},"classes/LocalAuthGuard.html":{},"classes/LoginUserInput.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"classes/TagsResolver.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"classes/UserResponse.html":{},"classes/UsersResolver.html":{},"dependencies.html":{},"classes/isValid.html":{}}}],["nestjs/jwt",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1836,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1840,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"injectables/NotificationsService.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"injectables/CompaniesService.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"modules/RatingsModule.html":{},"injectables/RatingsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UserActivityModule.html":{},"injectables/UserActivityService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":59,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"classes/ConnectionArgs.html":{},"injectables/EventsService.html":{},"injectables/LocalStrategy.html":{},"modules/MailModule.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/isValid.html":{},"miscellaneous/variables.html":{}}}],["newcompany",{"_index":341,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["newcompany.address",{"_index":345,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["newcompany.city",{"_index":349,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["newcompany.name",{"_index":343,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["newcompany.nip",{"_index":351,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["newcompany.user",{"_index":342,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["newcompany.zipcode",{"_index":347,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["newpassword",{"_index":1403,"title":{},"body":{"classes/ResetPasswordTokenInput.html":{}}}],["nextid",{"_index":451,"title":{},"body":{"classes/ConnectionArgs.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nextid(meta.after",{"_index":471,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["nickname",{"_index":1534,"title":{},"body":{"classes/UpdateUserInput.html":{},"entities/User.html":{}}}],["nip",{"_index":364,"title":{},"body":{"entities/Company.html":{},"classes/CreateCompanyInput.html":{}}}],["nodemailer",{"_index":1868,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":436,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["notification",{"_index":1061,"title":{},"body":{"injectables/MailService.html":{}}}],["notifications.service",{"_index":1076,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notifications/notifications.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["notificationsmodule",{"_index":99,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/NotificationsModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationsservice",{"_index":801,"title":{"injectables/NotificationsService.html":{}},"body":{"injectables/EventsService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"coverage.html":{},"overview.html":{}}}],["npx",{"_index":1945,"title":{},"body":{"index.html":{}}}],["null",{"_index":460,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{}}}],["nullable",{"_index":528,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantsResolver.html":{},"entities/Rating.html":{},"classes/RatingsResolver.html":{},"entities/Tag.html":{},"classes/TagsResolver.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["number",{"_index":19,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/ConnectionArgs.html":{},"classes/CreateEventInput.html":{},"classes/CreateUserInput.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"injectables/RatingsService.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":1970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(someobject",{"_index":1998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(someobject).length",{"_index":1999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objecttype",{"_index":28,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"classes/UserResponse.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}}}],["offset",{"_index":427,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/PageData.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["ondelete",{"_index":701,"title":{},"body":{"entities/EventAddress.html":{}}}],["onetomany",{"_index":680,"title":{},"body":{"entities/Event.html":{}}}],["onetoone",{"_index":386,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":379,"title":{},"body":{"entities/Company.html":{},"entities/EventAddress.html":{}}}],["onupdate",{"_index":673,"title":{},"body":{"entities/Event.html":{}}}],["opaque",{"_index":410,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["optional",{"_index":80,"title":{},"body":{"classes/ActivateUserInput.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/ConnectionArgs.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["order",{"_index":1272,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["orderby",{"_index":419,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["orderfield",{"_index":401,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["orderparams",{"_index":404,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["ordersort",{"_index":402,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["origin",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["ormconfig.ts",{"_index":1790,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1955,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":856,"title":{},"body":{"injectables/EventsService.html":{},"index.html":{}}}],["package",{"_index":1828,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":776,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["pagedata",{"_index":780,"title":{"classes/PageData.html":{}},"body":{"classes/EventsResolver.html":{},"classes/PageData.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["paginate",{"_index":409,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["pagination",{"_index":443,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["pagingmeta",{"_index":432,"title":{},"body":{"classes/ConnectionArgs.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["pagingparams",{"_index":405,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["pagingtype",{"_index":433,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["parameters",{"_index":206,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["paricipants.seed.ts",{"_index":551,"title":{},"body":{"classes/CreateParticipants.html":{},"coverage.html":{}}}],["paricipants.seed.ts:5",{"_index":552,"title":{},"body":{"classes/CreateParticipants.html":{}}}],["parseint(fromglobalid(cursor).id",{"_index":449,"title":{},"body":{"classes/ConnectionArgs.html":{},"miscellaneous/variables.html":{}}}],["parser",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["parseroptions",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["part",{"_index":1650,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["partials",{"_index":1026,"title":{},"body":{"modules/MailModule.html":{}}}],["partialtype",{"_index":1526,"title":{},"body":{"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{}}}],["partialtype(createcompanyinput",{"_index":1527,"title":{},"body":{"classes/UpdateCompanyInput.html":{}}}],["partialtype(createeventinput",{"_index":1530,"title":{},"body":{"classes/UpdateEventInput.html":{}}}],["partialtype(createuserinput",{"_index":1546,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["participant",{"_index":553,"title":{"entities/Participant.html":{}},"body":{"classes/CreateParticipants.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/NotificationsService.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantListResponse.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"coverage.html":{}}}],["participant.event",{"_index":690,"title":{},"body":{"entities/Event.html":{}}}],["participant.event)@joincolumn({name",{"_index":657,"title":{},"body":{"entities/Event.html":{}}}],["participant.user.email",{"_index":1128,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["participant.user.id",{"_index":1126,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["participantbydatelistresponse",{"_index":1152,"title":{"classes/ParticipantByDateListResponse.html":{}},"body":{"classes/ParticipantByDateListResponse.html":{},"coverage.html":{}}}],["participantbydateresponse",{"_index":1156,"title":{"classes/ParticipantByDateResponse.html":{}},"body":{"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"coverage.html":{}}}],["participantlistresponse",{"_index":1161,"title":{"classes/ParticipantListResponse.html":{}},"body":{"classes/ParticipantListResponse.html":{},"classes/ParticipantsResolver.html":{},"coverage.html":{}}}],["participantrate",{"_index":624,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{}}}],["participantrate.event",{"_index":870,"title":{},"body":{"injectables/EventsService.html":{}}}],["participantrate.user",{"_index":871,"title":{},"body":{"injectables/EventsService.html":{}}}],["participantremove",{"_index":1253,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["participantrepository",{"_index":1221,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participantresponse",{"_index":1164,"title":{"classes/ParticipantResponse.html":{}},"body":{"classes/ParticipantResponse.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"coverage.html":{}}}],["participants",{"_index":625,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/NotificationsService.html":{},"entities/Participant.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{}}}],["participants.${field",{"_index":1262,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants.andwhere",{"_index":1257,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants.andwhere('(participants.event",{"_index":1258,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants.andwhere('(participants.type",{"_index":1260,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants.andwhere('(participants.user",{"_index":1259,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants.count",{"_index":1275,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants.event",{"_index":885,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{}}}],["participants.getmany",{"_index":1263,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants.map",{"_index":1274,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants.orderby",{"_index":1261,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants.resolver",{"_index":1181,"title":{},"body":{"modules/ParticipantsModule.html":{}}}],["participants.service",{"_index":1178,"title":{},"body":{"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{}}}],["participants.user",{"_index":886,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{}}}],["participants/entities/participant.entity",{"_index":554,"title":{},"body":{"classes/CreateParticipants.html":{},"entities/Event.html":{},"injectables/EventsService.html":{}}}],["participants/participants.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/RatingsModule.html":{}}}],["participants/participants.service",{"_index":1361,"title":{},"body":{"injectables/RatingsService.html":{}}}],["participantsbydate",{"_index":1184,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["participantsbydate(eventid",{"_index":1190,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["participantservice",{"_index":1085,"title":{},"body":{"injectables/NotificationsService.html":{},"classes/ParticipantsResolver.html":{}}}],["participantsevents",{"_index":1185,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["participantsevents(args",{"_index":1192,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["participantsmapped",{"_index":1264,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participantsmodule",{"_index":100,"title":{"modules/ParticipantsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules.html":{},"overview.html":{}}}],["participantsresolver",{"_index":1180,"title":{"classes/ParticipantsResolver.html":{}},"body":{"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"coverage.html":{}}}],["participantsservice",{"_index":1086,"title":{"injectables/ParticipantsService.html":{}},"body":{"injectables/NotificationsService.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"coverage.html":{},"overview.html":{}}}],["participantupdate",{"_index":1169,"title":{"classes/ParticipantUpdate.html":{}},"body":{"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"coverage.html":{}}}],["participantupdate.eventid",{"_index":1204,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["participantupdate.type",{"_index":1205,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["participate",{"_index":1244,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["participateinevent",{"_index":1186,"title":{},"body":{"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{}}}],["participateinevent(eventid",{"_index":1233,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participateinevent(user",{"_index":1194,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["participationtype",{"_index":1145,"title":{},"body":{"entities/Participant.html":{},"classes/ParticipantUpdate.html":{},"miscellaneous/enumerations.html":{}}}],["party",{"_index":683,"title":{},"body":{"entities/Event.html":{},"miscellaneous/enumerations.html":{}}}],["pass",{"_index":990,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/MailModule.html":{}}}],["passport",{"_index":972,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":969,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":974,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserInput.html":{},"classes/LoginUserInput.html":{},"injectables/MailService.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["password.input",{"_index":1418,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["password.input.ts",{"_index":1399,"title":{},"body":{"classes/ResetPasswordInput.html":{},"coverage.html":{}}}],["password.input.ts:6",{"_index":1400,"title":{},"body":{"classes/ResetPasswordInput.html":{}}}],["past",{"_index":908,"title":{},"body":{"injectables/EventsService.html":{},"miscellaneous/typealiases.html":{}}}],["path",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["photography",{"_index":572,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["pl",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["port",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["postalcode",{"_index":503,"title":{},"body":{"classes/CreateEventAddressInput.html":{},"entities/EventAddress.html":{}}}],["precision",{"_index":646,"title":{},"body":{"entities/Event.html":{},"entities/UserActivity.html":{}}}],["preparedata",{"_index":1478,"title":{},"body":{"injectables/TokenService.html":{}}}],["preparedata(userid",{"_index":1486,"title":{},"body":{"injectables/TokenService.html":{}}}],["pretter",{"_index":1911,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":387,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":389,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["private",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"injectables/EventsService.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/TagsService.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{}}}],["process.env.database_host",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.database_name",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.database_password",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.database_username",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.encryption_iv",{"_index":1491,"title":{},"body":{"injectables/TokenService.html":{}}}],["process.env.encryption_key",{"_index":1493,"title":{},"body":{"injectables/TokenService.html":{}}}],["process.env.host_domain",{"_index":1054,"title":{},"body":{"injectables/MailService.html":{}}}],["process.env.jwt_secret",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":1936,"title":{},"body":{"index.html":{}}}],["promise",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"classes/EventsResolver.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateUserInput.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/LoginUserInput.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"injectables/TokenService.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"classes/isValid.html":{}}}],["providers",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":394,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"classes/PageData.html":{}}}],["qb",{"_index":857,"title":{},"body":{"injectables/EventsService.html":{}}}],["qb.andwhere('p.type",{"_index":858,"title":{},"body":{"injectables/EventsService.html":{}}}],["query",{"_index":30,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}}}],["query(`select",{"_index":1268,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["query(undefined",{"_index":743,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/TagsResolver.html":{},"classes/UsersResolver.html":{}}}],["query(undefined)@useguards(gqlauthguard",{"_index":217,"title":{},"body":{"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{}}}],["queryresolver",{"_index":120,"title":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}},"body":{"modules/AppModule.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"coverage.html":{}}}],["radians",{"_index":899,"title":{},"body":{"injectables/EventsService.html":{}}}],["radians(${latitude",{"_index":898,"title":{},"body":{"injectables/EventsService.html":{}}}],["radians(${longitude",{"_index":902,"title":{},"body":{"injectables/EventsService.html":{}}}],["randombytes",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["randombytes(100).tostring('hex",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["randomstring",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["randomtokenstring",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["rate",{"_index":626,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/MailService.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"injectables/RatingsService.html":{},"entities/UserActivity.html":{},"injectables/UserActivityService.html":{},"miscellaneous/enumerations.html":{}}}],["rateevent",{"_index":1322,"title":{},"body":{"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{}}}],["rateevent(eventid",{"_index":1353,"title":{},"body":{"injectables/RatingsService.html":{}}}],["rateevent(user",{"_index":1327,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["rateremove",{"_index":1377,"title":{},"body":{"injectables/RatingsService.html":{}}}],["rateresponse",{"_index":1370,"title":{},"body":{"injectables/RatingsService.html":{}}}],["rating",{"_index":654,"title":{"entities/Rating.html":{}},"body":{"entities/Event.html":{},"injectables/EventsService.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"coverage.html":{}}}],["rating.rate",{"_index":1392,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratinglistresponse",{"_index":1304,"title":{"classes/RatingListResponse.html":{}},"body":{"classes/RatingListResponse.html":{},"classes/RatingsResolver.html":{},"coverage.html":{}}}],["ratingrepository",{"_index":1347,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratingresponse",{"_index":1308,"title":{"classes/RatingResponse.html":{}},"body":{"classes/RatingResponse.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"coverage.html":{}}}],["ratings",{"_index":1301,"title":{},"body":{"entities/Rating.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{}}}],["ratings.andwhere",{"_index":1383,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratings.andwhere('(ratings.event",{"_index":1385,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratings.andwhere('(ratings.user",{"_index":1384,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratings.event",{"_index":1382,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratings.getmany",{"_index":1387,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratings.orderby(`ratings.${field",{"_index":1386,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratings.resolver",{"_index":1318,"title":{},"body":{"modules/RatingsModule.html":{}}}],["ratings.service",{"_index":1319,"title":{},"body":{"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{}}}],["ratings.take(limit).skip(offset).getmany",{"_index":1389,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratings.user",{"_index":1381,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratings/entities/rating.entity",{"_index":677,"title":{},"body":{"entities/Event.html":{}}}],["ratings/ratings.module",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["ratingsevents",{"_index":1323,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["ratingsevents(args",{"_index":1329,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["ratingsmapped",{"_index":1388,"title":{},"body":{"injectables/RatingsService.html":{}}}],["ratingsmodule",{"_index":101,"title":{"modules/RatingsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RatingsModule.html":{},"modules.html":{},"overview.html":{}}}],["ratingsresolver",{"_index":1317,"title":{"classes/RatingsResolver.html":{}},"body":{"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"coverage.html":{}}}],["ratingsservice",{"_index":1315,"title":{"injectables/RatingsService.html":{}},"body":{"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"coverage.html":{},"overview.html":{}}}],["ratingupdate",{"_index":1309,"title":{"classes/RatingUpdate.html":{}},"body":{"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"coverage.html":{}}}],["ratingupdate.eventid",{"_index":1337,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["ratingupdate.rate",{"_index":1338,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["raw",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":54,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["records",{"_index":771,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{}}}],["records.events",{"_index":773,"title":{},"body":{"classes/EventsResolver.html":{}}}],["records.participants",{"_index":1211,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["records.ratings",{"_index":1340,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["records.totalrecords.length",{"_index":775,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{}}}],["referencedcolumnname",{"_index":381,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/UserActivity.html":{}}}],["reflect",{"_index":1873,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":68,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["refresh(user",{"_index":213,"title":{},"body":{"classes/AuthResolver.html":{}}}],["refreshlogintoken",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshlogintoken(user",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":10,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"classes/isValid.html":{}}}],["refreshtoken.token",{"_index":71,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["refreshtokenexpires",{"_index":1551,"title":{},"body":{"entities/User.html":{}}}],["refreshusertoken",{"_index":41,"title":{"classes/RefreshUserToken.html":{}},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/RefreshUserToken.html":{},"coverage.html":{},"classes/isValid.html":{}}}],["register",{"_index":1051,"title":{},"body":{"injectables/MailService.html":{}}}],["registerenumtype",{"_index":678,"title":{},"body":{"entities/Event.html":{},"entities/Participant.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["registerenumtype(actiontype",{"_index":1596,"title":{},"body":{"entities/UserActivity.html":{}}}],["registerenumtype(eventtype",{"_index":685,"title":{},"body":{"entities/Event.html":{},"entities/Tag.html":{},"entities/UserActivity.html":{}}}],["registerenumtype(participationtype",{"_index":1151,"title":{},"body":{"entities/Participant.html":{}}}],["registerenumtype(sex",{"_index":1578,"title":{},"body":{"entities/User.html":{}}}],["relations",{"_index":879,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/UsersService.html":{}}}],["relay",{"_index":430,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"dependencies.html":{}}}],["relaytypes",{"_index":712,"title":{},"body":{"classes/EventResponse.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/RatingListResponse.html":{},"classes/UserResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["relaytypes(event",{"_index":715,"title":{},"body":{"classes/EventResponse.html":{}}}],["relaytypes(rating",{"_index":1307,"title":{},"body":{"classes/RatingListResponse.html":{}}}],["relaytypes(type",{"_index":1892,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relaytypes(user",{"_index":1697,"title":{},"body":{"classes/UserResponse.html":{}}}],["remove",{"_index":793,"title":{},"body":{"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["remove(eventid",{"_index":817,"title":{},"body":{"injectables/EventsService.html":{}}}],["remove(id",{"_index":1743,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeevent",{"_index":733,"title":{},"body":{"classes/EventsResolver.html":{}}}],["removeevent(@args('id",{"_index":787,"title":{},"body":{"classes/EventsResolver.html":{}}}],["removeevent(eventid",{"_index":750,"title":{},"body":{"classes/EventsResolver.html":{}}}],["removeratefromevent",{"_index":1344,"title":{},"body":{"injectables/RatingsService.html":{}}}],["removeratefromevent(user",{"_index":1355,"title":{},"body":{"injectables/RatingsService.html":{}}}],["removeuser",{"_index":1707,"title":{},"body":{"classes/UsersResolver.html":{}}}],["removeuser(@args('id",{"_index":1433,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["removeuser(id",{"_index":1723,"title":{},"body":{"classes/UsersResolver.html":{}}}],["removeuserfromevent",{"_index":1218,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["removeuserfromevent(user",{"_index":1235,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["repository",{"_index":329,"title":{},"body":{"injectables/CompaniesService.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/TagsService.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":984,"title":{},"body":{"classes/LocalAuthGuard.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["req.body",{"_index":986,"title":{},"body":{"classes/LocalAuthGuard.html":{}}}],["req.headers['accept",{"_index":1287,"title":{},"body":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["request",{"_index":982,"title":{},"body":{"classes/LocalAuthGuard.html":{}}}],["requests",{"_index":1907,"title":{},"body":{"index.html":{}}}],["reset",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":1435,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["resetpassword(email",{"_index":1745,"title":{},"body":{"injectables/UsersService.html":{}}}],["resetpassword(resetpasswordinput",{"_index":1725,"title":{},"body":{"classes/UsersResolver.html":{}}}],["resetpasswordexpires",{"_index":1552,"title":{},"body":{"entities/User.html":{}}}],["resetpasswordinput",{"_index":1397,"title":{"classes/ResetPasswordInput.html":{}},"body":{"classes/ResetPasswordInput.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["resetpasswordtoken",{"_index":1553,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["resetpasswordtoken(resetpasswordtoken",{"_index":1747,"title":{},"body":{"injectables/UsersService.html":{}}}],["resetpasswordtoken.token",{"_index":1783,"title":{},"body":{"injectables/UsersService.html":{}}}],["resetpasswordtokeninput",{"_index":1401,"title":{"classes/ResetPasswordTokenInput.html":{}},"body":{"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["resetresponse",{"_index":1407,"title":{"classes/ResetResponse.html":{}},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["resolve",{"_index":1278,"title":{},"body":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["resolve(context",{"_index":1279,"title":{},"body":{"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["resolver",{"_index":29,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}}}],["resolvers",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["response.input",{"_index":1200,"title":{},"body":{"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{}}}],["response.input.ts",{"_index":1165,"title":{},"body":{"classes/ParticipantResponse.html":{},"classes/RatingResponse.html":{},"coverage.html":{}}}],["response.input.ts:11",{"_index":1168,"title":{},"body":{"classes/ParticipantResponse.html":{},"classes/RatingResponse.html":{}}}],["response.input.ts:14",{"_index":1167,"title":{},"body":{"classes/ParticipantResponse.html":{},"classes/RatingResponse.html":{}}}],["response.input.ts:8",{"_index":1166,"title":{},"body":{"classes/ParticipantResponse.html":{},"classes/RatingResponse.html":{}}}],["result",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["results",{"_index":75,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/isValid.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":64,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/ConnectionArgs.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":211,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/ConnectionArgs.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1876,"title":{},"body":{"dependencies.html":{}}}],["round",{"_index":894,"title":{},"body":{"injectables/EventsService.html":{}}}],["run",{"_index":485,"title":{},"body":{"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"index.html":{}}}],["run(factory",{"_index":486,"title":{},"body":{"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{}}}],["runing",{"_index":583,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":1931,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1878,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1948,"title":{},"body":{"index.html":{}}}],["salt",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["save.input",{"_index":1644,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["save.input.ts",{"_index":1608,"title":{},"body":{"classes/UserActivitySave.html":{},"coverage.html":{}}}],["save.input.ts:12",{"_index":1609,"title":{},"body":{"classes/UserActivitySave.html":{}}}],["save.input.ts:15",{"_index":1611,"title":{},"body":{"classes/UserActivitySave.html":{}}}],["save.input.ts:18",{"_index":1610,"title":{},"body":{"classes/UserActivitySave.html":{}}}],["save.input.ts:21",{"_index":1612,"title":{},"body":{"classes/UserActivitySave.html":{}}}],["save.input.ts:24",{"_index":1614,"title":{},"body":{"classes/UserActivitySave.html":{}}}],["save.input.ts:9",{"_index":1613,"title":{},"body":{"classes/UserActivitySave.html":{}}}],["saveaddress",{"_index":794,"title":{},"body":{"injectables/EventsService.html":{}}}],["saveaddress(event",{"_index":819,"title":{},"body":{"injectables/EventsService.html":{}}}],["savedistanceserchedquery",{"_index":1620,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["savedistanceserchedquery(userid",{"_index":1635,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["saveeventview",{"_index":1621,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["saveeventview(user",{"_index":1637,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["saveparticipantactivity",{"_index":1622,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["saveparticipantactivity(type",{"_index":1639,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["saverateactivity",{"_index":1623,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["saverateactivity(rate",{"_index":1641,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["saverefreshtoken",{"_index":1731,"title":{},"body":{"injectables/UsersService.html":{}}}],["saverefreshtoken(userid",{"_index":1749,"title":{},"body":{"injectables/UsersService.html":{}}}],["savevisit",{"_index":795,"title":{},"body":{"injectables/EventsService.html":{}}}],["savevisit(searchedevent",{"_index":821,"title":{},"body":{"injectables/EventsService.html":{}}}],["scale",{"_index":647,"title":{},"body":{"entities/Event.html":{},"entities/UserActivity.html":{}}}],["schedulemodule",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":1084,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["score",{"_index":627,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{}}}],["searchedevent",{"_index":823,"title":{},"body":{"injectables/EventsService.html":{}}}],["searchedevent.id",{"_index":940,"title":{},"body":{"injectables/EventsService.html":{}}}],["searcheduser",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["searcheduser.refreshtokenexpires",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":979,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1015,"title":{},"body":{"modules/MailModule.html":{}}}],["seeder",{"_index":484,"title":{},"body":{"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{}}}],["seeders",{"_index":1902,"title":{},"body":{"index.html":{}}}],["seeding",{"_index":492,"title":{},"body":{"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"dependencies.html":{}}}],["select",{"_index":689,"title":{},"body":{"entities/Event.html":{}}}],["sendinterestedusermail",{"_index":1029,"title":{},"body":{"injectables/MailService.html":{},"injectables/NotificationsService.html":{}}}],["sendinterestedusermail(email",{"_index":1037,"title":{},"body":{"injectables/MailService.html":{}}}],["sendinterestedusermail(event",{"_index":1095,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendinterestedusermail.start",{"_index":1119,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendrateusermail",{"_index":1030,"title":{},"body":{"injectables/MailService.html":{}}}],["sendrateusermail(email",{"_index":1039,"title":{},"body":{"injectables/MailService.html":{}}}],["sendtakepartusermail",{"_index":1031,"title":{},"body":{"injectables/MailService.html":{},"injectables/NotificationsService.html":{}}}],["sendtakepartusermail(email",{"_index":1041,"title":{},"body":{"injectables/MailService.html":{}}}],["sendtakepartusermail(event",{"_index":1097,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["sendtakepartusermail.start",{"_index":1120,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["senduserrateeventmail",{"_index":1082,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["senduserrateeventmail(event",{"_index":1099,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["senduserrateeventmail.start",{"_index":1121,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["senduserregisterconfirmation",{"_index":1032,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserregisterconfirmation(email",{"_index":1043,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserresetpassword",{"_index":1033,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserresetpassword(email",{"_index":1045,"title":{},"body":{"injectables/MailService.html":{}}}],["server",{"_index":1849,"title":{},"body":{"dependencies.html":{}}}],["set",{"_index":938,"title":{},"body":{"injectables/EventsService.html":{},"injectables/UserActivityService.html":{},"index.html":{}}}],["sex",{"_index":1535,"title":{},"body":{"classes/UpdateUserInput.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["sign",{"_index":1497,"title":{},"body":{"injectables/TokenService.html":{}}}],["signoptions",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["sin",{"_index":903,"title":{},"body":{"injectables/EventsService.html":{}}}],["skip",{"_index":1760,"title":{},"body":{"injectables/UsersService.html":{}}}],["skip(offset",{"_index":1266,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["slicestart",{"_index":779,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["social",{"_index":684,"title":{},"body":{"entities/Event.html":{},"miscellaneous/enumerations.html":{}}}],["someobject",{"_index":1997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sort",{"_index":421,"title":{},"body":{"classes/ConnectionArgs.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["sortschema",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"modules/CompaniesModule.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventResponse.html":{},"modules/EventsModule.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"modules/RatingsModule.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateCompanyInput.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["sport",{"_index":560,"title":{},"body":{"classes/CreateTags.html":{},"entities/Event.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sportscenetr",{"_index":581,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["src/.../connection.args.ts",{"_index":1890,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../current",{"_index":1966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../event.entity.ts",{"_index":1885,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../ievents.ts",{"_index":1961,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1889,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../participant.entity.ts",{"_index":1886,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../relay.types.ts",{"_index":1891,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../token.ts",{"_index":1968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":1887,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../useractivity.entity.ts",{"_index":1884,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module.ts",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.resolver.ts",{"_index":6,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"coverage.html":{},"classes/isValid.html":{}}}],["src/auth/auth.resolver.ts:21",{"_index":18,"title":{},"body":{"classes/AccessToken.html":{}}}],["src/auth/auth.resolver.ts:24",{"_index":21,"title":{},"body":{"classes/AccessToken.html":{}}}],["src/auth/auth.resolver.ts:27",{"_index":20,"title":{},"body":{"classes/AccessToken.html":{}}}],["src/auth/auth.resolver.ts:30",{"_index":22,"title":{},"body":{"classes/AccessToken.html":{}}}],["src/auth/auth.resolver.ts:35",{"_index":1950,"title":{},"body":{"classes/isValid.html":{}}}],["src/auth/auth.resolver.ts:39",{"_index":205,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/auth/auth.resolver.ts:44",{"_index":210,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/auth/auth.resolver.ts:54",{"_index":215,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/auth/auth.resolver.ts:63",{"_index":218,"title":{},"body":{"classes/AuthResolver.html":{}}}],["src/auth/auth.service.ts",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:106",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:114",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:122",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:15",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:76",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/current",{"_index":315,"title":{},"body":{"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login",{"_index":998,"title":{},"body":{"classes/LoginUserInput.html":{},"coverage.html":{}}}],["src/auth/dto/refresh",{"_index":1394,"title":{},"body":{"classes/RefreshUserToken.html":{},"coverage.html":{}}}],["src/auth/guards/gql",{"_index":316,"title":{},"body":{"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/GqlAuthGuard.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":981,"title":{},"body":{"classes/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":962,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:18",{"_index":967,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:9",{"_index":964,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":988,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:17",{"_index":991,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:9",{"_index":989,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/companies/companies.module.ts",{"_index":294,"title":{},"body":{"modules/CompaniesModule.html":{}}}],["src/companies/companies.resolver.ts",{"_index":301,"title":{},"body":{"classes/CompaniesResolver.html":{},"coverage.html":{}}}],["src/companies/companies.resolver.ts:12",{"_index":306,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["src/companies/companies.resolver.ts:17",{"_index":309,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["src/companies/companies.resolver.ts:27",{"_index":314,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["src/companies/companies.resolver.ts:37",{"_index":311,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["src/companies/companies.service.ts",{"_index":324,"title":{},"body":{"injectables/CompaniesService.html":{},"coverage.html":{}}}],["src/companies/companies.service.ts:11",{"_index":330,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/companies.service.ts:18",{"_index":333,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/companies.service.ts:30",{"_index":335,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/companies.service.ts:41",{"_index":337,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["src/companies/dto/create",{"_index":473,"title":{},"body":{"classes/CreateCompanyInput.html":{},"coverage.html":{}}}],["src/companies/dto/update",{"_index":1525,"title":{},"body":{"classes/UpdateCompanyInput.html":{},"coverage.html":{}}}],["src/companies/entities/company.entity",{"_index":1575,"title":{},"body":{"entities/User.html":{}}}],["src/companies/entities/company.entity.ts",{"_index":360,"title":{},"body":{"entities/Company.html":{},"coverage.html":{}}}],["src/companies/entities/company.entity.ts:20",{"_index":374,"title":{},"body":{"entities/Company.html":{}}}],["src/companies/entities/company.entity.ts:24",{"_index":375,"title":{},"body":{"entities/Company.html":{}}}],["src/companies/entities/company.entity.ts:28",{"_index":368,"title":{},"body":{"entities/Company.html":{}}}],["src/companies/entities/company.entity.ts:32",{"_index":383,"title":{},"body":{"entities/Company.html":{}}}],["src/companies/entities/company.entity.ts:36",{"_index":369,"title":{},"body":{"entities/Company.html":{}}}],["src/companies/entities/company.entity.ts:40",{"_index":376,"title":{},"body":{"entities/Company.html":{}}}],["src/companies/entities/company.entity.ts:44",{"_index":382,"title":{},"body":{"entities/Company.html":{}}}],["src/companies/entities/company.entity.ts:47",{"_index":372,"title":{},"body":{"entities/Company.html":{}}}],["src/companies/entities/company.entity.ts:50",{"_index":378,"title":{},"body":{"entities/Company.html":{}}}],["src/database/seeds/create",{"_index":481,"title":{},"body":{"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/events/dto/create",{"_index":496,"title":{},"body":{"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"coverage.html":{}}}],["src/events/dto/event.response.ts",{"_index":711,"title":{},"body":{"classes/EventResponse.html":{},"coverage.html":{}}}],["src/events/dto/update",{"_index":1528,"title":{},"body":{"classes/UpdateEventInput.html":{},"coverage.html":{}}}],["src/events/entities/event",{"_index":692,"title":{},"body":{"entities/EventAddress.html":{},"coverage.html":{}}}],["src/events/entities/event.entity",{"_index":548,"title":{},"body":{"classes/CreateEvents.html":{},"classes/CreateTags.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"entities/Participant.html":{},"classes/ParticipantResponse.html":{},"injectables/ParticipantsService.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"injectables/RatingsService.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{}}}],["src/events/entities/event.entity.ts",{"_index":619,"title":{},"body":{"entities/Event.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/events/entities/event.entity.ts:102",{"_index":643,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:105",{"_index":629,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:108",{"_index":671,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:113",{"_index":658,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:117",{"_index":638,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:120",{"_index":641,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:124",{"_index":661,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:128",{"_index":668,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:131",{"_index":639,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:134",{"_index":651,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:137",{"_index":655,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:141",{"_index":676,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:38",{"_index":640,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:43",{"_index":675,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:47",{"_index":669,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:51",{"_index":631,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:55",{"_index":670,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:58",{"_index":666,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:62",{"_index":664,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:66",{"_index":635,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:70",{"_index":653,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:74",{"_index":649,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:78",{"_index":650,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:88",{"_index":633,"title":{},"body":{"entities/Event.html":{}}}],["src/events/entities/event.entity.ts:98",{"_index":663,"title":{},"body":{"entities/Event.html":{}}}],["src/events/events.module",{"_index":1179,"title":{},"body":{"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{}}}],["src/events/events.module.ts",{"_index":721,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/events/events.resolver.ts",{"_index":730,"title":{},"body":{"classes/EventsResolver.html":{},"coverage.html":{}}}],["src/events/events.resolver.ts:111",{"_index":758,"title":{},"body":{"classes/EventsResolver.html":{}}}],["src/events/events.resolver.ts:144",{"_index":747,"title":{},"body":{"classes/EventsResolver.html":{}}}],["src/events/events.resolver.ts:150",{"_index":754,"title":{},"body":{"classes/EventsResolver.html":{}}}],["src/events/events.resolver.ts:163",{"_index":751,"title":{},"body":{"classes/EventsResolver.html":{}}}],["src/events/events.resolver.ts:17",{"_index":738,"title":{},"body":{"classes/EventsResolver.html":{}}}],["src/events/events.resolver.ts:22",{"_index":740,"title":{},"body":{"classes/EventsResolver.html":{}}}],["src/events/events.resolver.ts:30",{"_index":749,"title":{},"body":{"classes/EventsResolver.html":{}}}],["src/events/events.resolver.ts:38",{"_index":744,"title":{},"body":{"classes/EventsResolver.html":{}}}],["src/events/events.resolver.ts:76",{"_index":756,"title":{},"body":{"classes/EventsResolver.html":{}}}],["src/events/events.service",{"_index":1238,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["src/events/events.service.ts",{"_index":789,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{}}}],["src/events/events.service.ts:136",{"_index":816,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:143",{"_index":810,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:25",{"_index":802,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:304",{"_index":826,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:336",{"_index":818,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:347",{"_index":820,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:354",{"_index":828,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:362",{"_index":830,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:373",{"_index":822,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:38",{"_index":805,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:384",{"_index":813,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:54",{"_index":815,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:68",{"_index":807,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/ievents.ts",{"_index":1962,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/i18n/queryresolver.ts",{"_index":1277,"title":{},"body":{"injectables/QueryResolver.html":{},"coverage.html":{}}}],["src/i18n/queryresolver.ts:6",{"_index":1280,"title":{},"body":{"injectables/QueryResolver.html":{}}}],["src/mail/mail.module",{"_index":1077,"title":{},"body":{"modules/NotificationsModule.html":{},"modules/UsersModule.html":{}}}],["src/mail/mail.module.ts",{"_index":1003,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service",{"_index":1103,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["src/mail/mail.service.ts",{"_index":1028,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:12",{"_index":1044,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:28",{"_index":1046,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:41",{"_index":1038,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:54",{"_index":1042,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:6",{"_index":1036,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:67",{"_index":1040,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1806,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/notifications/notifications.module",{"_index":728,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/notifications/notifications.module.ts",{"_index":1074,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/notifications/notifications.service",{"_index":833,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/notifications/notifications.service.ts",{"_index":1078,"title":{},"body":{"injectables/NotificationsService.html":{},"coverage.html":{}}}],["src/notifications/notifications.service.ts:10",{"_index":1087,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:107",{"_index":1091,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:18",{"_index":1089,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:69",{"_index":1093,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:73",{"_index":1096,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:86",{"_index":1098,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:96",{"_index":1100,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/pagination/types/connection.args",{"_index":761,"title":{},"body":{"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["src/pagination/types/connection.args.ts",{"_index":391,"title":{},"body":{"classes/ConnectionArgs.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/pagination/types/connection.args.ts:101",{"_index":415,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:104",{"_index":416,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:107",{"_index":420,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:110",{"_index":422,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:113",{"_index":414,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:116",{"_index":417,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:119",{"_index":418,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:121",{"_index":425,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:124",{"_index":424,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:127",{"_index":423,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:95",{"_index":413,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/connection.args.ts:98",{"_index":412,"title":{},"body":{"classes/ConnectionArgs.html":{}}}],["src/pagination/types/page",{"_index":1132,"title":{},"body":{"classes/PageData.html":{},"coverage.html":{}}}],["src/pagination/types/relay.types",{"_index":713,"title":{},"body":{"classes/EventResponse.html":{},"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/RatingListResponse.html":{},"classes/UserResponse.html":{}}}],["src/pagination/types/relay.types.ts",{"_index":1813,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/participants/dto/participant",{"_index":1153,"title":{},"body":{"classes/ParticipantByDateListResponse.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantListResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"coverage.html":{}}}],["src/participants/entities/participant.entity.ts",{"_index":1137,"title":{},"body":{"entities/Participant.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/participants/entities/participant.entity.ts:31",{"_index":1144,"title":{},"body":{"entities/Participant.html":{}}}],["src/participants/entities/participant.entity.ts:36",{"_index":1148,"title":{},"body":{"entities/Participant.html":{}}}],["src/participants/entities/participant.entity.ts:41",{"_index":1143,"title":{},"body":{"entities/Participant.html":{}}}],["src/participants/entities/participant.entity.ts:45",{"_index":1146,"title":{},"body":{"entities/Participant.html":{}}}],["src/participants/entities/participant.entity.ts:48",{"_index":1138,"title":{},"body":{"entities/Participant.html":{}}}],["src/participants/entities/participant.entity.ts:51",{"_index":1140,"title":{},"body":{"entities/Participant.html":{}}}],["src/participants/entities/participant.entity.ts:54",{"_index":1139,"title":{},"body":{"entities/Participant.html":{}}}],["src/participants/entities/participant.entity.ts:57",{"_index":1147,"title":{},"body":{"entities/Participant.html":{}}}],["src/participants/participants.module",{"_index":1075,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/participants/participants.module.ts",{"_index":1177,"title":{},"body":{"modules/ParticipantsModule.html":{}}}],["src/participants/participants.resolver.ts",{"_index":1183,"title":{},"body":{"classes/ParticipantsResolver.html":{},"coverage.html":{}}}],["src/participants/participants.resolver.ts:16",{"_index":1189,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["src/participants/participants.resolver.ts:21",{"_index":1195,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["src/participants/participants.resolver.ts:33",{"_index":1193,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["src/participants/participants.resolver.ts:65",{"_index":1198,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["src/participants/participants.resolver.ts:95",{"_index":1191,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["src/participants/participants.service",{"_index":1101,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/participants/participants.service.ts",{"_index":1214,"title":{},"body":{"injectables/ParticipantsService.html":{},"coverage.html":{}}}],["src/participants/participants.service.ts:110",{"_index":1236,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participants.service.ts:117",{"_index":1228,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participants.service.ts:174",{"_index":1230,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participants.service.ts:20",{"_index":1220,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participants.service.ts:30",{"_index":1234,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participants.service.ts:57",{"_index":1223,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participants.service.ts:66",{"_index":1225,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participants.service.ts:78",{"_index":1227,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participants.service.ts:85",{"_index":1232,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participants.service.ts:92",{"_index":1237,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/ratings/dto/rating",{"_index":1305,"title":{},"body":{"classes/RatingListResponse.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"coverage.html":{}}}],["src/ratings/entities/rating.entity",{"_index":834,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/ratings/entities/rating.entity.ts",{"_index":1291,"title":{},"body":{"entities/Rating.html":{},"coverage.html":{}}}],["src/ratings/entities/rating.entity.ts:22",{"_index":1294,"title":{},"body":{"entities/Rating.html":{}}}],["src/ratings/entities/rating.entity.ts:27",{"_index":1298,"title":{},"body":{"entities/Rating.html":{}}}],["src/ratings/entities/rating.entity.ts:32",{"_index":1293,"title":{},"body":{"entities/Rating.html":{}}}],["src/ratings/entities/rating.entity.ts:38",{"_index":1296,"title":{},"body":{"entities/Rating.html":{}}}],["src/ratings/entities/rating.entity.ts:41",{"_index":1292,"title":{},"body":{"entities/Rating.html":{}}}],["src/ratings/entities/rating.entity.ts:44",{"_index":1297,"title":{},"body":{"entities/Rating.html":{}}}],["src/ratings/ratings.module.ts",{"_index":1316,"title":{},"body":{"modules/RatingsModule.html":{}}}],["src/ratings/ratings.resolver.ts",{"_index":1321,"title":{},"body":{"classes/RatingsResolver.html":{},"coverage.html":{}}}],["src/ratings/ratings.resolver.ts:16",{"_index":1326,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["src/ratings/ratings.resolver.ts:21",{"_index":1328,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["src/ratings/ratings.resolver.ts:33",{"_index":1330,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["src/ratings/ratings.resolver.ts:63",{"_index":1333,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["src/ratings/ratings.service.ts",{"_index":1342,"title":{},"body":{"injectables/RatingsService.html":{},"coverage.html":{}}}],["src/ratings/ratings.service.ts:107",{"_index":1358,"title":{},"body":{"injectables/RatingsService.html":{}}}],["src/ratings/ratings.service.ts:127",{"_index":1357,"title":{},"body":{"injectables/RatingsService.html":{}}}],["src/ratings/ratings.service.ts:134",{"_index":1352,"title":{},"body":{"injectables/RatingsService.html":{}}}],["src/ratings/ratings.service.ts:14",{"_index":1346,"title":{},"body":{"injectables/RatingsService.html":{}}}],["src/ratings/ratings.service.ts:181",{"_index":1360,"title":{},"body":{"injectables/RatingsService.html":{}}}],["src/ratings/ratings.service.ts:24",{"_index":1354,"title":{},"body":{"injectables/RatingsService.html":{}}}],["src/ratings/ratings.service.ts:69",{"_index":1356,"title":{},"body":{"injectables/RatingsService.html":{}}}],["src/ratings/ratings.service.ts:76",{"_index":1349,"title":{},"body":{"injectables/RatingsService.html":{}}}],["src/ratings/ratings.service.ts:85",{"_index":1350,"title":{},"body":{"injectables/RatingsService.html":{}}}],["src/ratings/ratings.service.ts:99",{"_index":1351,"title":{},"body":{"injectables/RatingsService.html":{}}}],["src/tags/entities/tag.entity.ts",{"_index":1441,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/entities/tag.entity.ts:22",{"_index":1443,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entities/tag.entity.ts:26",{"_index":1445,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entities/tag.entity.ts:30",{"_index":1444,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entities/tag.entity.ts:33",{"_index":1442,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/entities/tag.entity.ts:36",{"_index":1446,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.module.ts",{"_index":1450,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/tags/tags.resolver.ts",{"_index":1456,"title":{},"body":{"classes/TagsResolver.html":{},"coverage.html":{}}}],["src/tags/tags.resolver.ts:11",{"_index":1460,"title":{},"body":{"classes/TagsResolver.html":{}}}],["src/tags/tags.resolver.ts:7",{"_index":1458,"title":{},"body":{"classes/TagsResolver.html":{}}}],["src/tags/tags.service.ts",{"_index":1462,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/tags.service.ts:14",{"_index":1468,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tags.service.ts:8",{"_index":1465,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/user",{"_index":727,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"modules/RatingsModule.html":{},"injectables/RatingsService.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/dto/activate",{"_index":78,"title":{},"body":{"classes/ActivateUserInput.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":594,"title":{},"body":{"classes/CreateUserInput.html":{},"coverage.html":{}}}],["src/users/dto/reset",{"_index":1398,"title":{},"body":{"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1531,"title":{},"body":{"classes/UpdateUserInput.html":{},"coverage.html":{}}}],["src/users/dto/user.response.ts",{"_index":1696,"title":{},"body":{"classes/UserResponse.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":32,"title":{},"body":{"classes/AccessToken.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/LocalStrategy.html":{},"entities/Participant.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/isValid.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1549,"title":{},"body":{"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":1562,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":1561,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:36",{"_index":1565,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":1560,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":1563,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:48",{"_index":1566,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":1573,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:56",{"_index":1558,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:59",{"_index":1568,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:62",{"_index":1572,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:65",{"_index":1571,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:68",{"_index":1569,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:71",{"_index":1570,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:75",{"_index":1555,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:78",{"_index":1556,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:81",{"_index":1574,"title":{},"body":{"entities/User.html":{}}}],["src/users/token/token.service.ts",{"_index":1472,"title":{},"body":{"injectables/TokenService.html":{},"coverage.html":{}}}],["src/users/token/token.service.ts:11",{"_index":1485,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/users/token/token.service.ts:29",{"_index":1483,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/users/token/token.service.ts:46",{"_index":1487,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/users/token/token.service.ts:56",{"_index":1489,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/users/token/token.service.ts:64",{"_index":1481,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/users/token/token.service.ts:8",{"_index":1494,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/users/token/token.service.ts:9",{"_index":1492,"title":{},"body":{"injectables/TokenService.html":{}}}],["src/users/users.module",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/UserActivityModule.html":{}}}],["src/users/users.module.ts",{"_index":1702,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.resolver.ts",{"_index":1408,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["src/users/users.resolver.ts:101",{"_index":1713,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:26",{"_index":1409,"title":{},"body":{"classes/ResetResponse.html":{}}}],["src/users/users.resolver.ts:30",{"_index":1708,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:34",{"_index":1715,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:39",{"_index":1711,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:44",{"_index":1720,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:62",{"_index":1722,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:68",{"_index":1718,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:74",{"_index":1728,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:89",{"_index":1724,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.resolver.ts:94",{"_index":1726,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/users/users.service",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"injectables/EventsService.html":{},"injectables/UserActivityService.html":{}}}],["src/users/users.service.ts",{"_index":1729,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:120",{"_index":1748,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":1733,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:163",{"_index":1750,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":1736,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":1737,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":1742,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:60",{"_index":1739,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:64",{"_index":1752,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:69",{"_index":1744,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:75",{"_index":1734,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:98",{"_index":1746,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/token.ts",{"_index":1817,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["staged",{"_index":1915,"title":{},"body":{"index.html":{}}}],["start",{"_index":1933,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1935,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1937,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":519,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/UserActivityService.html":{},"miscellaneous/variables.html":{}}}],["startdate.gettime",{"_index":1664,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["startdate.todate",{"_index":1996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["startdate.toisostring().replace('t",{"_index":942,"title":{},"body":{"injectables/EventsService.html":{}}}],["startdateformated",{"_index":941,"title":{},"body":{"injectables/EventsService.html":{}}}],["started",{"_index":1894,"title":{"index.html":{}},"body":{}}],["state",{"_index":504,"title":{},"body":{"classes/CreateEventAddressInput.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{}}}],["statements",{"_index":1788,"title":{},"body":{"coverage.html":{}}}],["strategies/jwt.strategy",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":971,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strict",{"_index":1025,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":14,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateUserInput.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"injectables/TokenService.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["subject",{"_index":1048,"title":{},"body":{"injectables/MailService.html":{}}}],["sum",{"_index":1391,"title":{},"body":{"injectables/RatingsService.html":{}}}],["super",{"_index":975,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1952,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":1901,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1953,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":466,"title":{},"body":{"classes/ConnectionArgs.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{}}}],["synchronize",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":1827,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1826,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":531,"title":{"entities/Tag.html":{}},"body":{"classes/CreateEventInput.html":{},"classes/CreateTags.html":{},"entities/Event.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tags",{"_index":520,"title":{},"body":{"classes/CreateEventInput.html":{},"classes/CreateTags.html":{},"entities/Event.html":{},"entities/Tag.html":{},"classes/TagsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tags(type",{"_index":1459,"title":{},"body":{"classes/TagsResolver.html":{}}}],["tags.resolver",{"_index":1453,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.seed.ts",{"_index":557,"title":{},"body":{"classes/CreateTags.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tags.seed.ts:35",{"_index":559,"title":{},"body":{"classes/CreateTags.html":{}}}],["tags.service",{"_index":1451,"title":{},"body":{"modules/TagsModule.html":{},"classes/TagsResolver.html":{}}}],["tags/entities/tag.entity",{"_index":537,"title":{},"body":{"classes/CreateEventInput.html":{},"classes/CreateTags.html":{},"entities/Event.html":{}}}],["tags/tags.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["tagsmodule",{"_index":102,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1466,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsresolver",{"_index":1452,"title":{"classes/TagsResolver.html":{}},"body":{"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"coverage.html":{}}}],["tagsservice",{"_index":1449,"title":{"injectables/TagsService.html":{}},"body":{"modules/TagsModule.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":1649,"title":{},"body":{"injectables/UserActivityService.html":{},"injectables/UsersService.html":{}}}],["take(limit",{"_index":1265,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["takepart",{"_index":1066,"title":{},"body":{"injectables/MailService.html":{},"entities/UserActivity.html":{},"miscellaneous/enumerations.html":{}}}],["template",{"_index":1021,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":1023,"title":{},"body":{"modules/MailModule.html":{}}}],["templates/partials",{"_index":1027,"title":{},"body":{"modules/MailModule.html":{}}}],["terminal",{"_index":1922,"title":{},"body":{"index.html":{}}}],["test",{"_index":1940,"title":{},"body":{"index.html":{}}}],["test/.../testhelpers.ts",{"_index":1965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/helpers/testhelpers.ts",{"_index":1818,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test:covgenerate",{"_index":1943,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1942,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1939,"title":{},"body":{"index.html":{}}}],["this.addratetoevent(user",{"_index":1369,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.addusertoevent(user",{"_index":1243,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.authservice.login(user",{"_index":66,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["this.authservice.refreshlogintoken(user",{"_index":70,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["this.authservice.validate(email",{"_index":995,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.checkdatescore(event",{"_index":1659,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["this.companiesservice.create(createcompanyinput",{"_index":320,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["this.companiesservice.findone(user",{"_index":323,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["this.companiesservice.update(updatecompanyinput",{"_index":321,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["this.companyrepository.findone",{"_index":354,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["this.companyrepository.save",{"_index":353,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["this.create(user",{"_index":1246,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["this.createorupdate",{"_index":1657,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["this.createorupdate(user",{"_index":1654,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["this.createrefreshtoken(decoded.id",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.deletealleventjobs(event",{"_index":1117,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.encryptioniv",{"_index":1506,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.encryptionkey",{"_index":1505,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.eventaddressrepository.findone",{"_index":934,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventaddressrepository.save",{"_index":933,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository",{"_index":847,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.findone",{"_index":878,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.remove(event",{"_index":929,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsrepository.save",{"_index":838,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsservice.create(createeventinput",{"_index":764,"title":{},"body":{"classes/EventsResolver.html":{}}}],["this.eventsservice.find(eventid",{"_index":766,"title":{},"body":{"classes/EventsResolver.html":{}}}],["this.eventsservice.findall",{"_index":772,"title":{},"body":{"classes/EventsResolver.html":{}}}],["this.eventsservice.findallforcalendar",{"_index":781,"title":{},"body":{"classes/EventsResolver.html":{}}}],["this.eventsservice.findforedit(eventid",{"_index":783,"title":{},"body":{"classes/EventsResolver.html":{}}}],["this.eventsservice.findone(eventid",{"_index":1240,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["this.eventsservice.remove(eventid",{"_index":788,"title":{},"body":{"classes/EventsResolver.html":{}}}],["this.eventsservice.update",{"_index":785,"title":{},"body":{"classes/EventsResolver.html":{}}}],["this.eventsservice.updaterate(event",{"_index":1393,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.find(user",{"_index":1245,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["this.findbymail(email",{"_index":1775,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findone(eventid",{"_index":843,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.findone(eventid.id",{"_index":935,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.findone(id",{"_index":1763,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findone(user",{"_index":358,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["this.i18n.translate",{"_index":1049,"title":{},"body":{"injectables/MailService.html":{},"injectables/UsersService.html":{}}}],["this.i18n.translate('emails.body.email_verify",{"_index":1057,"title":{},"body":{"injectables/MailService.html":{}}}],["this.i18n.translate('emails.body.email_verify_title",{"_index":1055,"title":{},"body":{"injectables/MailService.html":{}}}],["this.i18n.translate('emails.body.password_reset",{"_index":1059,"title":{},"body":{"injectables/MailService.html":{}}}],["this.i18n.translate('emails.interested.body",{"_index":1064,"title":{},"body":{"injectables/MailService.html":{}}}],["this.i18n.translate('emails.interested.subject",{"_index":1060,"title":{},"body":{"injectables/MailService.html":{}}}],["this.i18n.translate('emails.rate.body",{"_index":1069,"title":{},"body":{"injectables/MailService.html":{}}}],["this.i18n.translate('emails.rate.subject",{"_index":1068,"title":{},"body":{"injectables/MailService.html":{}}}],["this.i18n.translate('emails.reset_password.subject",{"_index":1058,"title":{},"body":{"injectables/MailService.html":{}}}],["this.i18n.translate('emails.take_part.body",{"_index":1067,"title":{},"body":{"injectables/MailService.html":{}}}],["this.i18n.translate('emails.take_part.subject",{"_index":1065,"title":{},"body":{"injectables/MailService.html":{}}}],["this.i18n.translate('errors.error.event_is_not_over",{"_index":1365,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.i18n.translate('errors.error.event_not_found",{"_index":1241,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["this.i18n.translate('errors.error.invalid_email",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.i18n.translate('errors.error.invalid_password",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18n.translate('errors.error.token_not_found",{"_index":1784,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.i18n.translate('errors.error.user_is_not_owner_of_event",{"_index":846,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.i18n.translate('errors.error.user_not_active",{"_index":997,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.i18n.translate('errors.error.user_not_found",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18n.translate('errors.error.user_not_participate_in_event",{"_index":1367,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.jwtservice.sign",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailerservice.sendmail",{"_index":1047,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendinterestedusermail",{"_index":1127,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.mailservice.sendrateusermail(participant.user.email",{"_index":1130,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.mailservice.sendtakepartusermail(participant.user.email",{"_index":1129,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.mailservice.senduserregisterconfirmation(user.email",{"_index":1758,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.mailservice.senduserresetpassword(user.email",{"_index":1781,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.notificationsservice.addnewjob(event",{"_index":842,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.notificationsservice.addnewjob(updatedevent",{"_index":927,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.notificationsservice.deletealleventjobs(event",{"_index":922,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.participantrepository",{"_index":1255,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.create",{"_index":1252,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.find",{"_index":1251,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.findone",{"_index":1250,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.remove(participantremove",{"_index":1254,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.save",{"_index":1248,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantservice.findall",{"_index":1210,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["this.participantservice.findbydate(eventid",{"_index":1213,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["this.participantservice.findmany(event",{"_index":1125,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.participantservice.participateinevent",{"_index":1203,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["this.participantsservice.find(user",{"_index":1366,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.preparedata(userid",{"_index":1500,"title":{},"body":{"injectables/TokenService.html":{}}}],["this.randomtokenstring",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ratingrepository",{"_index":1379,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.ratingrepository.create",{"_index":1376,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.ratingrepository.findandcount",{"_index":1390,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.ratingrepository.findone",{"_index":1375,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.ratingrepository.remove(participantremove",{"_index":1371,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.ratingrepository.remove(rateremove",{"_index":1378,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.ratingrepository.save",{"_index":1372,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.ratingsservice.findall",{"_index":1339,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["this.ratingsservice.rateevent",{"_index":1336,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["this.removeratefromevent(user",{"_index":1368,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.removeuserfromevent(user",{"_index":1242,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.saveaddress",{"_index":839,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.savevisit(searchedevent",{"_index":877,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.schedulerregistry.addcronjob",{"_index":1118,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.schedulerregistry.deletecronjob(`${event.id",{"_index":1131,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.schedulerregistry.deletecronjob(jobname",{"_index":1123,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.sendinterestedusermail(event",{"_index":1111,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.sendtakepartusermail(event",{"_index":1113,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.senduserrateeventmail(event",{"_index":1115,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.tagsrepository.find",{"_index":1470,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.gettypes(type",{"_index":1461,"title":{},"body":{"classes/TagsResolver.html":{}}}],["this.tokenservice.createtoken(user",{"_index":1776,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.tokenservice.decrypt(activateuserinput.token",{"_index":1766,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.tokenservice.encrypt(user.id",{"_index":1757,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.tokenservice.validatedate(decrypted.validitydate",{"_index":1768,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.update(user",{"_index":1247,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["this.updateaddress",{"_index":924,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.updaterate(event",{"_index":1373,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.useractivityrepository",{"_index":1669,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["this.useractivityrepository.save(activity",{"_index":1677,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["this.useractivityservice.saveeventview(user",{"_index":876,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.useractivityservice.saveparticipantactivity(type",{"_index":1249,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.useractivityservice.saverateactivity(rate",{"_index":1374,"title":{},"body":{"injectables/RatingsService.html":{}}}],["this.userservice.findbymail(decoded.email",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbymail(email",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbymail(usersrepository.email",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone(loggeduser",{"_index":891,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.userservice.findone(user.id",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventsService.html":{}}}],["this.userservice.findone(userid",{"_index":844,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.userservice.saverefreshtoken",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.findandcount",{"_index":1759,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1762,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone(decrypted.userid",{"_index":1769,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneorfail",{"_index":1761,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.remove(user",{"_index":1765,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save",{"_index":1764,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(createuserinput",{"_index":1756,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1774,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.activateuser(activateuserinput",{"_index":1423,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["this.usersservice.create(createuserinput",{"_index":1421,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["this.usersservice.findall",{"_index":1425,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["this.usersservice.findbymail(validatepayload.email",{"_index":980,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.findone(user.id",{"_index":1429,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["this.usersservice.findone(userid",{"_index":1427,"title":{},"body":{"classes/ResetResponse.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{}}}],["this.usersservice.remove(id",{"_index":1434,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["this.usersservice.resetpassword(resetpasswordinput.email",{"_index":1437,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["this.usersservice.resetpasswordtoken(resetpasswordtokeninput",{"_index":1440,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["this.usersservice.update",{"_index":1431,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["this.verify(token",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"classes/ConnectionArgs.html":{},"injectables/EventsService.html":{},"injectables/LocalStrategy.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/TokenService.html":{},"injectables/UsersService.html":{}}}],["ti",{"_index":1924,"title":{},"body":{"index.html":{}}}],["title",{"_index":521,"title":{},"body":{"classes/CreateEventInput.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/MailService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["todate",{"_index":1995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["today",{"_index":1364,"title":{},"body":{"injectables/RatingsService.html":{}}}],["token",{"_index":81,"title":{},"body":{"classes/ActivateUserInput.html":{},"injectables/AuthService.html":{},"injectables/MailService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordTokenInput.html":{},"injectables/TokenService.html":{},"injectables/UsersService.html":{}}}],["token.input",{"_index":43,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["token.input.ts",{"_index":1395,"title":{},"body":{"classes/RefreshUserToken.html":{},"classes/ResetPasswordTokenInput.html":{},"coverage.html":{}}}],["token.input.ts:14",{"_index":1405,"title":{},"body":{"classes/ResetPasswordTokenInput.html":{}}}],["token.input.ts:21",{"_index":1404,"title":{},"body":{"classes/ResetPasswordTokenInput.html":{}}}],["token.input.ts:6",{"_index":1396,"title":{},"body":{"classes/RefreshUserToken.html":{}}}],["token.input.ts:7",{"_index":1406,"title":{},"body":{"classes/ResetPasswordTokenInput.html":{}}}],["token/token.service",{"_index":1704,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["tokenisvalid",{"_index":202,"title":{},"body":{"classes/AuthResolver.html":{}}}],["tokenisvalid(@currentuser",{"_index":72,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["tokenisvalid(user",{"_index":216,"title":{},"body":{"classes/AuthResolver.html":{}}}],["tokens",{"_index":1905,"title":{},"body":{"index.html":{}}}],["tokenservice",{"_index":1471,"title":{"injectables/TokenService.html":{}},"body":{"injectables/TokenService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["tools",{"_index":1860,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["totalrecords",{"_index":911,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["training",{"_index":565,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["transformer",{"_index":1852,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":1013,"title":{},"body":{"modules/MailModule.html":{}}}],["travel",{"_index":571,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":74,"title":{},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"classes/ConnectionArgs.html":{},"classes/CreateEventInput.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"modules/MailModule.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/TagsResolver.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{},"miscellaneous/variables.html":{}}}],["true})@column('json",{"_index":667,"title":{},"body":{"entities/Event.html":{}}}],["true})@column('mediumtext",{"_index":1557,"title":{},"body":{"entities/User.html":{}}}],["true})@column({nullable",{"_index":652,"title":{},"body":{"entities/Event.html":{},"entities/EventAddress.html":{},"entities/User.html":{}}}],["true})@column({select",{"_index":662,"title":{},"body":{"entities/Event.html":{}}}],["true})@column({type",{"_index":659,"title":{},"body":{"entities/Event.html":{}}}],["true})@column({unique",{"_index":1564,"title":{},"body":{"entities/User.html":{}}}],["true})@isemail()@length(4",{"_index":1537,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["true})@length(8",{"_index":1542,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["true})@min(0)@max(1",{"_index":1544,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["true})@onetomany(undefined",{"_index":656,"title":{},"body":{"entities/Event.html":{}}}],["true})@onetoone(undefined",{"_index":636,"title":{},"body":{"entities/Event.html":{},"entities/User.html":{}}}],["try",{"_index":928,"title":{},"body":{"injectables/EventsService.html":{},"injectables/TokenService.html":{}}}],["tsconfig.json",{"_index":1947,"title":{},"body":{"index.html":{}}}],["type",{"_index":12,"title":{},"body":{"classes/AccessToken.html":{},"classes/ActivateUserInput.html":{},"modules/AppModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateCompanyInput.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEventAddressInput.html":{},"classes/CreateEventInput.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUserInput.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserInput.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"classes/PageData.html":{},"entities/Participant.html":{},"classes/ParticipantByDateResponse.html":{},"classes/ParticipantResponse.html":{},"classes/ParticipantUpdate.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/QueryResolver.html":{},"injectables/QueryResolver-1.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"classes/RatingUpdate.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetPasswordInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/ResetResponse.html":{},"entities/Tag.html":{},"classes/TagsResolver.html":{},"injectables/TagsService.html":{},"injectables/TokenService.html":{},"classes/UpdateEventInput.html":{},"classes/UpdateUserInput.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/isValid.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1959,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typemap",{"_index":1814,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":339,"title":{},"body":{"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/CreateEventAddress.html":{},"classes/CreateEvents.html":{},"classes/CreateParticipants.html":{},"classes/CreateTags.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"injectables/EventsService.html":{},"entities/Participant.html":{},"injectables/ParticipantsService.html":{},"entities/Rating.html":{},"injectables/RatingsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([company",{"_index":300,"title":{},"body":{"modules/CompaniesModule.html":{}}}],["typeormmodule.forfeature([event",{"_index":729,"title":{},"body":{"modules/EventsModule.html":{}}}],["typeormmodule.forfeature([participant",{"_index":1182,"title":{},"body":{"modules/ParticipantsModule.html":{}}}],["typeormmodule.forfeature([rating",{"_index":1320,"title":{},"body":{"modules/RatingsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1455,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([useractivity",{"_index":1604,"title":{},"body":{"modules/UserActivityModule.html":{}}}],["typeormmodule.forroot",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":1837,"title":{},"body":{"dependencies.html":{}}}],["types/cron",{"_index":1844,"title":{},"body":{"dependencies.html":{}}}],["types/graphql",{"_index":1846,"title":{},"body":{"dependencies.html":{}}}],["u",{"_index":887,"title":{},"body":{"injectables/EventsService.html":{}}}],["u.id",{"_index":888,"title":{},"body":{"injectables/EventsService.html":{}}}],["u2",{"_index":867,"title":{},"body":{"injectables/EventsService.html":{}}}],["u2.id",{"_index":868,"title":{},"body":{"injectables/EventsService.html":{}}}],["u3",{"_index":872,"title":{},"body":{"injectables/EventsService.html":{}}}],["u3.id",{"_index":873,"title":{},"body":{"injectables/EventsService.html":{}}}],["unauthorizedexception",{"_index":992,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConnectionArgs.html":{},"classes/CreateEventInput.html":{},"entities/Event.html":{}}}],["unique",{"_index":1579,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":1938,"title":{},"body":{"index.html":{}}}],["unix",{"_index":767,"title":{},"body":{"classes/EventsResolver.html":{}}}],["unknown",{"_index":212,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/TagsService.html":{},"injectables/UserActivityService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1919,"title":{},"body":{"index.html":{}}}],["update",{"_index":327,"title":{},"body":{"injectables/CompaniesService.html":{},"entities/Event.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/UsersService.html":{}}}],["update(event",{"_index":937,"title":{},"body":{"injectables/EventsService.html":{}}}],["update(id",{"_index":1751,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(updatecompanyinput",{"_index":336,"title":{},"body":{"injectables/CompaniesService.html":{}}}],["update(user",{"_index":825,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["update(useractivity",{"_index":1678,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["update.input",{"_index":1201,"title":{},"body":{"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{}}}],["update.input.ts",{"_index":1170,"title":{},"body":{"classes/ParticipantUpdate.html":{},"classes/RatingUpdate.html":{},"coverage.html":{}}}],["update.input.ts:10",{"_index":1172,"title":{},"body":{"classes/ParticipantUpdate.html":{}}}],["update.input.ts:12",{"_index":1311,"title":{},"body":{"classes/RatingUpdate.html":{}}}],["update.input.ts:7",{"_index":1171,"title":{},"body":{"classes/ParticipantUpdate.html":{},"classes/RatingUpdate.html":{}}}],["updateaddress",{"_index":796,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateaddress(event",{"_index":827,"title":{},"body":{"injectables/EventsService.html":{}}}],["updatecompany",{"_index":304,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["updatecompany(user",{"_index":312,"title":{},"body":{"classes/CompaniesResolver.html":{}}}],["updatecompanyinput",{"_index":313,"title":{"classes/UpdateCompanyInput.html":{}},"body":{"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"classes/UpdateCompanyInput.html":{},"coverage.html":{}}}],["updatedat",{"_index":365,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["updatedatecolumn",{"_index":377,"title":{},"body":{"entities/Company.html":{},"entities/Event.html":{},"entities/EventAddress.html":{},"entities/Participant.html":{},"entities/Rating.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/UserActivity.html":{}}}],["updatedevent",{"_index":923,"title":{},"body":{"injectables/EventsService.html":{}}}],["updatedevent.eventaddress",{"_index":926,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateevent",{"_index":734,"title":{},"body":{"classes/EventsResolver.html":{},"injectables/EventsService.html":{}}}],["updateevent(user",{"_index":752,"title":{},"body":{"classes/EventsResolver.html":{}}}],["updateevent.rate",{"_index":936,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventinput",{"_index":753,"title":{"classes/UpdateEventInput.html":{}},"body":{"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/UpdateEventInput.html":{},"coverage.html":{}}}],["updateeventinput.eventaddress",{"_index":925,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateeventinput.id",{"_index":786,"title":{},"body":{"classes/EventsResolver.html":{}}}],["updaterate",{"_index":797,"title":{},"body":{"injectables/EventsService.html":{},"injectables/RatingsService.html":{}}}],["updaterate(event",{"_index":1359,"title":{},"body":{"injectables/RatingsService.html":{}}}],["updaterate(eventid",{"_index":829,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateuser",{"_index":1430,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["updateuser(user",{"_index":1727,"title":{},"body":{"classes/UsersResolver.html":{}}}],["updateuserinput",{"_index":1412,"title":{"classes/UpdateUserInput.html":{}},"body":{"classes/ResetResponse.html":{},"classes/UpdateUserInput.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserinput.id",{"_index":1432,"title":{},"body":{"classes/ResetResponse.html":{},"classes/UsersResolver.html":{}}}],["use",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"classes/ConnectionArgs.html":{}}}],["usefactory",{"_index":1011,"title":{},"body":{"modules/MailModule.html":{}}}],["useguards",{"_index":24,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}}}],["useguards(gqlauthguard",{"_index":67,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}}}],["useguards(localauthguard",{"_index":55,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["user",{"_index":11,"title":{"entities/User.html":{}},"body":{"classes/AccessToken.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/CompaniesResolver.html":{},"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/ConnectionArgs.html":{},"classes/CreateUsers.html":{},"entities/Event.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"modules/MailModule.html":{},"entities/Participant.html":{},"classes/ParticipantResponse.html":{},"modules/ParticipantsModule.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"entities/Rating.html":{},"classes/RatingResponse.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/RefreshUserToken.html":{},"classes/ResetResponse.html":{},"injectables/TokenService.html":{},"entities/User.html":{},"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"classes/UserResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/isValid.html":{}}}],["user.decorator",{"_index":37,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/CompaniesResolver.html":{},"classes/EventsResolver.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"classes/UsersResolver.html":{},"classes/isValid.html":{}}}],["user.decorator.ts",{"_index":1796,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":60,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/isValid.html":{}}}],["user.id",{"_index":355,"title":{},"body":{"injectables/CompaniesService.html":{},"entities/Company.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/ParticipantsResolver.html":{},"classes/RatingsResolver.html":{},"classes/ResetResponse.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{}}}],["user.id)@joincolumn({name",{"_index":380,"title":{},"body":{"entities/Company.html":{}}}],["user.input",{"_index":40,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"classes/ResetResponse.html":{},"classes/UpdateUserInput.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"classes/isValid.html":{}}}],["user.input.ts",{"_index":79,"title":{},"body":{"classes/ActivateUserInput.html":{},"classes/CreateUserInput.html":{},"classes/LoginUserInput.html":{},"classes/UpdateUserInput.html":{},"coverage.html":{}}}],["user.input.ts:10",{"_index":1539,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["user.input.ts:16",{"_index":606,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/UpdateUserInput.html":{}}}],["user.input.ts:20",{"_index":1538,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["user.input.ts:28",{"_index":1543,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["user.input.ts:32",{"_index":1540,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["user.input.ts:36",{"_index":1541,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["user.input.ts:42",{"_index":1545,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["user.input.ts:46",{"_index":1536,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["user.input.ts:6",{"_index":82,"title":{},"body":{"classes/ActivateUserInput.html":{},"classes/LoginUserInput.html":{}}}],["user.input.ts:9",{"_index":597,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/LoginUserInput.html":{}}}],["user.isactive",{"_index":996,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":62,"title":{},"body":{"classes/AccessToken.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/isValid.html":{}}}],["user.resetpasswordexpires",{"_index":1778,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.resetpasswordtoken",{"_index":1777,"title":{},"body":{"injectables/UsersService.html":{}}}],["user_activity",{"_index":1597,"title":{},"body":{"entities/UserActivity.html":{}}}],["useractivity",{"_index":1580,"title":{"entities/UserActivity.html":{}},"body":{"entities/UserActivity.html":{},"modules/UserActivityModule.html":{},"injectables/UserActivityService.html":{},"coverage.html":{}}}],["useractivity.actiontype",{"_index":1679,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["useractivity.eventtype",{"_index":1680,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["useractivity.score",{"_index":1681,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["useractivity.weight",{"_index":1682,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["useractivitymodule",{"_index":103,"title":{"modules/UserActivityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/UserActivityModule.html":{},"modules.html":{},"overview.html":{}}}],["useractivityrepository",{"_index":1626,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["useractivitysave",{"_index":1605,"title":{"classes/UserActivitySave.html":{}},"body":{"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{},"coverage.html":{}}}],["useractivityservice",{"_index":800,"title":{"injectables/UserActivityService.html":{}},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"modules/UserActivityModule.html":{},"injectables/UserActivityService.html":{},"coverage.html":{},"overview.html":{}}}],["userevents",{"_index":735,"title":{},"body":{"classes/EventsResolver.html":{}}}],["userevents(args",{"_index":755,"title":{},"body":{"classes/EventsResolver.html":{}}}],["usereventscalendar",{"_index":736,"title":{},"body":{"classes/EventsResolver.html":{}}}],["usereventscalendar(args",{"_index":757,"title":{},"body":{"classes/EventsResolver.html":{}}}],["userid",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"classes/EventsResolver.html":{},"injectables/EventsService.html":{},"classes/ParticipantsResolver.html":{},"injectables/ParticipantsService.html":{},"classes/RatingsResolver.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"injectables/TokenService.html":{},"injectables/UserActivityService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["usernamefield",{"_index":994,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userparticipation",{"_index":1187,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["userparticipation'})@useguards(gqlauthguard",{"_index":1197,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["userparticipation(user",{"_index":1196,"title":{},"body":{"classes/ParticipantsResolver.html":{}}}],["userrates",{"_index":1324,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["userrates'})@useguards(gqlauthguard",{"_index":1332,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["userrates(user",{"_index":1331,"title":{},"body":{"classes/RatingsResolver.html":{}}}],["userresponse",{"_index":1415,"title":{"classes/UserResponse.html":{}},"body":{"classes/ResetResponse.html":{},"classes/UserResponse.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["users",{"_index":851,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"classes/ResetResponse.html":{},"entities/User.html":{},"classes/UsersResolver.html":{}}}],["users.id",{"_index":852,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{}}}],["users.resolver",{"_index":1703,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.seed.ts",{"_index":616,"title":{},"body":{"classes/CreateUsers.html":{},"coverage.html":{}}}],["users.seed.ts:5",{"_index":617,"title":{},"body":{"classes/CreateUsers.html":{}}}],["users.service",{"_index":1410,"title":{},"body":{"classes/ResetResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{}}}],["users/entities/user.entity",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["users/users.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":973,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userservice",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"injectables/EventsService.html":{}}}],["usersmodule",{"_index":104,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["usersresolver",{"_index":1419,"title":{"classes/UsersResolver.html":{}},"body":{"classes/ResetResponse.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["usersservice",{"_index":228,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CompaniesService.html":{},"injectables/EventsService.html":{},"injectables/JwtStrategy.html":{},"classes/ResetResponse.html":{},"injectables/UserActivityService.html":{},"modules/UsersModule.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["utf8",{"_index":1509,"title":{},"body":{"injectables/TokenService.html":{}}}],["utils/.../getrandoms.ts",{"_index":1967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils/getrandoms.ts",{"_index":1820,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils/token",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["validate(validatepayload",{"_index":965,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatedate",{"_index":1479,"title":{},"body":{"injectables/TokenService.html":{}}}],["validatedate(date",{"_index":1488,"title":{},"body":{"injectables/TokenService.html":{}}}],["validatepayload",{"_index":968,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":610,"title":{},"body":{"classes/CreateUserInput.html":{},"entities/Rating.html":{},"classes/RatingUpdate.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{},"dependencies.html":{}}}],["validitydate",{"_index":1524,"title":{},"body":{"injectables/TokenService.html":{}}}],["value",{"_index":1490,"title":{},"body":{"injectables/TokenService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":584,"title":{},"body":{"classes/CreateTags.html":{},"index.html":{}}}],["values(values",{"_index":591,"title":{},"body":{"classes/CreateTags.html":{}}}],["values.push",{"_index":585,"title":{},"body":{"classes/CreateTags.html":{}}}],["variable",{"_index":1791,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1964,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify(token",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["visit",{"_index":1595,"title":{},"body":{"entities/UserActivity.html":{},"miscellaneous/enumerations.html":{}}}],["visitcount",{"_index":628,"title":{},"body":{"entities/Event.html":{},"injectables/EventsService.html":{}}}],["void",{"_index":824,"title":{},"body":{"injectables/EventsService.html":{},"injectables/NotificationsService.html":{},"injectables/ParticipantsService.html":{},"injectables/RatingsService.html":{},"injectables/UserActivityService.html":{}}}],["warn",{"_index":1976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["weight",{"_index":1583,"title":{},"body":{"entities/UserActivity.html":{},"classes/UserActivitySave.html":{},"injectables/UserActivityService.html":{}}}],["where('id",{"_index":939,"title":{},"body":{"injectables/EventsService.html":{}}}],["where(`user_activity.user",{"_index":1671,"title":{},"body":{"injectables/UserActivityService.html":{}}}],["workout",{"_index":563,"title":{},"body":{"classes/CreateTags.html":{},"miscellaneous/variables.html":{}}}],["yarn",{"_index":1929,"title":{},"body":{"index.html":{}}}],["yes",{"_index":811,"title":{},"body":{"injectables/EventsService.html":{}}}],["z",{"_index":601,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{}}}],["z])(?=.*[a",{"_index":600,"title":{},"body":{"classes/CreateUserInput.html":{},"classes/ResetPasswordTokenInput.html":{},"classes/UpdateUserInput.html":{}}}],["zipcode",{"_index":366,"title":{},"body":{"entities/Company.html":{},"classes/CreateCompanyInput.html":{}}}],["zoom",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompaniesModule.html":{},"modules/EventsModule.html":{},"modules/MailModule.html":{},"modules/NotificationsModule.html":{},"modules/ParticipantsModule.html":{},"modules/RatingsModule.html":{},"modules/TagsModule.html":{},"modules/UserActivityModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AccessToken.html":{"url":"classes/AccessToken.html","title":"class - AccessToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccessToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                            \n                                accessTokenExpires\n                            \n                            \n                                refreshToken\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.resolver.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        accessTokenExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.resolver.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.resolver.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.resolver.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseGuards } from '@nestjs/common';\nimport {\n  Args,\n  Field,\n  Mutation,\n  ObjectType,\n  Resolver,\n  Query,\n} from '@nestjs/graphql';\nimport { User } from 'src/users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { CurrentUser } from './current-user.decorator';\nimport { LoginUserInput } from './dto/login-user.input';\nimport { RefreshUserToken } from './dto/refresh-user-token.input';\nimport { GqlAuthGuard } from './guards/gql-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@ObjectType()\nexport class AccessToken {\n  @Field()\n  accessToken: string;\n\n  @Field()\n  refreshToken: string;\n\n  @Field()\n  accessTokenExpires: number;\n\n  @Field()\n  user: User;\n}\n@ObjectType()\nexport class isValid {\n  @Field()\n  isValid: boolean;\n}\n\n@Resolver()\nexport class AuthResolver {\n  constructor(private readonly authService: AuthService) {}\n\n  @Mutation(() => AccessToken)\n  @UseGuards(LocalAuthGuard)\n  async login(@Args('loginUserInput') loginUserInput: LoginUserInput) {\n    const user = new User();\n    user.email = loginUserInput.email;\n    user.password = loginUserInput.password;\n\n    return await this.authService.login(user);\n  }\n\n  @Mutation(() => AccessToken)\n  @UseGuards(GqlAuthGuard)\n  async refresh(\n    @CurrentUser() user: User,\n    @Args('refreshToken') refreshToken: RefreshUserToken,\n  ) {\n    return await this.authService.refreshLoginToken(user, refreshToken.token);\n  }\n\n  @Query(() => isValid)\n  @UseGuards(GqlAuthGuard)\n  async tokenIsValid(@CurrentUser() user: User) {\n    if (!user) return { isValid: false };\n\n    return { isValid: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActivateUserInput.html":{"url":"classes/ActivateUserInput.html","title":"class - ActivateUserInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActivateUserInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/activate-user.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/activate-user.input.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class ActivateUserInput {\n  @Field()\n  token?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCompaniesModule\n\nCompaniesModule\n\nAppModule -->\n\nCompaniesModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nAppModule -->\n\nParticipantsModule->AppModule\n\n\n\n\n\nRatingsModule\n\nRatingsModule\n\nAppModule -->\n\nRatingsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserActivityModule\n\nUserActivityModule\n\nAppModule -->\n\nUserActivityModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CompaniesModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            ParticipantsModule\n                        \n                        \n                            RatingsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UserActivityModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from './auth/auth.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { EventsModule } from './events/events.module';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { I18nModule, I18nJsonParser } from 'nestjs-i18n';\nimport { MailModule } from './mail/mail.module';\nimport { Module } from '@nestjs/common';\nimport { QueryResolver } from './i18n/QueryResolver';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from './users/users.module';\nimport { join } from 'path';\nimport { ParticipantsModule } from './participants/participants.module';\nimport { CompaniesModule } from './companies/companies.module';\nimport { UserActivityModule } from './user-activity/user-activity.module';\nimport { RatingsModule } from './ratings/ratings.module';\nimport { NotificationsModule } from './notifications/notifications.module';\nimport { TagsModule } from './tags/tags.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    I18nModule.forRoot({\n      fallbackLanguage: 'en',\n      fallbacks: {\n        'pl-*': 'pl',\n      },\n      parser: I18nJsonParser,\n      parserOptions: {\n        path: join(__dirname, 'i18n'),\n        watch: true,\n      },\n      resolvers: [{ use: QueryResolver, options: [] }],\n    }),\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: process.env.DATABASE_HOST,\n      port: 3306,\n      username: process.env.DATABASE_USERNAME,\n      password: process.env.DATABASE_PASSWORD,\n      database: process.env.DATABASE_NAME,\n      entities: [__dirname + '**/*/entities/*.entity.*'],\n      synchronize: true,\n      keepConnectionAlive: true,\n    }),\n    GraphQLModule.forRoot({\n      autoSchemaFile: true,\n      sortSchema: true,\n      cors: {\n        credentials: true,\n        origin: true,\n      },\n    }),\n    UsersModule,\n    MailModule,\n    AuthModule,\n    EventsModule,\n    ScheduleModule.forRoot(),\n    ParticipantsModule,\n    CompaniesModule,\n    UserActivityModule,\n    RatingsModule,\n    NotificationsModule,\n    TagsModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { ConfigModule } from '@nestjs/config';\nimport { User } from 'src/users/entities/user.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthResolver } from './auth.resolver';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport dayjs from 'dayjs';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    UsersModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: dayjs().add(2, 'd').unix() },\n    }),\n    TypeOrmModule.forFeature([User]),\n  ],\n  providers: [AuthService, JwtStrategy, LocalStrategy, AuthResolver],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                tokenIsValid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.resolver.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginUserInput: LoginUserInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(LocalAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.resolver.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserInput\n                                    \n                                                LoginUserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(user: User, refreshToken: RefreshUserToken)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.resolver.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                RefreshUserToken\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        tokenIsValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    tokenIsValid(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.resolver.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseGuards } from '@nestjs/common';\nimport {\n  Args,\n  Field,\n  Mutation,\n  ObjectType,\n  Resolver,\n  Query,\n} from '@nestjs/graphql';\nimport { User } from 'src/users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { CurrentUser } from './current-user.decorator';\nimport { LoginUserInput } from './dto/login-user.input';\nimport { RefreshUserToken } from './dto/refresh-user-token.input';\nimport { GqlAuthGuard } from './guards/gql-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@ObjectType()\nexport class AccessToken {\n  @Field()\n  accessToken: string;\n\n  @Field()\n  refreshToken: string;\n\n  @Field()\n  accessTokenExpires: number;\n\n  @Field()\n  user: User;\n}\n@ObjectType()\nexport class isValid {\n  @Field()\n  isValid: boolean;\n}\n\n@Resolver()\nexport class AuthResolver {\n  constructor(private readonly authService: AuthService) {}\n\n  @Mutation(() => AccessToken)\n  @UseGuards(LocalAuthGuard)\n  async login(@Args('loginUserInput') loginUserInput: LoginUserInput) {\n    const user = new User();\n    user.email = loginUserInput.email;\n    user.password = loginUserInput.password;\n\n    return await this.authService.login(user);\n  }\n\n  @Mutation(() => AccessToken)\n  @UseGuards(GqlAuthGuard)\n  async refresh(\n    @CurrentUser() user: User,\n    @Args('refreshToken') refreshToken: RefreshUserToken,\n  ) {\n    return await this.authService.refreshLoginToken(user, refreshToken.token);\n  }\n\n  @Query(() => isValid)\n  @UseGuards(GqlAuthGuard)\n  async tokenIsValid(@CurrentUser() user: User) {\n    if (!user) return { isValid: false };\n\n    return { isValid: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRefreshToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                randomTokenString\n                            \n                            \n                                    Async\n                                refreshLoginToken\n                            \n                            \n                                    Async\n                                validate\n                            \n                            \n                                    Async\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRefreshToken(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(usersRepository: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usersRepository\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        randomTokenString\n                        \n                    \n                \n            \n            \n                \n                    \n                    randomTokenString()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshLoginToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshLoginToken(user: User, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verify\n                        \n                    \n                \n            \n            \n                \n                    \n                    verify(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  getTokenExpiresTime,\n  getRefreshTokenExpiresTime,\n} from './../utils/token';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { I18nService } from 'nestjs-i18n';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from '../users/entities/user.entity';\nimport { UsersService } from 'src/users/users.service';\nimport { compare, genSalt, hash } from 'bcrypt';\nimport { randomBytes } from 'crypto';\nimport dayjs from 'dayjs';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly i18n: I18nService,\n  ) {}\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.userService.findByMail(email);\n\n    if (user === undefined) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.INVALID_EMAIL'),\n      );\n    }\n\n    if (!(await compare(password, user.password))) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.INVALID_PASSWORD'),\n      );\n    }\n\n    if (user && (await compare(password, user.password))) {\n      const { ...result } = user;\n      return result;\n    }\n  }\n\n  async login(\n    usersRepository: User,\n  ): Promise {\n    const user = await this.userService.findByMail(usersRepository.email);\n    const { id, email } = user;\n    const expiresIn = getTokenExpiresTime();\n\n    const token = this.jwtService.sign(\n      {\n        email,\n        id,\n      },\n      {\n        secret: process.env.JWT_SECRET,\n        expiresIn,\n      },\n    );\n\n    const decoded = await this.verify(token);\n\n    return {\n      accessToken: token,\n      refreshToken: await this.createRefreshToken(decoded.id),\n      accessTokenExpires: expiresIn,\n      user,\n    };\n  }\n\n  async refreshLoginToken(user: User, token: string) {\n    const searchedUser = await this.userService.findOne(user.id);\n\n    if (searchedUser === undefined) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.USER_NOT_FOUND'),\n      );\n    }\n\n    if (searchedUser.refreshTokenExpires  {\n    return await this.userService.saveRefreshToken(\n      userId,\n      await this.randomTokenString(),\n      dayjs.unix(getRefreshTokenExpiresTime()).toDate(),\n    );\n  }\n\n  async verify(token: string): Promise {\n    const decoded = this.jwtService.verify(token, {\n      secret: process.env.JWT_SECRET,\n    });\n    const user = this.userService.findByMail(decoded.email);\n    return user;\n  }\n\n  async randomTokenString(): Promise {\n    const randomString = randomBytes(100).toString('hex');\n    const salt = await genSalt(10);\n    const token = await hash(randomString, salt);\n    return { raw: randomString, encryptedToken: token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CompaniesModule.html":{"url":"modules/CompaniesModule.html","title":"module - CompaniesModule","body":"\n                   \n\n\n\n\n    Modules\n    CompaniesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CompaniesModule\n\n\n\ncluster_CompaniesModule_providers\n\n\n\ncluster_CompaniesModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nCompaniesModule\n\nCompaniesModule\n\nCompaniesModule -->\n\nUsersModule->CompaniesModule\n\n\n\n\n\nCompaniesService\n\nCompaniesService\n\nCompaniesModule -->\n\nCompaniesService->CompaniesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/companies/companies.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CompaniesService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CompaniesService } from './companies.service';\nimport { CompaniesResolver } from './companies.resolver';\nimport { Company } from './entities/company.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Company]), UsersModule],\n  providers: [CompaniesService, CompaniesResolver],\n})\nexport class CompaniesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CompaniesResolver.html":{"url":"classes/CompaniesResolver.html","title":"class - CompaniesResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CompaniesResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/companies.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createCompany\n                            \n                            \n                                findCompany\n                            \n                            \n                                updateCompany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(companiesService: CompaniesService)\n                    \n                \n                        \n                            \n                                Defined in src/companies/companies.resolver.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        companiesService\n                                                  \n                                                        \n                                                                        CompaniesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCompany\n                        \n                    \n                \n            \n            \n                \ncreateCompany(user: User, createCompanyInput: CreateCompanyInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/companies/companies.resolver.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCompanyInput\n                                    \n                                                CreateCompanyInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findCompany\n                        \n                    \n                \n            \n            \n                \nfindCompany(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/companies/companies.resolver.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateCompany\n                        \n                    \n                \n            \n            \n                \nupdateCompany(user: User, updateCompanyInput: UpdateCompanyInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/companies/companies.resolver.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCompanyInput\n                                    \n                                                UpdateCompanyInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseGuards } from '@nestjs/common';\nimport { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { CurrentUser } from 'src/auth/current-user.decorator';\nimport { GqlAuthGuard } from 'src/auth/guards/gql-auth.guard';\nimport { User } from 'src/users/entities/user.entity';\nimport { CompaniesService } from './companies.service';\nimport { CreateCompanyInput } from './dto/create-company.input';\nimport { UpdateCompanyInput } from './dto/update-company.input';\nimport { Company } from './entities/company.entity';\n\n@Resolver()\nexport class CompaniesResolver {\n  constructor(private readonly companiesService: CompaniesService) {}\n\n  @Mutation(() => Company)\n  @UseGuards(GqlAuthGuard)\n  createCompany(\n    @CurrentUser() user: User,\n    @Args({ name: 'createCompanyInput' })\n    createCompanyInput: CreateCompanyInput,\n  ) {\n    return this.companiesService.create(createCompanyInput, user);\n  }\n\n  @Mutation(() => Company)\n  @UseGuards(GqlAuthGuard)\n  updateCompany(\n    @CurrentUser() user: User,\n    @Args({ name: 'updateCompanyInput' })\n    updateCompanyInput: UpdateCompanyInput,\n  ) {\n    return this.companiesService.update(updateCompanyInput, user);\n  }\n\n  @Query(() => Company)\n  @UseGuards(GqlAuthGuard)\n  findCompany(@CurrentUser() user: User) {\n    return this.companiesService.findOne(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CompaniesService.html":{"url":"injectables/CompaniesService.html","title":"injectable - CompaniesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CompaniesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/companies.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(companyRepository: Repository, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/companies/companies.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        companyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCompanyInput: CreateCompanyInput, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/companies/companies.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCompanyInput\n                                    \n                                                CreateCompanyInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/companies/companies.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updateCompanyInput: UpdateCompanyInput, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/companies/companies.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateCompanyInput\n                                    \n                                                UpdateCompanyInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UpdateCompanyInput } from './dto/update-company.input';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from 'src/users/entities/user.entity';\nimport { UsersService } from 'src/users/users.service';\nimport { Repository } from 'typeorm';\nimport { CreateCompanyInput } from './dto/create-company.input';\nimport { Company } from './entities/company.entity';\n\n@Injectable()\nexport class CompaniesService {\n  constructor(\n    @InjectRepository(Company)\n    private readonly companyRepository: Repository,\n    private readonly userService: UsersService,\n  ) {}\n\n  async create(createCompanyInput: CreateCompanyInput, user: User) {\n    const newCompany = new Company();\n    newCompany.user = user;\n    newCompany.name = createCompanyInput.name;\n    newCompany.address = createCompanyInput.address;\n    newCompany.zipCode = createCompanyInput.zipCode;\n    newCompany.city = createCompanyInput.city;\n    newCompany.nip = createCompanyInput.nip;\n\n    return await this.companyRepository.save({ ...newCompany });\n  }\n\n  async findOne(user: User) {\n    const company = await this.companyRepository.findOne({\n      where: { user: user.id },\n    });\n\n    if (!company) {\n      throw new BadRequestException('Company not found');\n    }\n    return company;\n  }\n\n  async update(updateCompanyInput: UpdateCompanyInput, user: User) {\n    const company = await this.findOne(user);\n\n    return this.companyRepository.save({ ...company, ...updateCompanyInput });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Company.html":{"url":"entities/Company.html","title":"entity - Company","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Company\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/entities/company.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                city\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                nip\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user\n                            \n                            \n                                zipCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/entities/company.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/entities/company.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/entities/company.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/entities/company.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/entities/company.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/entities/company.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/entities/company.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.id)@JoinColumn({name: 'user', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/entities/company.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zipCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/entities/company.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ObjectType, Field } from '@nestjs/graphql';\nimport { User } from 'src/users/entities/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@ObjectType()\n@Entity({\n  name: 'companies',\n})\nexport class Company {\n  @Field()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Field()\n  @Column()\n  name: string;\n\n  @Field()\n  @Column()\n  address: string;\n\n  @Field()\n  @Column()\n  zipCode: string;\n\n  @Field()\n  @Column()\n  city: string;\n\n  @Field()\n  @Column()\n  nip: string;\n\n  @OneToOne(() => User, (user) => user.id)\n  @JoinColumn({ name: 'user', referencedColumnName: 'id' })\n  user: User;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConnectionArgs.html":{"url":"classes/ConnectionArgs.html","title":"class - ConnectionArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConnectionArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pagination/types/connection.args.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ConnectionArguments\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                after\n                            \n                            \n                                    Public\n                                    Optional\n                                before\n                            \n                            \n                                    Public\n                                    Optional\n                                distance\n                            \n                            \n                                    Public\n                                    Optional\n                                first\n                            \n                            \n                                    Public\n                                    Optional\n                                last\n                            \n                            \n                                    Public\n                                    Optional\n                                latitude\n                            \n                            \n                                    Public\n                                    Optional\n                                longitude\n                            \n                            \n                                    Public\n                                    Optional\n                                orderField\n                            \n                            \n                                    Public\n                                    Optional\n                                orderSort\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                distanceParams\n                            \n                            \n                                orderParams\n                            \n                            \n                                pagingParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        after\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConnectionCursor\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true, description: 'Paginate after opaque cursor'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/connection.args.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        before\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConnectionCursor\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true, description: 'Paginate before opaque cursor'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/connection.args.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        distance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true, description: 'Distance'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/connection.args.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        first\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true, description: 'Paginate first'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/connection.args.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true, description: 'Paginate last'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/connection.args.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true, description: 'User latitude'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/connection.args.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true, description: 'User longitude'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/connection.args.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        orderField\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true, description: 'Orderby field'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/connection.args.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        orderSort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true, description: 'Orderby sort'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/connection.args.ts:110\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        distanceParams\n                        \n                    \n                \n            \n            \n                \ndistanceParams()\n                \n            \n\n\n            \n                \n                    Defined in src/pagination/types/connection.args.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { distance: number; latitude: number; longitude: number; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orderParams\n                        \n                    \n                \n            \n            \n                \norderParams()\n                \n            \n\n\n            \n                \n                    Defined in src/pagination/types/connection.args.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: string; sort: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pagingParams\n                        \n                    \n                \n            \n            \n                \npagingParams()\n                \n            \n\n\n            \n                \n                    Defined in src/pagination/types/connection.args.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { limit: number; offset: any; } | { limit?: undefined; offset?: undefined; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ConnectionArguments,\n  ConnectionCursor,\n  fromGlobalId,\n} from 'graphql-relay';\nimport { Field, ArgsType } from '@nestjs/graphql';\n\ntype PagingMeta =\n  | { pagingType: 'forward'; after?: string; first: number }\n  | { pagingType: 'backward'; before?: string; last: number }\n  | { pagingType: 'none' };\n\nfunction checkPagingSanity(args: ConnectionArgs): PagingMeta {\n  const { first = 0, last = 0, after, before } = args;\n\n  const isForwardPaging = !!first || !!after;\n  const isBackwardPaging = !!last || !!before;\n  if (isForwardPaging && isBackwardPaging) {\n    throw new Error('Relay pagination cannot be forwards AND backwards!');\n  }\n  if ((isForwardPaging && before) || (isBackwardPaging && after)) {\n    throw new Error('Paging must use either first/after or last/before!');\n  }\n  if ((isForwardPaging && first \n  parseInt(fromGlobalId(cursor).id, 10);\nconst nextId = (cursor: ConnectionCursor) => getId(cursor) + 1;\n\nfunction getDistanceParameters(args: ConnectionArgs) {\n  const distance = args.distance;\n  const latitude = args.latitude;\n  const longitude = args.longitude;\n\n  return { distance, latitude, longitude };\n}\n\nfunction getOrderParameters(args: ConnectionArgs) {\n  let field: string;\n  let sort: string;\n  if (args.orderField != null || args.orderField != undefined) {\n    field = args.orderField;\n  } else {\n    field = 'id';\n  }\n  if (args.orderSort === 'ASC' || args.orderSort === 'DESC') {\n    sort = args.orderSort;\n  } else {\n    sort = 'ASC';\n  }\n  return { field, sort };\n}\n\nfunction getPagingParameters(args: ConnectionArgs) {\n  const meta = checkPagingSanity(args);\n\n  switch (meta.pagingType) {\n    case 'forward': {\n      return {\n        limit: meta.first,\n        offset: meta.after ? nextId(meta.after) : 0,\n      };\n    }\n    case 'backward': {\n      const { last, before } = meta;\n      let limit = last;\n      let offset = getId(before) - last;\n\n      if (offset \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCompanyInput.html":{"url":"classes/CreateCompanyInput.html","title":"class - CreateCompanyInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCompanyInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/dto/create-company.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                city\n                            \n                            \n                                name\n                            \n                            \n                                nip\n                            \n                            \n                                zipCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.input.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.input.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.input.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zipCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.input.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class CreateCompanyInput {\n  @Field()\n  name: string;\n\n  @Field()\n  address: string;\n\n  @Field()\n  zipCode: string;\n\n  @Field()\n  city: string;\n\n  @Field()\n  nip: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventAddress.html":{"url":"classes/CreateEventAddress.html","title":"class - CreateEventAddress","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventAddress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/create-event-address.seed.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(factory: Factory)\n                \n            \n\n\n            \n                \n                    Defined in src/database/seeds/create-event-address.seed.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    factory\n                                    \n                                            Factory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventAddress } from './../../events/entities/event-address.entity';\nimport { Factory, Seeder } from 'typeorm-seeding';\n\nexport default class CreateEventAddress implements Seeder {\n  public async run(factory: Factory): Promise {\n    await factory(EventAddress)().createMany(40);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventAddressInput.html":{"url":"classes/CreateEventAddressInput.html","title":"class - CreateEventAddressInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventAddressInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dto/create-event-address.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                countryCode\n                            \n                            \n                                countryName\n                            \n                            \n                                county\n                            \n                            \n                                district\n                            \n                            \n                                label\n                            \n                            \n                                postalCode\n                            \n                            \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event-address.input.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event-address.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event-address.input.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        county\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event-address.input.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        district\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event-address.input.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event-address.input.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event-address.input.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event-address.input.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class CreateEventAddressInput {\n  @Field()\n  label: string;\n\n  @Field()\n  countryCode: string;\n\n  @Field()\n  countryName: string;\n\n  @Field()\n  state: string;\n\n  @Field()\n  county: string;\n\n  @Field()\n  city: string;\n\n  @Field()\n  district: string;\n\n  @Field()\n  postalCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventInput.html":{"url":"classes/CreateEventInput.html","title":"class - CreateEventInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dto/create-event.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                endDate\n                            \n                            \n                                eventAddress\n                            \n                            \n                                lat\n                            \n                            \n                                lng\n                            \n                            \n                                maxParticipants\n                            \n                            \n                                startDate\n                            \n                            \n                                tags\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.input.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.input.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateEventAddressInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.input.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.input.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.input.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxParticipants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.input.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.input.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.input.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.input.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/create-event.input.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Tag } from './../../tags/entities/tag.entity';\nimport { CreateEventAddressInput } from './create-event-address.input';\nimport { InputType, Field, Int } from '@nestjs/graphql';\nimport { eventType } from '../entities/event.entity';\nimport GraphQLJSON from 'graphql-type-json';\n\n@InputType()\nexport class CreateEventInput {\n  @Field()\n  title: string;\n\n  @Field()\n  description: string;\n\n  @Field({\n    defaultValue: eventType.Party,\n  })\n  type: eventType;\n\n  @Field()\n  startDate: Date;\n\n  @Field()\n  endDate: Date;\n\n  @Field()\n  lat: number;\n\n  @Field()\n  lng: number;\n\n  @Field(() => GraphQLJSON, {\n    nullable: true,\n  })\n  tags: Tag[];\n\n  @Field()\n  eventAddress: CreateEventAddressInput;\n\n  @Field(() => Int, { nullable: true })\n  maxParticipants: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEvents.html":{"url":"classes/CreateEvents.html","title":"class - CreateEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/create-events.seed.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(factory: Factory)\n                \n            \n\n\n            \n                \n                    Defined in src/database/seeds/create-events.seed.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    factory\n                                    \n                                            Factory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Event } from 'src/events/entities/event.entity';\nimport { Factory, Seeder } from 'typeorm-seeding';\n\nexport default class CreateEvents implements Seeder {\n  public async run(factory: Factory): Promise {\n    await factory(Event)().createMany(10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateParticipants.html":{"url":"classes/CreateParticipants.html","title":"class - CreateParticipants","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateParticipants\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/create-paricipants.seed.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(factory: Factory)\n                \n            \n\n\n            \n                \n                    Defined in src/database/seeds/create-paricipants.seed.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    factory\n                                    \n                                            Factory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Participant } from './../../participants/entities/participant.entity';\nimport { Factory, Seeder } from 'typeorm-seeding';\n\nexport default class CreateParticipants implements Seeder {\n  public async run(factory: Factory): Promise {\n    await factory(Participant)().createMany(60);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTags.html":{"url":"classes/CreateTags.html","title":"class - CreateTags","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTags\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/create-tags.seed.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(factory: Factory, connection: Connection)\n                \n            \n\n\n            \n                \n                    Defined in src/database/seeds/create-tags.seed.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    factory\n                                    \n                                            Factory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    connection\n                                    \n                                            Connection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { eventType } from 'src/events/entities/event.entity';\nimport { Tag } from './../../tags/entities/tag.entity';\nimport { Factory, Seeder } from 'typeorm-seeding';\nimport { Connection } from 'typeorm';\n\nconst tags = [\n  'sport',\n  'fitness',\n  'gym',\n  'workout',\n  'motivation',\n  'training',\n  'fit',\n  'bodybuilding',\n  'lifestyle',\n  'fitnessmotivation',\n  'healthy',\n  'travel',\n  'photography',\n  'health',\n  'follow',\n  'gymlife',\n  'football',\n  'boxing',\n  'basketball',\n  'fun',\n  'muscle',\n  'sportscenetr',\n  'forest',\n  'runing',\n  'football',\n];\n\nexport default class CreateTags implements Seeder {\n  public async run(factory: Factory, connection: Connection): Promise {\n    const values = [];\n\n    for (const tag of tags) {\n      values.push({ type: eventType.Sport, name: tag });\n      values.push({ type: eventType.Party, name: tag });\n      values.push({ type: eventType.Social, name: tag });\n    }\n\n    await connection\n      .createQueryBuilder()\n      .insert()\n      .into(Tag)\n      .values(values)\n      .execute();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserInput.html":{"url":"classes/CreateUserInput.html","title":"class - CreateUserInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsEmail()@Length(4, 50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Length(8, 20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password should contains a capital letter and a number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.input.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\nimport { IsEmail, Matches, Length } from 'class-validator';\n\n@InputType()\nexport class CreateUserInput {\n  @Field()\n  @IsEmail()\n  @Length(4, 50)\n  email?: string;\n\n  @Field()\n  @Length(8, 20)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password should contains a capital letter and a number',\n  })\n  password?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUsers.html":{"url":"classes/CreateUsers.html","title":"class - CreateUsers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUsers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/create-users.seed.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                    \n                    run(factory: Factory)\n                \n            \n\n\n            \n                \n                    Defined in src/database/seeds/create-users.seed.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    factory\n                                    \n                                            Factory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from 'src/users/entities/user.entity';\nimport { Factory, Seeder } from 'typeorm-seeding';\n\nexport default class CreateUsers implements Seeder {\n  public async run(factory: Factory): Promise {\n    await factory(User)().createMany(10);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Event.html":{"url":"entities/Event.html","title":"entity - Event","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Event\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/entities/event.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                distance\n                            \n                            \n                                endDate\n                            \n                            \n                                    Optional\n                                eventAddress\n                            \n                            \n                                goingCount\n                            \n                            \n                                id\n                            \n                            \n                                interestedCount\n                            \n                            \n                                isArchive\n                            \n                            \n                                    Optional\n                                lat\n                            \n                            \n                                    Optional\n                                lng\n                            \n                            \n                                    Optional\n                                loggedInParticipants\n                            \n                            \n                                maxParticipants\n                            \n                            \n                                    Optional\n                                participantRate\n                            \n                            \n                                    Optional\n                                participants\n                            \n                            \n                                rate\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                startDate\n                            \n                            \n                                state\n                            \n                            \n                                tags\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user\n                            \n                            \n                                visitCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column('mediumtext', {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        distance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({select: false, insert: false, readonly: true, update: false, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        eventAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventAddress\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@OneToOne(undefined, eventAddress => eventAddress.event)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goingCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interestedCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isArchive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({type: 'decimal', precision: 10, scale: 6, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({type: 'decimal', precision: 10, scale: 6, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        loggedInParticipants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Participant\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxParticipants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        participantRate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Rating\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Participant[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@OneToMany(undefined, participant => participant.event)@JoinColumn({name: 'event'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({type: 'decimal', precision: 6, scale: 2, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({select: false, insert: false, readonly: true, update: false, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IEventState\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@ManyToOne(undefined, {nullable: false, onUpdate: 'CASCADE'})@JoinColumn({name: 'user', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visitCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event.entity.ts:141\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Tag } from './../../tags/entities/tag.entity';\nimport { Rating } from './../../ratings/entities/rating.entity';\nimport { EventAddress } from './event-address.entity';\nimport { Participant } from './../../participants/entities/participant.entity';\nimport { ObjectType, Field, registerEnumType, Int } from '@nestjs/graphql';\nimport { User } from 'src/users/entities/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { IEventState } from '../IEvents';\nimport { GraphQLJSON } from 'graphql-type-json';\n\nexport enum eventType {\n  Sport,\n  Party,\n  Social,\n}\n\nregisterEnumType(eventType, {\n  name: 'eventType',\n});\n\n@ObjectType()\n@Entity({\n  name: 'events',\n})\nexport class Event {\n  @Field()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Field()\n  @ManyToOne(() => User, { nullable: false, onUpdate: 'CASCADE' })\n  @JoinColumn({ name: 'user', referencedColumnName: 'id' })\n  user: User;\n\n  @Field()\n  @Column({ nullable: false })\n  title: string;\n\n  @Field()\n  @Column('mediumtext', { nullable: false })\n  description: string;\n\n  @Field()\n  @Column({ nullable: false, default: eventType.Party })\n  type: eventType;\n\n  @Field({ nullable: true })\n  state: IEventState;\n\n  @Field()\n  @Column({ nullable: false })\n  startDate: Date;\n\n  @Field()\n  @Column({ nullable: false })\n  endDate: Date;\n\n  @Field(() => Int, { nullable: true })\n  @Column({ nullable: true })\n  maxParticipants: number;\n\n  @Field()\n  @Column({ type: 'decimal', precision: 10, scale: 6, nullable: true })\n  lat?: number;\n\n  @Field()\n  @Column({ type: 'decimal', precision: 10, scale: 6, nullable: true })\n  lng?: number;\n\n  @Field()\n  @Column({\n    select: false,\n    insert: false,\n    readonly: true,\n    update: false,\n    default: 0,\n  })\n  distance: number;\n\n  @Field({ nullable: true })\n  @Column({\n    select: false,\n    insert: false,\n    readonly: true,\n    update: false,\n    default: 0,\n  })\n  score?: number;\n\n  @Field()\n  @Column({ default: false })\n  isArchive: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @Field(() => [Participant], { nullable: true })\n  @OneToMany(() => Participant, (participant) => participant.event)\n  @JoinColumn({ name: 'event' })\n  participants?: Participant[];\n\n  @Field(() => EventAddress, { nullable: true })\n  @OneToOne(() => EventAddress, (eventAddress) => eventAddress.event)\n  eventAddress?: EventAddress;\n\n  @Field({ nullable: true })\n  interestedCount: number;\n\n  @Field({ nullable: true })\n  @Column({ type: 'decimal', precision: 6, scale: 2, nullable: true })\n  rate: number;\n\n  @Field(() => GraphQLJSON, { nullable: true })\n  @Column('json', { nullable: true })\n  tags: Tag[];\n\n  @Field({ nullable: true })\n  goingCount: number;\n\n  @Field({ nullable: true })\n  loggedInParticipants?: Participant;\n\n  @Field({ nullable: true })\n  participantRate?: Rating;\n\n  @Field()\n  @Column({ default: 0 })\n  visitCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventAddress.html":{"url":"entities/EventAddress.html","title":"entity - EventAddress","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventAddress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/entities/event-address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                countryCode\n                            \n                            \n                                countryName\n                            \n                            \n                                county\n                            \n                            \n                                createdAt\n                            \n                            \n                                district\n                            \n                            \n                                event\n                            \n                            \n                                id\n                            \n                            \n                                label\n                            \n                            \n                                postalCode\n                            \n                            \n                                state\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        countryName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        county\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        district\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, event => event.id, {onDelete: 'CASCADE'})@JoinColumn({name: 'event', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postalCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/entities/event-address.entity.ts:64\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ObjectType, Field } from '@nestjs/graphql';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Event } from './event.entity';\n\n@ObjectType()\n@Entity({\n  name: 'event_address',\n})\nexport class EventAddress {\n  @Field()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @OneToOne(() => Event, (event) => event.id, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'event', referencedColumnName: 'id' })\n  event: Event;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  label: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  countryCode: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  countryName: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  state: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  county: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  city: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  district: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  postalCode: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventResponse.html":{"url":"classes/EventResponse.html","title":"class - EventResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dto/event.response.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectType } from '@nestjs/graphql';\nimport relayTypes from 'src/pagination/types/relay.types';\nimport { Event } from '../entities/event.entity';\n\n@ObjectType()\nexport default class EventResponse extends relayTypes(Event) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_imports\n\n\n\n\nUserActivityModule\n\nUserActivityModule\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nUserActivityModule->EventsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEventsModule -->\n\nUsersModule->EventsModule\n\n\n\n\n\nEventsService \n\nEventsService \n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/events/events.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserActivityModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { UsersModule } from 'src/users/users.module';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { EventsService } from './events.service';\nimport { EventsResolver } from './events.resolver';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Event } from './entities/event.entity';\nimport { EventAddress } from './entities/event-address.entity';\nimport { UserActivityModule } from 'src/user-activity/user-activity.module';\nimport { NotificationsModule } from 'src/notifications/notifications.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Event, EventAddress]),\n    UserActivityModule,\n    UsersModule,\n    forwardRef(() => NotificationsModule),\n  ],\n  providers: [EventsResolver, EventsService],\n  exports: [EventsService],\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventsResolver.html":{"url":"classes/EventsResolver.html","title":"class - EventsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createEvent\n                            \n                            \n                                    Async\n                                events\n                            \n                            \n                                findForEdit\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                removeEvent\n                            \n                            \n                                updateEvent\n                            \n                            \n                                    Async\n                                userEvents\n                            \n                            \n                                    Async\n                                userEventsCalendar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsService: EventsService)\n                    \n                \n                        \n                            \n                                Defined in src/events/events.resolver.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createEvent\n                        \n                    \n                \n            \n            \n                \ncreateEvent(user: User, createEventInput: CreateEventInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/events/events.resolver.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createEventInput\n                                    \n                                                CreateEventInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        events\n                        \n                    \n                \n            \n            \n                \n                    \n                    events(args: ConnectionArgs, query: string, state: IEventState, type: eventType, userId: string, clientDate: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/events/events.resolver.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                IEventState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                eventType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientDate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findForEdit\n                        \n                    \n                \n            \n            \n                \nfindForEdit(user: User, eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/events/events.resolver.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(eventId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'event'})\n                \n            \n\n            \n                \n                    Defined in src/events/events.resolver.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeEvent\n                        \n                    \n                \n            \n            \n                \nremoveEvent(eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/events/events.resolver.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateEvent\n                        \n                    \n                \n            \n            \n                \nupdateEvent(user: User, updateEventInput: UpdateEventInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/events/events.resolver.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEventInput\n                                    \n                                                UpdateEventInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    userEvents(args: ConnectionArgs, query: string, state: IEventState, type: eventType, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/events/events.resolver.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                IEventState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                eventType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userEventsCalendar\n                        \n                    \n                \n            \n            \n                \n                    \n                    userEventsCalendar(args: ConnectionArgs, query: string, type: eventType, userId: string, startDate: Date, endDate: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/events/events.resolver.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                eventType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    startDate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    endDate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { eventType } from 'src/events/entities/event.entity';\nimport { Resolver, Query, Mutation, Args } from '@nestjs/graphql';\nimport { EventsService } from './events.service';\nimport { Event } from './entities/event.entity';\nimport { CreateEventInput } from './dto/create-event.input';\nimport { UpdateEventInput } from './dto/update-event.input';\nimport { CurrentUser } from 'src/auth/current-user.decorator';\nimport { User } from 'src/users/entities/user.entity';\nimport { GqlAuthGuard } from 'src/auth/guards/gql-auth.guard';\nimport { UseGuards } from '@nestjs/common';\nimport EventResponse from './dto/event.response';\nimport ConnectionArgs from 'src/pagination/types/connection.args';\nimport { connectionFromArraySlice } from 'graphql-relay';\nimport { IEventState } from './IEvents';\n\n@Resolver(() => Event)\nexport class EventsResolver {\n  constructor(private readonly eventsService: EventsService) {}\n\n  @Mutation(() => Event)\n  @UseGuards(GqlAuthGuard)\n  createEvent(\n    @CurrentUser() user: User,\n    @Args('createEventInput') createEventInput: CreateEventInput,\n  ) {\n    return this.eventsService.create(createEventInput, user);\n  }\n\n  @Query(() => Event, { name: 'event' })\n  async findOne(\n    @Args('id') eventId: string,\n    @Args({ name: 'userId', nullable: true }) userId: string,\n  ) {\n    return this.eventsService.find(eventId, userId);\n  }\n\n  @Query(() => EventResponse)\n  async events(\n    @Args() args: ConnectionArgs,\n    @Args({ name: 'query', defaultValue: '' }) query: string,\n    @Args({ name: 'state', nullable: true }) state: IEventState,\n    @Args({ name: 'type', nullable: true }) type: eventType,\n    @Args({ name: 'userId', nullable: true }) userId: string,\n    @Args({ name: 'clientDate', nullable: true, description: 'UNIX' })\n    clientDate: number,\n  ): Promise {\n    const { limit, offset } = args.pagingParams();\n    const { field, sort } = args.orderParams();\n    const { distance, latitude, longitude } = args.distanceParams();\n    const records = await this.eventsService.findAll(\n      limit,\n      offset,\n      field,\n      sort,\n      query,\n      state,\n      null,\n      distance,\n      latitude,\n      longitude,\n      userId,\n      type,\n      clientDate,\n    );\n    const events = records.events;\n    const count = records.totalRecords.length;\n    const page = connectionFromArraySlice(events, args, {\n      arrayLength: count,\n      sliceStart: offset || 0,\n    });\n\n    return { page, pageData: { count, limit, offset } };\n  }\n\n  @Query(() => EventResponse)\n  async userEvents(\n    @Args() args: ConnectionArgs,\n    @Args({ name: 'query', defaultValue: '' }) query: string,\n    @Args({ name: 'state', nullable: true }) state: IEventState,\n    @Args({ name: 'type', nullable: true }) type: eventType,\n    @Args({ name: 'userId', nullable: false }) userId: string,\n  ): Promise {\n    const { limit, offset } = args.pagingParams();\n    const { field, sort } = args.orderParams();\n    const { distance, latitude, longitude } = args.distanceParams();\n    const records = await this.eventsService.findAll(\n      limit,\n      offset,\n      field,\n      sort,\n      query,\n      state,\n      userId,\n      distance,\n      latitude,\n      longitude,\n      null,\n      type,\n    );\n    const events = records.events;\n    const count = records.totalRecords.length;\n    const page = connectionFromArraySlice(events, args, {\n      arrayLength: count,\n      sliceStart: offset || 0,\n    });\n\n    return { page, pageData: { count, limit, offset } };\n  }\n\n  @Query(() => EventResponse)\n  async userEventsCalendar(\n    @Args() args: ConnectionArgs,\n    @Args({ name: 'query', defaultValue: '' }) query: string,\n    @Args({ name: 'type', nullable: true }) type: eventType,\n    @Args({ name: 'userId', nullable: false }) userId: string,\n    @Args({ name: 'startDate', nullable: false }) startDate: Date,\n    @Args({ name: 'endDate', nullable: false }) endDate: Date,\n  ): Promise {\n    const { limit, offset } = args.pagingParams();\n    const { field, sort } = args.orderParams();\n    const records = await this.eventsService.findAllForCalendar(\n      limit,\n      offset,\n      field,\n      sort,\n      query,\n      userId,\n      type,\n      startDate,\n      endDate,\n    );\n    const events = records.events;\n    const count = records.totalRecords.length;\n    const page = connectionFromArraySlice(events, args, {\n      arrayLength: count,\n      sliceStart: offset || 0,\n    });\n\n    return { page, pageData: { count, limit, offset } };\n  }\n\n  @Query(() => Event)\n  @UseGuards(GqlAuthGuard)\n  findForEdit(@CurrentUser() user: User, @Args('id') eventId: string) {\n    return this.eventsService.findForEdit(eventId, user.id);\n  }\n\n  @Mutation(() => Event)\n  @UseGuards(GqlAuthGuard)\n  updateEvent(\n    @CurrentUser() user: User,\n    @Args('updateEventInput') updateEventInput: UpdateEventInput,\n  ) {\n    return this.eventsService.update(\n      user,\n      updateEventInput.id,\n      updateEventInput,\n    );\n  }\n\n  @Mutation(() => Event)\n  @UseGuards(GqlAuthGuard)\n  removeEvent(@Args('id') eventId: string) {\n    return this.eventsService.remove(eventId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsService.html":{"url":"injectables/EventsService.html","title":"injectable - EventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllForCalendar\n                            \n                            \n                                    Async\n                                findForEdit\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                saveAddress\n                            \n                            \n                                saveVisit\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateAddress\n                            \n                            \n                                    Async\n                                updateRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsRepository: Repository, eventAddressRepository: Repository, userActivityService: UserActivityService, userService: UsersService, i18n: I18nService, notificationsService: NotificationsService)\n                    \n                \n                        \n                            \n                                Defined in src/events/events.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventAddressRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userActivityService\n                                                  \n                                                        \n                                                                        UserActivityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notificationsService\n                                                  \n                                                        \n                                                                        NotificationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEventInput: CreateEventInput, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEventInput\n                                    \n                                                CreateEventInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(eventId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(limit: number, offset: number, field: string, sort: string, query: string, state: IEventState, userId: string, distance: number, latitude: number, longitude: number, loggedUser: string, type: eventType, clientDate?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    field\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sort\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                IEventState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    distance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    latitude\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    longitude\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    loggedUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                eventType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientDate\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllForCalendar\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllForCalendar(limit: number, offset: number, field: string, sort: string, query: string, userId: string, type: eventType, startDate: Date, endDate: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:384\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    field\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sort\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                eventType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    startDate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    endDate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findForEdit\n                        \n                    \n                \n            \n            \n                \n                    \n                    findForEdit(eventId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:336\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveAddress(event: Event, eventAddress: CreateEventAddressInput)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventAddress\n                                    \n                                                CreateEventAddressInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveVisit\n                        \n                    \n                \n            \n            \n                \nsaveVisit(searchedEvent: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:373\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchedEvent\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: User, eventId: string, updateEventInput: UpdateEventInput)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:304\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEventInput\n                                    \n                                                UpdateEventInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAddress(event: Event, eventAddress: CreateEventAddressInput)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:354\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventAddress\n                                    \n                                                CreateEventAddressInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRate(eventId: any, rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/events/events.service.ts:362\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { eventType } from 'src/events/entities/event.entity';\nimport { EventAddress } from './entities/event-address.entity';\nimport { Participant } from './../participants/entities/participant.entity';\nimport {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { CreateEventInput } from './dto/create-event.input';\nimport { UpdateEventInput } from './dto/update-event.input';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Event } from './entities/event.entity';\nimport { Repository } from 'typeorm';\nimport { User } from 'src/users/entities/user.entity';\nimport { IEventState } from './IEvents';\nimport { CreateEventAddressInput } from './dto/create-event-address.input';\nimport { UserActivityService } from 'src/user-activity/user-activity.service';\nimport { UsersService } from 'src/users/users.service';\nimport { I18nService } from 'nestjs-i18n';\nimport { NotificationsService } from 'src/notifications/notifications.service';\nimport { Rating } from 'src/ratings/entities/rating.entity';\n\n@Injectable()\nexport class EventsService {\n  constructor(\n    @InjectRepository(Event)\n    private readonly eventsRepository: Repository,\n    @InjectRepository(EventAddress)\n    private readonly eventAddressRepository: Repository,\n    private readonly userActivityService: UserActivityService,\n    private readonly userService: UsersService,\n    private readonly i18n: I18nService,\n    @Inject(forwardRef(() => NotificationsService))\n    private readonly notificationsService: NotificationsService,\n  ) {}\n\n  async create(createEventInput: CreateEventInput, user: User) {\n    const event = await this.eventsRepository.save({\n      ...createEventInput,\n      user,\n    });\n\n    const address = await this.saveAddress(\n      event,\n      createEventInput.eventAddress,\n    );\n    event.eventAddress = address;\n\n    this.notificationsService.addNewJob(event);\n    return event;\n  }\n\n  async findForEdit(eventId: string, userId: string) {\n    const event = await this.findOne(eventId);\n\n    const user = await this.userService.findOne(userId);\n\n    if (event.user.id != user.id) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.USER_IS_NOT_OWNER_OF_EVENT'),\n      );\n    }\n\n    return await event;\n  }\n\n  async find(eventId: string, userId: string) {\n    const event = this.eventsRepository\n      .createQueryBuilder('events')\n      .innerJoinAndMapOne(\n        'events.user',\n        User,\n        'users',\n        'events.user = users.id',\n      )\n      .loadRelationCountAndMap(\n        'events.interestedCount',\n        'events.participants',\n        'p',\n        (qb) => qb.andWhere('p.type = 1'),\n      )\n      .loadRelationCountAndMap(\n        'events.goingCount',\n        'events.participants',\n        'p',\n        (qb) => qb.andWhere('p.type = 2'),\n      )\n      .leftJoinAndMapOne(\n        'events.eventAddress',\n        EventAddress,\n        'event_address',\n        'events.id = event_address.event',\n      );\n    let user;\n    if (userId) {\n      user = await this.userService.findOne(userId);\n      event\n        .leftJoinAndMapOne(\n          'events.loggedInParticipants',\n          Participant,\n          'loggedInParticipants',\n          `events.id = loggedInParticipants.event and loggedInParticipants.user = \"${user.id}\"`,\n        )\n        .leftJoinAndMapOne(\n          'loggedInParticipants.user',\n          User,\n          'u2',\n          'loggedInParticipants.user = u2.id',\n        )\n        .leftJoinAndMapOne(\n          'events.participantRate',\n          Rating,\n          'participantRate',\n          `events.id = participantRate.event and participantRate.user = \"${user.id}\"`,\n        )\n        .leftJoinAndMapOne(\n          'participantRate.user',\n          User,\n          'u3',\n          'participantRate.user = u3.id',\n        );\n    }\n\n    event.andWhere(`events.id = '${eventId}'`);\n    const searchedEvent = await event.getOne();\n\n    if (userId) {\n      this.userActivityService.saveEventView(user, searchedEvent);\n    }\n    this.saveVisit(searchedEvent);\n\n    return searchedEvent;\n  }\n\n  findOne(eventId: string) {\n    return this.eventsRepository.findOne({\n      relations: ['user'],\n      where: { id: eventId },\n    });\n  }\n\n  async findAll(\n    limit: number,\n    offset: number,\n    field: string,\n    sort: string,\n    query: string,\n    state: IEventState,\n    userId: string,\n    distance: number,\n    latitude: number,\n    longitude: number,\n    loggedUser: string,\n    type: eventType,\n    clientDate?: number,\n  ) {\n    const date = clientDate ? new Date(clientDate * 1000) : new Date();\n    const clientDateFormatted = date.toISOString().replace('T', ' ');\n\n    const events = this.eventsRepository\n      .createQueryBuilder('events')\n      .innerJoinAndMapOne(\n        'events.user',\n        User,\n        'users',\n        'events.user = users.id',\n      )\n      .leftJoinAndMapMany(\n        'events.participants',\n        Participant,\n        'participants',\n        'events.id = participants.event',\n        { limit: '2' },\n      )\n      .leftJoinAndMapOne(\n        'events.eventAddress',\n        EventAddress,\n        'event_address',\n        'events.id = event_address.event',\n      )\n      .leftJoinAndMapOne(\n        'participants.user',\n        User,\n        'u',\n        'participants.user = u.id',\n      )\n      .loadRelationCountAndMap(\n        'events.interestedCount',\n        'events.participants',\n        'p',\n        (qb) => qb.andWhere('p.type = 1'),\n      )\n      .loadRelationCountAndMap(\n        'events.goingCount',\n        'events.participants',\n        'p',\n        (qb) => qb.andWhere('p.type = 2'),\n      )\n      .where(\n        '(events.title like  :title or events.description like :description)',\n        { title: `%${query}%`, description: `%${query}%` },\n      );\n    if (loggedUser) {\n      const user = await this.userService.findOne(loggedUser);\n      events\n        .leftJoinAndMapOne(\n          'events.loggedInParticipants',\n          Participant,\n          'loggedInParticipants',\n          `events.id = loggedInParticipants.event and loggedInParticipants.user = \"${user.id}\"`,\n        )\n        .leftJoinAndMapOne(\n          'loggedInParticipants.user',\n          User,\n          'u2',\n          'loggedInParticipants.user = u2.id',\n        );\n    }\n    let distanceQuery = '0';\n    if (distance && latitude && longitude) {\n      events.addSelect(\n        `ROUND( 6371 * acos( cos( radians(${latitude}) ) * cos( radians( events.lat ) ) * cos( radians( events.lng ) - radians(${longitude}) ) + sin( radians(${latitude}) )* sin( radians( events.lat ) ) ) ,2)`,\n        'events_distance',\n      );\n\n      events.andWhere(\n        `ROUND( 6371 * acos( cos( radians(${latitude}) ) * cos( radians( events.lat ) ) * cos( radians( events.lng ) - radians(${longitude}) ) + sin( radians(${latitude}) )* sin( radians( events.lat ) ) ) ,2) = :endDate', {\n          endDate: clientDateFormatted,\n        });\n    }\n\n    if (state === 'FUTURE') {\n      events.andWhere('events.startDate > :startDate', {\n        startDate: clientDateFormatted,\n      });\n    }\n\n    if (state === 'PAST') {\n      events.andWhere('events.endDate = 0) {\n      events.andWhere('events.type = :type', {\n        type,\n      });\n    }\n\n    const totalRecords = await events.getMany();\n\n    if (distance && latitude && longitude && field == 'distance') {\n      events.orderBy(`events_distance`, 'ASC' == sort ? 'ASC' : 'DESC');\n    } else if (field == 'score') {\n      if (loggedUser) {\n        events.orderBy(`events_score`, 'ASC' == sort ? 'ASC' : 'DESC');\n      } else {\n        events.orderBy(`events.startDate`, 'ASC');\n      }\n    } else {\n      events.orderBy(`events.${field}`, 'ASC' == sort ? 'ASC' : 'DESC');\n    }\n\n    const eventsMapped = await events.take(limit).skip(offset).getMany();\n\n    eventsMapped.map((event) => {\n      event.state = state;\n    });\n\n    return { events: eventsMapped, totalRecords };\n  }\n\n  async update(\n    user: User,\n    eventId: string,\n    updateEventInput: UpdateEventInput,\n  ) {\n    const event = await this.findOne(eventId);\n    const loggedUser = await this.userService.findOne(user.id);\n\n    if (event.user.id != loggedUser.id) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.USER_IS_NOT_OWNER_OF_EVENT'),\n      );\n    }\n\n    this.notificationsService.deleteAllEventJobs(event);\n\n    const updatedEvent = await this.eventsRepository.save({\n      ...event,\n      ...updateEventInput,\n    });\n\n    const address = await this.updateAddress(\n      event,\n      updateEventInput.eventAddress,\n    );\n\n    updatedEvent.eventAddress = address;\n\n    this.notificationsService.addNewJob(updatedEvent);\n    return updatedEvent;\n  }\n\n  async remove(eventId: string) {\n    try {\n      const event = await this.findOne(eventId);\n      await this.eventsRepository.remove(event);\n\n      return event;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async saveAddress(event: Event, eventAddress: CreateEventAddressInput) {\n    return await this.eventAddressRepository.save({\n      ...eventAddress,\n      event,\n    });\n  }\n\n  async updateAddress(event: Event, eventAddress: CreateEventAddressInput) {\n    const address = await this.eventAddressRepository.findOne({\n      where: { event: event.id },\n    });\n\n    return this.eventAddressRepository.save({ ...address, ...eventAddress });\n  }\n\n  async updateRate(eventId: any, rate: number) {\n    const event = await this.findOne(eventId.id);\n    const updateEvent = event;\n    updateEvent.rate = rate;\n\n    await this.eventsRepository.save({\n      ...event,\n      ...updateEvent,\n    });\n  }\n\n  saveVisit(searchedEvent: Event) {\n    this.eventsRepository\n      .createQueryBuilder()\n      .update(Event)\n      .set({\n        visitCount: () => 'visitCount + 1',\n      })\n      .where('id = :id', { id: searchedEvent.id })\n      .execute();\n  }\n\n  async findAllForCalendar(\n    limit: number,\n    offset: number,\n    field: string,\n    sort: string,\n    query: string,\n    userId: string,\n    type: eventType,\n    startDate: Date,\n    endDate: Date,\n  ) {\n    const startDateFormated = startDate.toISOString().replace('T', ' ');\n    endDate.setHours(23, 59, 59, 999);\n    const endDateFormated = endDate.toISOString().replace('T', ' ');\n\n    const events = this.eventsRepository\n      .createQueryBuilder('events')\n      .innerJoinAndMapOne(\n        'events.user',\n        User,\n        'users',\n        'events.user = users.id',\n      )\n      .leftJoinAndMapOne(\n        'events.eventAddress',\n        EventAddress,\n        'event_address',\n        'events.id = event_address.event',\n      )\n      .leftJoinAndMapOne(\n        'events.loggedInParticipants',\n        Participant,\n        'loggedInParticipants',\n        `events.id = loggedInParticipants.event and loggedInParticipants.user = \"${userId}\"`,\n      )\n      .leftJoinAndMapOne(\n        'loggedInParticipants.user',\n        User,\n        'u2',\n        'loggedInParticipants.user = u2.id',\n      )\n      .where(\n        '(events.title like  :title or events.description like :description)',\n        { title: `%${query}%`, description: `%${query}%` },\n      )\n      .where(\n        `( events.startDate > :startDate and events.startDate  :endDate or\n        events.startDate  :startDate ) and ( events.user = :userId or loggedInParticipants.user = :userId)`,\n        {\n          startDate: `${startDateFormated}`,\n          endDate: `${endDateFormated}`,\n          userId: `${userId}`,\n        },\n      );\n\n    if (type === 0 || type === 1 || type === 2) {\n      events.andWhere('( events.type = :type )', { type: `${type}` });\n    }\n    const totalRecords = await events.getMany();\n\n    events.orderBy(`events.${field}`, 'ASC' == sort ? 'ASC' : 'DESC');\n\n    const eventsMapped = await events.take(limit).skip(offset).getMany();\n\n    return { events: eventsMapped, totalRecords };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GqlAuthGuard.html":{"url":"classes/GqlAuthGuard.html","title":"class - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/gql-auth.guard.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/gql-auth.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExecutionContext } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\n\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext): any {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(validatePayload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validatePayload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { UsersService } from '../../users/users.service';\nimport { User } from '../../users/entities/user.entity';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly usersService: UsersService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(validatePayload: {\n    email: string;\n    id: string;\n  }): Promise {\n    return this.usersService.findByMail(validatePayload.email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalAuthGuard.html":{"url":"classes/LocalAuthGuard.html","title":"class - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/local-auth.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Request\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExecutionContext } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\n\nexport class LocalAuthGuard extends AuthGuard('local') {\n  getRequest(context: ExecutionContext): Request {\n    const ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n\n    req.body = ctx.getArgs().loginUserInput;\n\n    return req;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { I18nService } from 'nestjs-i18n';\nimport { Strategy } from 'passport-local';\nimport { User } from 'src/users/entities/user.entity';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly i18n: I18nService,\n  ) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, pass: string): Promise {\n    const user = await this.authService.validate(email, pass);\n    if (!user.isActive) {\n      throw new UnauthorizedException(\n        await this.i18n.translate('errors.ERROR.USER_NOT_ACTIVE'),\n      );\n    }\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserInput.html":{"url":"classes/LoginUserInput.html","title":"class - LoginUserInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.input.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.input.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class LoginUserInput {\n  @Field()\n  email: string;\n\n  @Field()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { MailService } from './mail.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { Module } from '@nestjs/common';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: async (config: ConfigService) => ({\n        transport: {\n          host: config.get('MAIL_HOST'),\n          secure: false,\n          auth: {\n            user: config.get('MAIL_USER'),\n            pass: config.get('MAIL_PASSWORD'),\n          },\n        },\n        defaults: {\n          from: `\"meet.us\" `,\n        },\n        template: {\n          dir: join(__dirname, 'templates'),\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n        options: {\n          partials: {\n            dir: join(__dirname, 'templates/partials'),\n            options: {\n              strict: true,\n            },\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendInterestedUserMail\n                            \n                            \n                                    Async\n                                sendRateUserMail\n                            \n                            \n                                    Async\n                                sendTakePartUserMail\n                            \n                            \n                                    Async\n                                sendUserRegisterConfirmation\n                            \n                            \n                                    Async\n                                sendUserResetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendInterestedUserMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendInterestedUserMail(email: string, eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendRateUserMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendRateUserMail(email: string, eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendTakePartUserMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendTakePartUserMail(email: string, eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendUserRegisterConfirmation\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendUserRegisterConfirmation(email: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendUserResetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendUserResetPassword(email: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class MailService {\n  constructor(\n    private mailerService: MailerService,\n    private readonly i18n: I18nService,\n  ) {}\n\n  async sendUserRegisterConfirmation(email: string, token: string) {\n    await this.mailerService.sendMail({\n      to: email,\n      subject: await this.i18n.translate(\n        'emails.REGISTER_CONFIRMATION.SUBJECT',\n      ),\n      template: './register-confirmation',\n      context: {\n        token: token,\n        email: email,\n        hostDomain: process.env.HOST_DOMAIN,\n        title: await this.i18n.translate('emails.BODY.EMAIL_VERIFY_TITLE'),\n        emailVerify: await this.i18n.translate('emails.BODY.EMAIL_VERIFY'),\n      },\n    });\n  }\n  async sendUserResetPassword(email: string, token: string) {\n    await this.mailerService.sendMail({\n      to: email,\n      subject: await this.i18n.translate('emails.RESET_PASSWORD.SUBJECT'),\n      template: './reset-password',\n      context: {\n        token: token,\n        email: email,\n        hostDomain: process.env.HOST_DOMAIN,\n        title: await this.i18n.translate('emails.BODY.PASSWORD_RESET'),\n      },\n    });\n  }\n  async sendInterestedUserMail(email: string, eventId: string) {\n    await this.mailerService.sendMail({\n      to: email,\n      subject: await this.i18n.translate('emails.INTERESTED.SUBJECT'),\n      template: './notification-interested',\n      context: {\n        eventId: eventId,\n        email: email,\n        hostDomain: process.env.HOST_DOMAIN,\n        body: await this.i18n.translate('emails.INTERESTED.BODY'),\n      },\n    });\n  }\n  async sendTakePartUserMail(email: string, eventId: string) {\n    await this.mailerService.sendMail({\n      to: email,\n      subject: await this.i18n.translate('emails.TAKE_PART.SUBJECT'),\n      template: './notification-takepart',\n      context: {\n        eventId: eventId,\n        email: email,\n        hostDomain: process.env.HOST_DOMAIN,\n        body: await this.i18n.translate('emails.TAKE_PART.BODY'),\n      },\n    });\n  }\n  async sendRateUserMail(email: string, eventId: string) {\n    await this.mailerService.sendMail({\n      to: email,\n      subject: await this.i18n.translate('emails.RATE.SUBJECT'),\n      template: './notification-rate',\n      context: {\n        eventId: eventId,\n        email: email,\n        hostDomain: process.env.HOST_DOMAIN,\n        body: await this.i18n.translate('emails.RATE.BODY'),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_imports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsModule -->\n\nMailModule->NotificationsModule\n\n\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nNotificationsModule -->\n\nParticipantsModule->NotificationsModule\n\n\n\n\n\nNotificationsService \n\nNotificationsService \n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notifications/notifications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                        \n                            ParticipantsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ParticipantsModule } from 'src/participants/participants.module';\nimport { Module } from '@nestjs/common';\nimport { NotificationsService } from './notifications.service';\nimport { MailModule } from 'src/mail/mail.module';\n\n@Module({\n  imports: [ParticipantsModule, MailModule],\n  providers: [NotificationsService],\n  exports: [NotificationsService],\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationsService.html":{"url":"injectables/NotificationsService.html","title":"injectable - NotificationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addNewJob\n                            \n                            \n                                deleteAllEventJobs\n                            \n                            \n                                deleteJob\n                            \n                            \n                                    Async\n                                sendInterestedUserMail\n                            \n                            \n                                    Async\n                                sendTakePartUserMail\n                            \n                            \n                                    Async\n                                sendUserRateEventMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schedulerRegistry: SchedulerRegistry, participantService: ParticipantsService, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/notifications/notifications.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        participantService\n                                                  \n                                                        \n                                                                        ParticipantsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addNewJob\n                        \n                    \n                \n            \n            \n                \n                    \n                    addNewJob(event: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAllEventJobs\n                        \n                    \n                \n            \n            \n                \ndeleteAllEventJobs(event)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteJob\n                        \n                    \n                \n            \n            \n                \ndeleteJob(jobName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    jobName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendInterestedUserMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendInterestedUserMail(event: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendTakePartUserMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendTakePartUserMail(event: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendUserRateEventMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendUserRateEventMail(event: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/notifications/notifications.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { ParticipantsService } from 'src/participants/participants.service';\nimport { Event } from '../events/entities/event.entity';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { MailService } from 'src/mail/mail.service';\nimport dayjs from 'dayjs';\nimport { CronJob } from 'cron';\n\n@Injectable()\nexport class NotificationsService {\n  constructor(\n    private schedulerRegistry: SchedulerRegistry,\n    @Inject(forwardRef(() => ParticipantsService))\n    private readonly participantService: ParticipantsService,\n    private readonly mailService: MailService,\n  ) {}\n\n  async addNewJob(event: Event) {\n    const sendInterestedUserMail = new CronJob(\n      dayjs(event.startDate).subtract(50, 'minutes').format('mm HH DD MM *'),\n      () => {\n        this.sendInterestedUserMail(event);\n      },\n    );\n\n    const sendTakePartUserMail = new CronJob(\n      dayjs(event.startDate).subtract(15, 'minutes').format('mm HH DD MM *'),\n      () => {\n        this.sendTakePartUserMail(event);\n      },\n    );\n\n    const sendUserRateEventMail = new CronJob(\n      dayjs(event.endDate).add(10, 'minutes').format('mm HH DD MM *'),\n      () => {\n        this.sendUserRateEventMail(event);\n      },\n    );\n\n    const deleteAllEventJobs = new CronJob(\n      dayjs(event.endDate).add(15, 'minutes').format('mm HH DD MM *'),\n      () => {\n        this.deleteAllEventJobs(event);\n      },\n    );\n\n    this.schedulerRegistry.addCronJob(\n      `${event.id}-sendInterestedUserMail`,\n      sendInterestedUserMail,\n    );\n    this.schedulerRegistry.addCronJob(\n      `${event.id}-sendTakePartUserMail`,\n      sendTakePartUserMail,\n    );\n    this.schedulerRegistry.addCronJob(\n      `${event.id}-sendUserRateEventMail`,\n      sendUserRateEventMail,\n    );\n    this.schedulerRegistry.addCronJob(\n      `${event.id}-deleteAllEventJobs`,\n      deleteAllEventJobs,\n    );\n\n    sendInterestedUserMail.start();\n    sendTakePartUserMail.start();\n    sendUserRateEventMail.start();\n    deleteAllEventJobs.start();\n  }\n  deleteJob(jobName: string) {\n    this.schedulerRegistry.deleteCronJob(jobName);\n  }\n\n  async sendInterestedUserMail(event: Event) {\n    const eventOwner = event.user.id;\n    const participants = await this.participantService.findMany(event, 1);\n    for (const participant of participants) {\n      if (participant.user.id !== eventOwner) {\n        this.mailService.sendInterestedUserMail(\n          participant.user.email,\n          event.id,\n        );\n      }\n    }\n  }\n\n  async sendTakePartUserMail(event: Event) {\n    const eventOwner = event.user.id;\n    const participants = await this.participantService.findMany(event, 2);\n    for (const participant of participants) {\n      if (participant.user.id !== eventOwner) {\n        this.mailService.sendTakePartUserMail(participant.user.email, event.id);\n      }\n    }\n  }\n\n  async sendUserRateEventMail(event: Event) {\n    const eventOwner = event.user.id;\n    const participants = await this.participantService.findMany(event, 2);\n\n    for (const participant of participants) {\n      if (participant.user.id !== eventOwner) {\n        this.mailService.sendRateUserMail(participant.user.email, event.id);\n      }\n    }\n  }\n\n  deleteAllEventJobs(event) {\n    this.schedulerRegistry.deleteCronJob(`${event.id}-sendInterestedUserMail`);\n    this.schedulerRegistry.deleteCronJob(`${event.id}-sendTakePartUserMail`);\n    this.schedulerRegistry.deleteCronJob(`${event.id}-sendUserRateEventMail`);\n    this.schedulerRegistry.deleteCronJob(`${event.id}-deleteAllEventJobs`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageData.html":{"url":"classes/PageData.html","title":"class - PageData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pagination/types/page-data.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                limit\n                            \n                            \n                                    Public\n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/page-data.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/page-data.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/types/page-data.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport default class PageData {\n  @Field()\n  public count: number;\n\n  @Field()\n  public limit: number;\n\n  @Field()\n  public offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Participant.html":{"url":"entities/Participant.html","title":"entity - Participant","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Participant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/entities/participant.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                createdAt\n                            \n                            \n                                date\n                            \n                            \n                                event\n                            \n                            \n                                id\n                            \n                            \n                                type\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/entities/participant.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/entities/participant.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/entities/participant.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@ManyToOne(undefined, {nullable: false})@JoinColumn({name: 'event', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/entities/participant.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/entities/participant.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         participationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/entities/participant.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/entities/participant.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@ManyToOne(undefined, {nullable: false})@JoinColumn({name: 'user', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/entities/participant.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ObjectType, Field, registerEnumType } from '@nestjs/graphql';\nimport { Event } from 'src/events/entities/event.entity';\nimport { User } from 'src/users/entities/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum participationType {\n  Canceled,\n  Interested,\n  Going,\n}\n\nregisterEnumType(participationType, {\n  name: 'participationType',\n});\n\n@ObjectType()\n@Entity({\n  name: 'participants',\n})\nexport class Participant {\n  @Field()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Field(() => User)\n  @ManyToOne(() => User, { nullable: false })\n  @JoinColumn({ name: 'user', referencedColumnName: 'id' })\n  user: User;\n\n  @Field(() => Event)\n  @ManyToOne(() => Event, { nullable: false })\n  @JoinColumn({ name: 'event', referencedColumnName: 'id' })\n  event: Event;\n\n  @Field()\n  @Column({ nullable: false })\n  type: participationType;\n\n  @Field()\n  count: number;\n\n  @Field()\n  date: Date;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParticipantByDateListResponse.html":{"url":"classes/ParticipantByDateListResponse.html","title":"class - ParticipantByDateListResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParticipantByDateListResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/dto/participant-list.response copy.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectType } from '@nestjs/graphql';\nimport relayTypes from 'src/pagination/types/relay.types';\nimport ParticipantByDateResponse from './participant-by-date.response';\n\n@ObjectType()\nexport default class ParticipantByDateListResponse extends relayTypes(\n  ParticipantByDateResponse,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParticipantByDateResponse.html":{"url":"classes/ParticipantByDateResponse.html","title":"class - ParticipantByDateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParticipantByDateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/dto/participant-by-date.response.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                date\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/dto/participant-by-date.response.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/dto/participant-by-date.response.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport default class ParticipantByDateResponse {\n  @Field({ nullable: true })\n  date: string;\n\n  @Field({ nullable: true })\n  count: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParticipantListResponse.html":{"url":"classes/ParticipantListResponse.html","title":"class - ParticipantListResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParticipantListResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/dto/participant-list.response.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectType } from '@nestjs/graphql';\nimport relayTypes from 'src/pagination/types/relay.types';\nimport { Participant } from '../entities/participant.entity';\n\n@ObjectType()\nexport default class ParticipantListResponse extends relayTypes(\n  Participant,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParticipantResponse.html":{"url":"classes/ParticipantResponse.html","title":"class - ParticipantResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParticipantResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/dto/participant-response.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                event\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/dto/participant-response.input.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/dto/participant-response.input.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/dto/participant-response.input.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\nimport { User } from 'src/users/entities/user.entity';\nimport { Event } from 'src/events/entities/event.entity';\n\n@InputType()\nexport class ParticipantResponse {\n  @Field()\n  event: Event;\n\n  @Field()\n  user: User;\n\n  @Field()\n  type: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParticipantUpdate.html":{"url":"classes/ParticipantUpdate.html","title":"class - ParticipantUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParticipantUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/dto/participant-update.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventId\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/dto/participant-update.input.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         participationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/dto/participant-update.input.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\nimport { participationType } from '../entities/participant.entity';\n\n@InputType()\nexport class ParticipantUpdate {\n  @Field()\n  eventId: string;\n\n  @Field()\n  type: participationType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParticipantsModule.html":{"url":"modules/ParticipantsModule.html","title":"module - ParticipantsModule","body":"\n                   \n\n\n\n\n    Modules\n    ParticipantsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ParticipantsModule\n\n\n\ncluster_ParticipantsModule_providers\n\n\n\ncluster_ParticipantsModule_exports\n\n\n\ncluster_ParticipantsModule_imports\n\n\n\n\nUserActivityModule\n\nUserActivityModule\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nParticipantsModule -->\n\nUserActivityModule->ParticipantsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nParticipantsModule -->\n\nUsersModule->ParticipantsModule\n\n\n\n\n\nParticipantsService \n\nParticipantsService \n\nParticipantsService  -->\n\nParticipantsModule->ParticipantsService \n\n\n\n\n\nParticipantsService\n\nParticipantsService\n\nParticipantsModule -->\n\nParticipantsService->ParticipantsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/participants/participants.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParticipantsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserActivityModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ParticipantsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { UserActivityModule } from './../user-activity/user-activity.module';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { ParticipantsService } from './participants.service';\nimport { Participant } from './entities/participant.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EventsModule } from 'src/events/events.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { ParticipantsResolver } from './participants.resolver';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Participant]),\n    forwardRef(() => EventsModule),\n    UsersModule,\n    UserActivityModule,\n  ],\n  providers: [ParticipantsService, ParticipantsResolver],\n  exports: [ParticipantsService],\n})\nexport class ParticipantsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParticipantsResolver.html":{"url":"classes/ParticipantsResolver.html","title":"class - ParticipantsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParticipantsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/participants.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                participantsByDate\n                            \n                            \n                                    Async\n                                participantsEvents\n                            \n                            \n                                participateInEvent\n                            \n                            \n                                    Async\n                                userParticipation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(participantService: ParticipantsService)\n                    \n                \n                        \n                            \n                                Defined in src/participants/participants.resolver.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        participantService\n                                                  \n                                                        \n                                                                        ParticipantsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        participantsByDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    participantsByDate(eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'participantsByDate'})\n                \n            \n\n            \n                \n                    Defined in src/participants/participants.resolver.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        participantsEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    participantsEvents(args: ConnectionArgs, eventId: string, userId: string, type: number, query: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'participantsEvents'})\n                \n            \n\n            \n                \n                    Defined in src/participants/participants.resolver.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        participateInEvent\n                        \n                    \n                \n            \n            \n                \nparticipateInEvent(user: User, participantUpdate: ParticipantUpdate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/participants/participants.resolver.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    participantUpdate\n                                    \n                                                ParticipantUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userParticipation\n                        \n                    \n                \n            \n            \n                \n                    \n                    userParticipation(user: User, args: ConnectionArgs, type: number, query: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'userParticipation'})@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/participants/participants.resolver.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseGuards } from '@nestjs/common';\nimport { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { connectionFromArraySlice } from 'graphql-relay';\nimport { CurrentUser } from 'src/auth/current-user.decorator';\nimport { GqlAuthGuard } from 'src/auth/guards/gql-auth.guard';\nimport ConnectionArgs from 'src/pagination/types/connection.args';\nimport { User } from 'src/users/entities/user.entity';\nimport ParticipantByDateResponse from './dto/participant-by-date.response';\nimport ParticipantListResponse from './dto/participant-list.response';\nimport { ParticipantResponse } from './dto/participant-response.input';\nimport { ParticipantUpdate } from './dto/participant-update.input';\nimport { Participant } from './entities/participant.entity';\nimport { ParticipantsService } from './participants.service';\n\n@Resolver()\nexport class ParticipantsResolver {\n  constructor(private readonly participantService: ParticipantsService) {}\n\n  @Mutation(() => Participant)\n  @UseGuards(GqlAuthGuard)\n  participateInEvent(\n    @CurrentUser() user: User,\n    @Args('participateInEvent') participantUpdate: ParticipantUpdate,\n  ): Promise {\n    return this.participantService.participateInEvent(\n      participantUpdate.eventId,\n      user,\n      participantUpdate.type,\n    );\n  }\n\n  @Query(() => ParticipantListResponse, { name: 'participantsEvents' })\n  async participantsEvents(\n    @Args() args: ConnectionArgs,\n    @Args('eventId', { nullable: true }) eventId: string,\n    @Args('userId', { nullable: true }) userId: string,\n    @Args('type', { nullable: true }) type: number,\n    @Args('query', { nullable: true }) query: string,\n  ): Promise {\n    const { limit, offset } = args.pagingParams();\n    const { field, sort } = args.orderParams();\n    const records = await this.participantService.findAll(\n      limit,\n      offset,\n      field,\n      sort,\n      eventId,\n      userId,\n      type,\n      query,\n    );\n    const participants = records.participants;\n    const count = records.totalRecords.length;\n\n    const page = connectionFromArraySlice(participants, args, {\n      arrayLength: count,\n      sliceStart: offset || 0,\n    });\n\n    return { page, pageData: { count, limit, offset } };\n  }\n\n  @Query(() => ParticipantListResponse, { name: 'userParticipation' })\n  @UseGuards(GqlAuthGuard)\n  async userParticipation(\n    @CurrentUser() user: User,\n    @Args() args: ConnectionArgs,\n    @Args('type', { nullable: true }) type: number,\n    @Args('query', { nullable: true }) query: string,\n  ): Promise {\n    const { limit, offset } = args.pagingParams();\n    const { field, sort } = args.orderParams();\n    const records = await this.participantService.findAll(\n      limit,\n      offset,\n      field,\n      sort,\n      null,\n      user.id,\n      type,\n      query,\n    );\n    const participants = records.participants;\n    const count = records.totalRecords.length;\n\n    const page = connectionFromArraySlice(participants, args, {\n      arrayLength: count,\n      sliceStart: offset || 0,\n    });\n\n    return { page, pageData: { count, limit, offset } };\n  }\n\n  @Query(() => [ParticipantByDateResponse], { name: 'participantsByDate' })\n  async participantsByDate(\n    @Args('eventId', { nullable: false }) eventId: string,\n  ) {\n    return await this.participantService.findByDate(eventId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParticipantsService.html":{"url":"injectables/ParticipantsService.html","title":"injectable - ParticipantsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParticipantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/participants.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addUserToEvent\n                            \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByDate\n                            \n                            \n                                findMany\n                            \n                            \n                                    Async\n                                participateInEvent\n                            \n                            \n                                    Async\n                                removeUserFromEvent\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(participantRepository: Repository, eventsService: EventsService, i18n: I18nService, userActivityService: UserActivityService)\n                    \n                \n                        \n                            \n                                Defined in src/participants/participants.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        participantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventsService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userActivityService\n                                                  \n                                                        \n                                                                        UserActivityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addUserToEvent\n                        \n                    \n                \n            \n            \n                \naddUserToEvent(user: User, event: any, type: number)\n                \n            \n\n\n            \n                \n                    Defined in src/participants/participants.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User, event: any, type: number)\n                \n            \n\n\n            \n                \n                    Defined in src/participants/participants.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(user: User, event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/participants/participants.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(limit: number, offset: number, field: string, sort: string, eventId: string, userId: string, type: number, query: string)\n                \n            \n\n\n            \n                \n                    Defined in src/participants/participants.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    field\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sort\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByDate(eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/participants/participants.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findMany\n                        \n                    \n                \n            \n            \n                \nfindMany(event: any, type: number)\n                \n            \n\n\n            \n                \n                    Defined in src/participants/participants.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        participateInEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    participateInEvent(eventId: string, user: User, type: number)\n                \n            \n\n\n            \n                \n                    Defined in src/participants/participants.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFromEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFromEvent(user: User, event: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/participants/participants.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: User, event: any, type: number)\n                \n            \n\n\n            \n                \n                    Defined in src/participants/participants.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Participant } from './entities/participant.entity';\nimport {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { EventsService } from 'src/events/events.service';\nimport { ParticipantResponse } from './dto/participant-response.input';\nimport { User } from 'src/users/entities/user.entity';\nimport { Event } from 'src/events/entities/event.entity';\nimport { I18nService } from 'nestjs-i18n';\nimport ParticipantByDateResponse from './dto/participant-by-date.response';\nimport dayjs from 'dayjs';\nimport { UserActivityService } from 'src/user-activity/user-activity.service';\n\n@Injectable()\nexport class ParticipantsService {\n  constructor(\n    @InjectRepository(Participant)\n    private readonly participantRepository: Repository,\n    @Inject(forwardRef(() => EventsService))\n    private readonly eventsService: EventsService,\n    private readonly i18n: I18nService,\n    private readonly userActivityService: UserActivityService,\n  ) {}\n\n  async participateInEvent(\n    eventId: string,\n    user: User,\n    type: number,\n  ): Promise {\n    const event = await this.eventsService.findOne(eventId);\n\n    if (!event) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.EVENT_NOT_FOUND'),\n      );\n    }\n    if (type == 0) {\n      this.removeUserFromEvent(user, event);\n    } else {\n      this.addUserToEvent(user, event, type);\n    }\n\n    const participantResponse: ParticipantResponse = {\n      user: user,\n      event: event,\n      type: type,\n    };\n\n    return participantResponse;\n  }\n\n  addUserToEvent(user: User, event: any, type: number) {\n    let participate = this.find(user, event);\n    if (!participate) {\n      participate = this.create(user, event, type);\n    } else {\n      participate = this.update(user, event, type);\n    }\n  }\n\n  create(user: User, event: any, type: number) {\n    const participate = this.participantRepository.save({\n      type: type,\n      user: user,\n      event: event,\n    });\n\n    this.userActivityService.saveParticipantActivity(type, user, event);\n\n    return participate;\n  }\n\n  find(user: User, event: any) {\n    const participate = this.participantRepository.findOne({\n      relations: ['user', 'event'],\n      where: { event: event, user: user },\n    });\n    return participate;\n  }\n  findMany(event: any, type: number) {\n    return this.participantRepository.find({\n      relations: ['user', 'event'],\n      where: { event: event, type: type },\n    });\n  }\n\n  async update(user: User, event: any, type: number) {\n    const participate = await this.find(user, event);\n    const update = await this.participantRepository.create({\n      type: type,\n      user: user,\n      event: event,\n    });\n\n    const result = await this.participantRepository.save({\n      ...participate,\n      ...update,\n    });\n\n    this.userActivityService.saveParticipantActivity(type, user, event);\n\n    return result;\n  }\n\n  async removeUserFromEvent(user: User, event: Event) {\n    const participantRemove = await this.find(user, event);\n    const result = await this.participantRepository.remove(participantRemove);\n\n    return result;\n  }\n\n  async findAll(\n    limit: number,\n    offset: number,\n    field: string,\n    sort: string,\n    eventId: string,\n    userId: string,\n    type: number,\n    query: string,\n  ) {\n    const participants = this.participantRepository\n      .createQueryBuilder('participants')\n      .innerJoinAndMapOne(\n        'participants.user',\n        User,\n        'users',\n        'participants.user = users.id',\n      )\n      .innerJoinAndMapOne(\n        'participants.event',\n        Event,\n        'events',\n        'participants.event = events.id',\n      );\n    if (query) {\n      participants.andWhere(\n        '(events.title like  :title or events.description like :description)',\n        { title: `%${query}%`, description: `%${query}%` },\n      );\n    }\n\n    if (eventId) {\n      participants.andWhere('(participants.event = :id)', { id: eventId });\n    }\n\n    if (userId) {\n      participants.andWhere('(participants.user = :id)', { id: userId });\n    }\n\n    if (type == 2 || type == 1) {\n      participants.andWhere('(participants.type = :type)', { type: type });\n    }\n\n    participants.orderBy(\n      `participants.${field}`,\n      'ASC' == sort ? 'ASC' : 'DESC',\n    );\n\n    const totalRecords = await participants.getMany();\n    const participantsMapped = await participants\n      .take(limit)\n      .skip(offset)\n      .getMany();\n\n    return { participants: participantsMapped, totalRecords };\n  }\n\n  async findByDate(eventId: string) {\n    const participants = await this.participantRepository\n      .query(`select  count(user) as count, CAST(updatedAt AS DATE) AS date FROM participants\n          where event = \"${eventId}\"\n          group by  CAST(updatedAt AS DATE)\n          order by CAST(updatedAt AS DATE) DESC LIMIT 5`);\n\n    const participantByDateResponse = participants.map(\n      (participants: ParticipantByDateResponse) => {\n        return {\n          count: participants.count,\n          date: dayjs(participants.date).format('DD/MM/YYYY'),\n        };\n      },\n    );\n\n    return participantByDateResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueryResolver.html":{"url":"injectables/QueryResolver.html","title":"injectable - QueryResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueryResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/i18n/QueryResolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/i18n/QueryResolver.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { I18nResolver } from 'nestjs-i18n';\n\n@Injectable()\nexport class QueryResolver implements I18nResolver {\n  resolve(context: ExecutionContext) {\n    let req: any;\n\n    switch (context.getType() as string) {\n      case 'http':\n        req = context.switchToHttp().getRequest();\n        break;\n      case 'graphql':\n        [, , { req }] = context.getArgs();\n        break;\n    }\n\n    return req.headers['accept-language'] || 'en';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueryResolver-1.html":{"url":"injectables/QueryResolver-1.html","title":"injectable - QueryResolver-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueryResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            dist/src/i18n/QueryResolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in dist/src/i18n/QueryResolver.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { I18nResolver } from 'nestjs-i18n';\n\n@Injectable()\nexport class QueryResolver implements I18nResolver {\n  resolve(context: ExecutionContext) {\n    let req: any;\n\n    switch (context.getType() as string) {\n      case 'http':\n        req = context.switchToHttp().getRequest();\n        break;\n      case 'graphql':\n        [, , { req }] = context.getArgs();\n        break;\n    }\n\n    return req.headers['accept-language'] || 'en';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Rating.html":{"url":"entities/Rating.html","title":"entity - Rating","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Rating\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ratings/entities/rating.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                event\n                            \n                            \n                                id\n                            \n                            \n                                rate\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/entities/rating.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@ManyToOne(undefined, {nullable: false})@JoinColumn({name: 'event', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/entities/rating.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/entities/rating.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: false})@Min(1)@Max(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/entities/rating.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/entities/rating.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@ManyToOne(undefined, {nullable: false})@JoinColumn({name: 'user', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/entities/rating.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ObjectType, Field } from '@nestjs/graphql';\nimport { Max, Min } from 'class-validator';\nimport { Event } from 'src/events/entities/event.entity';\nimport { User } from 'src/users/entities/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@ObjectType()\n@Entity({\n  name: 'ratings',\n})\nexport class Rating {\n  @Field()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Field(() => User)\n  @ManyToOne(() => User, { nullable: false })\n  @JoinColumn({ name: 'user', referencedColumnName: 'id' })\n  user: User;\n\n  @Field(() => Event)\n  @ManyToOne(() => Event, { nullable: false })\n  @JoinColumn({ name: 'event', referencedColumnName: 'id' })\n  event: Event;\n\n  @Field()\n  @Column({ nullable: false })\n  @Min(1)\n  @Max(5)\n  rate: number;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RatingListResponse.html":{"url":"classes/RatingListResponse.html","title":"class - RatingListResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RatingListResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ratings/dto/rating-list.response.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Rating } from './../entities/rating.entity';\nimport { ObjectType } from '@nestjs/graphql';\nimport relayTypes from 'src/pagination/types/relay.types';\n\n@ObjectType()\nexport default class RatingListResponse extends relayTypes(Rating) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RatingResponse.html":{"url":"classes/RatingResponse.html","title":"class - RatingResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RatingResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ratings/dto/rating-response.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                event\n                            \n                            \n                                rate\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/dto/rating-response.input.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/dto/rating-response.input.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/dto/rating-response.input.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\nimport { User } from 'src/users/entities/user.entity';\nimport { Event } from 'src/events/entities/event.entity';\n\n@InputType()\nexport class RatingResponse {\n  @Field()\n  event: Event;\n\n  @Field()\n  user: User;\n\n  @Field()\n  rate: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RatingUpdate.html":{"url":"classes/RatingUpdate.html","title":"class - RatingUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RatingUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ratings/dto/rating-update.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventId\n                            \n                            \n                                rate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/dto/rating-update.input.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Min(1)@Max(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ratings/dto/rating-update.input.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\nimport { Max, Min } from 'class-validator';\n\n@InputType()\nexport class RatingUpdate {\n  @Field()\n  eventId: string;\n\n  @Field()\n  @Min(1)\n  @Max(5)\n  rate: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RatingsModule.html":{"url":"modules/RatingsModule.html","title":"module - RatingsModule","body":"\n                   \n\n\n\n\n    Modules\n    RatingsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RatingsModule\n\n\n\ncluster_RatingsModule_providers\n\n\n\ncluster_RatingsModule_imports\n\n\n\n\nEventsModule\n\nEventsModule\n\n\n\nRatingsModule\n\nRatingsModule\n\nRatingsModule -->\n\nEventsModule->RatingsModule\n\n\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nRatingsModule -->\n\nParticipantsModule->RatingsModule\n\n\n\n\n\nUserActivityModule\n\nUserActivityModule\n\nRatingsModule -->\n\nUserActivityModule->RatingsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nRatingsModule -->\n\nUsersModule->RatingsModule\n\n\n\n\n\nRatingsService\n\nRatingsService\n\nRatingsModule -->\n\nRatingsService->RatingsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/ratings/ratings.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RatingsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EventsModule\n                        \n                        \n                            ParticipantsModule\n                        \n                        \n                            UserActivityModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ParticipantsModule } from './../participants/participants.module';\nimport { RatingsResolver } from './ratings.resolver';\nimport { Rating } from './entities/rating.entity';\nimport { Module } from '@nestjs/common';\nimport { RatingsService } from './ratings.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EventsModule } from 'src/events/events.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { UserActivityModule } from 'src/user-activity/user-activity.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Rating]),\n    EventsModule,\n    UsersModule,\n    ParticipantsModule,\n    UserActivityModule,\n  ],\n  providers: [RatingsService, RatingsResolver],\n})\nexport class RatingsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RatingsResolver.html":{"url":"classes/RatingsResolver.html","title":"class - RatingsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RatingsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ratings/ratings.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                rateEvent\n                            \n                            \n                                    Async\n                                ratingsEvents\n                            \n                            \n                                    Async\n                                userRates\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ratingsService: RatingsService)\n                    \n                \n                        \n                            \n                                Defined in src/ratings/ratings.resolver.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ratingsService\n                                                  \n                                                        \n                                                                        RatingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        rateEvent\n                        \n                    \n                \n            \n            \n                \nrateEvent(user: User, ratingUpdate: RatingUpdate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/ratings/ratings.resolver.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ratingUpdate\n                                    \n                                                RatingUpdate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ratingsEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    ratingsEvents(args: ConnectionArgs, eventId: string, userId: string, query: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'ratingsEvents'})\n                \n            \n\n            \n                \n                    Defined in src/ratings/ratings.resolver.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userRates\n                        \n                    \n                \n            \n            \n                \n                    \n                    userRates(user: User, args: ConnectionArgs, query: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'userRates'})@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/ratings/ratings.resolver.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RatingsService } from './ratings.service';\nimport { Rating } from './entities/rating.entity';\nimport { UseGuards } from '@nestjs/common';\nimport { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { connectionFromArraySlice } from 'graphql-relay';\nimport { CurrentUser } from 'src/auth/current-user.decorator';\nimport { GqlAuthGuard } from 'src/auth/guards/gql-auth.guard';\nimport ConnectionArgs from 'src/pagination/types/connection.args';\nimport { User } from 'src/users/entities/user.entity';\n\nimport RatingListResponse from './dto/rating-list.response';\nimport { RatingUpdate } from './dto/rating-update.input';\nimport { RatingResponse } from './dto/rating-response.input';\n\n@Resolver()\nexport class RatingsResolver {\n  constructor(private readonly ratingsService: RatingsService) {}\n\n  @Mutation(() => Rating)\n  @UseGuards(GqlAuthGuard)\n  rateEvent(\n    @CurrentUser() user: User,\n    @Args('rateEvent') ratingUpdate: RatingUpdate,\n  ): Promise {\n    return this.ratingsService.rateEvent(\n      ratingUpdate.eventId,\n      user,\n      ratingUpdate.rate,\n    );\n  }\n\n  @Query(() => RatingListResponse, { name: 'ratingsEvents' })\n  async ratingsEvents(\n    @Args() args: ConnectionArgs,\n    @Args('eventId', { nullable: true }) eventId: string,\n    @Args('userId', { nullable: true }) userId: string,\n    @Args('query', { nullable: true }) query: string,\n  ): Promise {\n    const { limit, offset } = args.pagingParams();\n    const { field, sort } = args.orderParams();\n    const records = await this.ratingsService.findAll(\n      limit,\n      offset,\n      field,\n      sort,\n      eventId,\n      userId,\n      query,\n    );\n    const ratings = records.ratings;\n    const count = records.totalRecords.length;\n\n    const page = connectionFromArraySlice(ratings, args, {\n      arrayLength: count,\n      sliceStart: offset || 0,\n    });\n\n    return { page, pageData: { count, limit, offset } };\n  }\n\n  @Query(() => RatingListResponse, { name: 'userRates' })\n  @UseGuards(GqlAuthGuard)\n  async userRates(\n    @CurrentUser() user: User,\n    @Args() args: ConnectionArgs,\n    @Args('query', { nullable: true }) query: string,\n  ): Promise {\n    const { limit, offset } = args.pagingParams();\n    const { field, sort } = args.orderParams();\n    const records = await this.ratingsService.findAll(\n      limit,\n      offset,\n      field,\n      sort,\n      null,\n      user.id,\n      query,\n    );\n    const ratings = records.ratings;\n    const count = records.totalRecords.length;\n\n    const page = connectionFromArraySlice(ratings, args, {\n      arrayLength: count,\n      sliceStart: offset || 0,\n    });\n\n    return { page, pageData: { count, limit, offset } };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RatingsService.html":{"url":"injectables/RatingsService.html","title":"injectable - RatingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RatingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ratings/ratings.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addRateToEvent\n                            \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                rateEvent\n                            \n                            \n                                    Async\n                                removeRateFromEvent\n                            \n                            \n                                    Async\n                                removeUserFromEvent\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateRate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ratingRepository: Repository, eventsService: EventsService, participantsService: ParticipantsService, i18n: I18nService, userActivityService: UserActivityService)\n                    \n                \n                        \n                            \n                                Defined in src/ratings/ratings.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ratingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventsService\n                                                  \n                                                        \n                                                                        EventsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        participantsService\n                                                  \n                                                        \n                                                                        ParticipantsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userActivityService\n                                                  \n                                                        \n                                                                        UserActivityService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addRateToEvent\n                        \n                    \n                \n            \n            \n                \naddRateToEvent(user: User, event: Event, rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ratings/ratings.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User, event: any, rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ratings/ratings.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(user: User, event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/ratings/ratings.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(limit: number, offset: number, field: string, sort: string, eventId: string, userId: string, query: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ratings/ratings.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    field\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sort\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rateEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    rateEvent(eventId: string, user: User, rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ratings/ratings.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRateFromEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRateFromEvent(user: User, event: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/ratings/ratings.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFromEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFromEvent(user: User, event: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/ratings/ratings.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: User, event: any, rate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/ratings/ratings.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRate(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/ratings/ratings.service.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ParticipantsService } from './../participants/participants.service';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { I18nService } from 'nestjs-i18n';\nimport { Event } from 'src/events/entities/event.entity';\nimport { EventsService } from 'src/events/events.service';\nimport { User } from 'src/users/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { RatingResponse } from './dto/rating-response.input';\nimport { Rating } from './entities/rating.entity';\nimport { UserActivityService } from 'src/user-activity/user-activity.service';\n\n@Injectable()\nexport class RatingsService {\n  constructor(\n    @InjectRepository(Rating)\n    private readonly ratingRepository: Repository,\n    private readonly eventsService: EventsService,\n    private readonly participantsService: ParticipantsService,\n    private readonly i18n: I18nService,\n    private readonly userActivityService: UserActivityService,\n  ) {}\n\n  async rateEvent(\n    eventId: string,\n    user: User,\n    rate: number,\n  ): Promise {\n    const event = await this.eventsService.findOne(eventId);\n\n    if (!event) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.EVENT_NOT_FOUND'),\n      );\n    }\n    const endDate = new Date(event.endDate);\n    const today = new Date();\n\n    if (endDate > today) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.EVENT_IS_NOT_OVER'),\n      );\n    }\n\n    const participate = await this.participantsService.find(user, event);\n\n    if (!participate) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.USER_NOT_PARTICIPATE_IN_EVENT'),\n      );\n    }\n\n    if (rate == 0) {\n      await this.removeRateFromEvent(user, event);\n    } else {\n      if (rate > 5) rate = 5;\n\n      await this.addRateToEvent(user, event, rate);\n    }\n\n    const rateResponse: RatingResponse = {\n      user: user,\n      event: event,\n      rate: rate,\n    };\n\n    return rateResponse;\n  }\n  async removeRateFromEvent(user: User, event: Event) {\n    const participantRemove = await this.find(user, event);\n    const result = await this.ratingRepository.remove(participantRemove);\n\n    return result;\n  }\n\n  addRateToEvent(user: User, event: Event, rate: number) {\n    let rating = this.find(user, event);\n    if (!rating) {\n      rating = this.create(user, event, rate);\n    } else {\n      rating = this.update(user, event, rate);\n    }\n  }\n\n  create(user: User, event: any, rate: number) {\n    const rating = this.ratingRepository.save({\n      rate: rate,\n      user: user,\n      event: event,\n    });\n\n    this.updateRate(event);\n\n    this.userActivityService.saveRateActivity(rate, user, event);\n\n    return rating;\n  }\n\n  find(user: User, event: any) {\n    const rating = this.ratingRepository.findOne({\n      relations: ['user', 'event'],\n      where: { event: event, user: user },\n    });\n    return rating;\n  }\n\n  async update(user: User, event: any, rate: number) {\n    const rating = await this.find(user, event);\n    const update = await this.ratingRepository.create({\n      rate: rate,\n      user: user,\n      event: event,\n    });\n\n    const result = await this.ratingRepository.save({\n      ...rating,\n      ...update,\n    });\n\n    this.userActivityService.saveRateActivity(rate, user, event);\n\n    this.updateRate(event);\n\n    return result;\n  }\n\n  async removeUserFromEvent(user: User, event: Event) {\n    const rateRemove = await this.find(user, event);\n    const result = await this.ratingRepository.remove(rateRemove);\n\n    return result;\n  }\n\n  async findAll(\n    limit: number,\n    offset: number,\n    field: string,\n    sort: string,\n    eventId: string,\n    userId: string,\n    query: string,\n  ) {\n    const ratings = this.ratingRepository\n      .createQueryBuilder('ratings')\n      .innerJoinAndMapOne(\n        'ratings.user',\n        User,\n        'users',\n        'ratings.user = users.id',\n      )\n      .innerJoinAndMapOne(\n        'ratings.event',\n        Event,\n        'events',\n        'ratings.event = events.id',\n      );\n\n    if (query) {\n      ratings.andWhere(\n        '(events.title like  :title or events.description like :description)',\n        { title: `%${query}%`, description: `%${query}%` },\n      );\n    }\n\n    if (userId) {\n      ratings.andWhere('(ratings.user = :id)', { id: userId });\n    }\n\n    if (eventId) {\n      ratings.andWhere('(ratings.event = :id)', { id: eventId });\n    }\n\n    ratings.orderBy(`ratings.${field}`, 'ASC' == sort ? 'ASC' : 'DESC');\n\n    const totalRecords = await ratings.getMany();\n    const ratingsMapped = await ratings.take(limit).skip(offset).getMany();\n\n    return { ratings: ratingsMapped, totalRecords };\n  }\n\n  async updateRate(event: any) {\n    const [ratings, count] = await this.ratingRepository.findAndCount({\n      relations: ['event'],\n      where: { event: event },\n    });\n\n    let sum = 0;\n    for (const rating of ratings) {\n      sum += rating.rate;\n    }\n\n    const rate = sum / count;\n\n    await this.eventsService.updateRate(event, rate);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshUserToken.html":{"url":"classes/RefreshUserToken.html","title":"class - RefreshUserToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshUserToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-user-token.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-user-token.input.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class RefreshUserToken {\n  @Field()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordInput.html":{"url":"classes/ResetPasswordInput.html","title":"class - ResetPasswordInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/reset-password.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/reset-password.input.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class ResetPasswordInput {\n  @Field()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordTokenInput.html":{"url":"classes/ResetPasswordTokenInput.html","title":"class - ResetPasswordTokenInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordTokenInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/reset-password-token.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                newPassword\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Length(8, 20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password should contains a capital letter and a number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/reset-password-token.input.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Length(8, 20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password should contains a capital letter and a number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/reset-password-token.input.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/reset-password-token.input.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\nimport { Matches, Length } from 'class-validator';\n\n@InputType()\nexport class ResetPasswordTokenInput {\n  @Field()\n  token: string;\n\n  @Field()\n  @Length(8, 20)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password should contains a capital letter and a number',\n  })\n  newPassword: string;\n\n  @Field()\n  @Length(8, 20)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password should contains a capital letter and a number',\n  })\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetResponse.html":{"url":"classes/ResetResponse.html","title":"class - ResetResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.resolver.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Resolver,\n  Query,\n  Mutation,\n  Args,\n  ObjectType,\n  Field,\n} from '@nestjs/graphql';\nimport { UsersService } from './users.service';\nimport { User } from './entities/user.entity';\nimport { CreateUserInput } from './dto/create-user.input';\nimport { UpdateUserInput } from './dto/update-user.input';\nimport { GqlAuthGuard } from '../auth/guards/gql-auth.guard';\nimport { UseGuards } from '@nestjs/common';\nimport { CurrentUser } from 'src/auth/current-user.decorator';\nimport { ActivateUserInput } from './dto/activate-user.input';\nimport { connectionFromArraySlice } from 'graphql-relay';\nimport ConnectionArgs from 'src/pagination/types/connection.args';\nimport UserResponse from './dto/user.response';\nimport { ResetPasswordInput } from './dto/reset-password.input';\nimport { ResetPasswordTokenInput } from './dto/reset-password-token.input';\n\n@ObjectType()\nexport class ResetResponse {\n  @Field()\n  message: string;\n}\n\n@Resolver(() => User)\nexport class UsersResolver {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Mutation(() => User)\n  createUser(@Args('createUserInput') createUserInput: CreateUserInput) {\n    return this.usersService.create(createUserInput);\n  }\n\n  @Mutation(() => User)\n  activateUser(@Args('activateUser') activateUserInput: ActivateUserInput) {\n    return this.usersService.activateUser(activateUserInput);\n  }\n\n  @Query(() => UserResponse, { name: 'users' })\n  async findAll(@Args() args: ConnectionArgs): Promise {\n    const { limit, offset } = args.pagingParams();\n    const { field, sort } = args.orderParams();\n    const [events, count] = await this.usersService.findAll(\n      limit,\n      offset,\n      field,\n      sort,\n    );\n    const page = connectionFromArraySlice(events, args, {\n      arrayLength: count,\n      sliceStart: offset || 0,\n    });\n\n    return { page, pageData: { count, limit, offset } };\n  }\n\n  @Query(() => User, { name: 'user' })\n  findOne(@Args('id') userId: string) {\n    return this.usersService.findOne(userId);\n  }\n\n  @Query(() => User, { name: 'currentUser' })\n  @UseGuards(GqlAuthGuard)\n  currentUser(@CurrentUser() user: User) {\n    return this.usersService.findOne(user.id);\n  }\n\n  @Mutation(() => User)\n  @UseGuards(GqlAuthGuard)\n  updateUser(\n    @CurrentUser() user: User,\n    @Args({\n      name: 'updateUserInput',\n    })\n    updateUserInput: UpdateUserInput,\n  ) {\n    return this.usersService.update(\n      updateUserInput.id ? updateUserInput.id : user.id,\n      updateUserInput,\n    );\n  }\n\n  @Mutation(() => User)\n  @UseGuards(GqlAuthGuard)\n  removeUser(@Args('id') id: string) {\n    return this.usersService.remove(id);\n  }\n\n  @Mutation(() => ResetResponse)\n  resetPassword(\n    @Args('resetPasswordInput') resetPasswordInput: ResetPasswordInput,\n  ) {\n    return this.usersService.resetPassword(resetPasswordInput.email);\n  }\n\n  @Mutation(() => ResetResponse)\n  confirmResetPassword(\n    @Args('confirmResetPassword')\n    resetPasswordTokenInput: ResetPasswordTokenInput,\n  ) {\n    return this.usersService.resetPasswordToken(resetPasswordTokenInput);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/entities/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                type\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entities/tag.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entities/tag.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entities/tag.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entities/tag.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/entities/tag.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { eventType } from './../../events/entities/event.entity';\nimport { ObjectType, Field, registerEnumType } from '@nestjs/graphql';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nregisterEnumType(eventType, {\n  name: 'eventType',\n});\n\n@ObjectType()\n@Entity({\n  name: 'tags',\n})\nexport class Tag {\n  @Field()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Field()\n  @Column({ nullable: false })\n  type: eventType;\n\n  @Field()\n  @Column({ nullable: false })\n  name: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService\n\nTagsService\n\n\n\nTagsModule\n\nTagsModule\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsService } from './tags.service';\nimport { TagsResolver } from './tags.resolver';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './entities/tag.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService, TagsResolver],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TagsResolver.html":{"url":"classes/TagsResolver.html","title":"class - TagsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TagsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.resolver.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        tags\n                        \n                    \n                \n            \n            \n                \n                    \n                    tags(type: eventType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'tags'})\n                \n            \n\n            \n                \n                    Defined in src/tags/tags.resolver.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                eventType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { eventType } from 'src/events/entities/event.entity';\nimport { Args, Query, Resolver } from '@nestjs/graphql';\nimport { Tag } from './entities/tag.entity';\nimport { TagsService } from './tags.service';\n\n@Resolver()\nexport class TagsResolver {\n  constructor(private readonly tagsService: TagsService) {}\n\n  @Query(() => [Tag], { name: 'tags' })\n  async tags(\n    @Args('type', { nullable: true }) type: eventType,\n  ): Promise {\n    return await this.tagsService.getTypes(type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTypes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTypes(type: eventType)\n                \n            \n\n\n            \n                \n                    Defined in src/tags/tags.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                eventType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { eventType } from 'src/events/entities/event.entity';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Tag } from './entities/tag.entity';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n\n  async getTypes(type: eventType) {\n    return await this.tagsRepository.find({ where: { type: type } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenService.html":{"url":"injectables/TokenService.html","title":"injectable - TokenService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/token/token.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                encryptionIV\n                            \n                            \n                                    Readonly\n                                encryptionKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createToken\n                            \n                            \n                                decrypt\n                            \n                            \n                                encrypt\n                            \n                            \n                                prepareData\n                            \n                            \n                                validateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/token/token.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decrypt\n                        \n                    \n                \n            \n            \n                \ndecrypt(token)\n                \n            \n\n\n            \n                \n                    Defined in src/users/token/token.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encrypt\n                        \n                    \n                \n            \n            \n                \nencrypt(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/token/token.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareData\n                        \n                    \n                \n            \n            \n                \nprepareData(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/token/token.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateDate\n                        \n                    \n                \n            \n            \n                \nvalidateDate(date)\n                \n            \n\n\n            \n                \n                    Defined in src/users/token/token.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        encryptionIV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.ENCRYPTION_IV\n                    \n                \n                    \n                        \n                                Defined in src/users/token/token.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        encryptionKey\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.ENCRYPTION_KEY\n                    \n                \n                    \n                        \n                                Defined in src/users/token/token.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { User } from '../entities/user.entity';\nimport { createDecipheriv, createCipheriv } from 'crypto';\nimport { sign } from 'jsonwebtoken';\n\n@Injectable()\nexport class TokenService {\n  readonly encryptionKey = process.env.ENCRYPTION_KEY;\n  readonly encryptionIV = process.env.ENCRYPTION_IV;\n\n  encrypt(userId: string) {\n    const dataToEncrypt = this.prepareData(userId);\n    const cipher = createCipheriv(\n      'aes-256-cbc',\n      this.encryptionKey,\n      this.encryptionIV,\n    );\n    let encrypted = '';\n    try {\n      encrypted = cipher.update(dataToEncrypt, 'utf8', 'base64');\n      encrypted += cipher.final('base64');\n    } catch (error) {\n      throw new BadRequestException('Token is incorrect');\n    }\n\n    return encrypted;\n  }\n\n  decrypt(token) {\n    const decipher = createDecipheriv(\n      'aes-256-cbc',\n      this.encryptionKey,\n      this.encryptionIV,\n    );\n    let decryptedToken = '';\n    try {\n      const decrypted = decipher.update(token, 'base64', 'utf8');\n      decryptedToken = decrypted + decipher.final('utf8');\n    } catch (error) {\n      throw new BadRequestException('Token is incorrect');\n    }\n\n    return JSON.parse(decryptedToken);\n  }\n\n  prepareData(userId: string) {\n    const activationDate = new Date();\n    activationDate.setHours(activationDate.getHours() + 24);\n\n    return JSON.stringify({\n      userId: userId,\n      validityDate: activationDate,\n    });\n  }\n\n  validateDate(date) {\n    if (date \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCompanyInput.html":{"url":"classes/UpdateCompanyInput.html","title":"class - UpdateCompanyInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCompanyInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/dto/update-company.input.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, PartialType } from '@nestjs/graphql';\nimport { CreateCompanyInput } from './create-company.input';\n\n@InputType()\nexport class UpdateCompanyInput extends PartialType(CreateCompanyInput) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEventInput.html":{"url":"classes/UpdateEventInput.html","title":"class - UpdateEventInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEventInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/dto/update-event.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/dto/update-event.input.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateEventInput } from './create-event.input';\nimport { InputType, Field, PartialType } from '@nestjs/graphql';\n\n@InputType()\nexport class UpdateEventInput extends PartialType(CreateEventInput) {\n  @Field()\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserInput.html":{"url":"classes/UpdateUserInput.html","title":"class - UpdateUserInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                lastname\n                            \n                            \n                                nickname\n                            \n                            \n                                password\n                            \n                            \n                                sex\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.input.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@IsEmail()@Length(4, 50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.input.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.input.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.input.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.input.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.input.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Length(8, 20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password should contains a capital letter and a number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.input.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Min(0)@Max(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.input.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserInput } from './create-user.input';\nimport { InputType, Field, PartialType } from '@nestjs/graphql';\nimport { IsEmail, Length, Matches, Max, Min } from 'class-validator';\n\n@InputType()\nexport class UpdateUserInput extends PartialType(CreateUserInput) {\n  @Field({\n    nullable: true,\n  })\n  id: string;\n  @Field({\n    nullable: true,\n  })\n  @IsEmail()\n  @Length(4, 50)\n  email: string;\n  @Field({\n    nullable: true,\n  })\n  firstName: string;\n  @Field({\n    nullable: true,\n  })\n  @Length(8, 20)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password should contains a capital letter and a number',\n  })\n  password: string;\n  @Field({\n    nullable: true,\n  })\n  lastname: string;\n  @Field({\n    nullable: true,\n  })\n  nickname: string;\n  @Field({\n    nullable: true,\n  })\n  @Min(0)\n  @Max(1)\n  sex: number;\n  @Field({\n    nullable: true,\n  })\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                company\n                            \n                            \n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                lastname\n                            \n                            \n                                nickname\n                            \n                            \n                                password\n                            \n                            \n                                refreshToken\n                            \n                            \n                                refreshTokenExpires\n                            \n                            \n                                resetPasswordExpires\n                            \n                            \n                                resetPasswordToken\n                            \n                            \n                                sex\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Company\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@OneToOne(undefined, company => company.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column('mediumtext', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: false})@Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({unique: false, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshTokenExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordExpires\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPasswordToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Sex\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ObjectType, Field, registerEnumType } from '@nestjs/graphql';\nimport { Company } from 'src/companies/entities/company.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum Sex {\n  Female,\n  Male,\n}\n\nregisterEnumType(Sex, {\n  name: 'sex',\n});\n\n@ObjectType()\n@Entity({\n  name: 'users',\n})\nexport class User {\n  @Field()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  firstName: string;\n\n  @Field({ nullable: true })\n  @Column({ unique: false, nullable: true })\n  lastname: string;\n\n  @Field({ nullable: false })\n  @Column({ unique: true, nullable: false })\n  email: string;\n\n  @Field()\n  @Column({ default: false })\n  isActive: boolean;\n\n  @Field({ nullable: true })\n  @Column({ unique: true, nullable: true })\n  nickname: string;\n\n  @Field({ nullable: true })\n  @Column({ nullable: true })\n  sex: Sex;\n\n  @Field({ nullable: true })\n  @Column('mediumtext', { nullable: true })\n  description: string;\n\n  @Column({ nullable: false })\n  password: string;\n\n  @Column({ nullable: true })\n  resetPasswordToken: string;\n\n  @Column({ nullable: true })\n  resetPasswordExpires: Date;\n\n  @Column({ nullable: true })\n  refreshToken: string;\n\n  @Column({ nullable: true })\n  refreshTokenExpires: Date;\n\n  @Field({ nullable: true })\n  @OneToOne(() => Company, (company) => company.user)\n  company?: Company;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserActivity.html":{"url":"entities/UserActivity.html","title":"entity - UserActivity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserActivity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-activity/entities/userActivity.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                actionType\n                            \n                            \n                                count\n                            \n                            \n                                createdAt\n                            \n                            \n                                eventType\n                            \n                            \n                                id\n                            \n                            \n                                score\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user\n                            \n                            \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        actionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         actionType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/entities/userActivity.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/entities/userActivity.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/entities/userActivity.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/entities/userActivity.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/entities/userActivity.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/entities/userActivity.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/entities/userActivity.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@ManyToOne(undefined, {nullable: false})@JoinColumn({name: 'user', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/entities/userActivity.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({type: 'decimal', precision: 6, scale: 2, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/entities/userActivity.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { eventType } from 'src/events/entities/event.entity';\nimport { ObjectType, Field, registerEnumType } from '@nestjs/graphql';\nimport { User } from 'src/users/entities/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport enum actionType {\n  Category,\n  Duration,\n  TakePart,\n  Interested,\n  Distance,\n  Rate,\n  Visit,\n}\n\nregisterEnumType(actionType, {\n  name: 'actionType',\n});\n\nregisterEnumType(eventType, {\n  name: 'eventType',\n});\n@ObjectType()\n@Entity({\n  name: 'user_activity',\n})\nexport class UserActivity {\n  @Field()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Field(() => User)\n  @ManyToOne(() => User, { nullable: false })\n  @JoinColumn({ name: 'user', referencedColumnName: 'id' })\n  user: User;\n\n  @Field()\n  @Column({ nullable: true })\n  actionType: actionType;\n\n  @Field()\n  @Column({ nullable: true })\n  eventType: eventType;\n\n  @Field()\n  @Column({ nullable: false })\n  count: number;\n\n  @Field()\n  @Column({ nullable: false })\n  score: number;\n\n  @Field()\n  @Column({ type: 'decimal', precision: 6, scale: 2, nullable: true })\n  weight: number;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserActivityModule.html":{"url":"modules/UserActivityModule.html","title":"module - UserActivityModule","body":"\n                   \n\n\n\n\n    Modules\n    UserActivityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserActivityModule\n\n\n\ncluster_UserActivityModule_exports\n\n\n\ncluster_UserActivityModule_providers\n\n\n\ncluster_UserActivityModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nUserActivityModule\n\nUserActivityModule\n\nUserActivityModule -->\n\nUsersModule->UserActivityModule\n\n\n\n\n\nUserActivityService \n\nUserActivityService \n\nUserActivityService  -->\n\nUserActivityModule->UserActivityService \n\n\n\n\n\nUserActivityService\n\nUserActivityService\n\nUserActivityModule -->\n\nUserActivityService->UserActivityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-activity/user-activity.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserActivityService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserActivityService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { UsersModule } from 'src/users/users.module';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserActivity } from './entities/userActivity.entity';\nimport { UserActivityService } from './user-activity.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserActivity]), UsersModule],\n  providers: [UserActivityService],\n  exports: [UserActivityService],\n})\nexport class UserActivityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserActivitySave.html":{"url":"classes/UserActivitySave.html","title":"class - UserActivitySave","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserActivitySave\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-activity/dto/user-activity-save.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                actionType\n                            \n                            \n                                count\n                            \n                            \n                                eventType\n                            \n                            \n                                score\n                            \n                            \n                                user\n                            \n                            \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        actionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         actionType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/dto/user-activity-save.input.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/dto/user-activity-save.input.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         eventType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/dto/user-activity-save.input.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/dto/user-activity-save.input.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/dto/user-activity-save.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-activity/dto/user-activity-save.input.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { eventType } from 'src/events/entities/event.entity';\nimport { User } from 'src/users/entities/user.entity';\nimport { actionType } from '../entities/userActivity.entity';\n\n@ObjectType()\nexport default class UserActivitySave {\n  @Field(() => User)\n  user: User;\n\n  @Field()\n  actionType: actionType;\n\n  @Field()\n  eventType: eventType;\n\n  @Field()\n  count: number;\n\n  @Field()\n  score: number;\n\n  @Field()\n  weight: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserActivityService.html":{"url":"injectables/UserActivityService.html","title":"injectable - UserActivityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserActivityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-activity/user-activity.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkDateScore\n                            \n                            \n                                    Async\n                                createOrUpdate\n                            \n                            \n                                    Async\n                                generateQuery\n                            \n                            \n                                    Async\n                                getUserActivity\n                            \n                            \n                                    Async\n                                saveDistanceSerchedQuery\n                            \n                            \n                                saveEventView\n                            \n                            \n                                saveParticipantActivity\n                            \n                            \n                                    Async\n                                saveRateActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userActivityRepository: Repository, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/user-activity/user-activity.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userActivityRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkDateScore\n                        \n                    \n                \n            \n            \n                \ncheckDateScore(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/user-activity/user-activity.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createOrUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOrUpdate(user: any, actionType: number, type: any, score: number, weight: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-activity/user-activity.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    actionType\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    score\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    weight\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateQuery(user: User, distanceQuery: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-activity/user-activity.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    distanceQuery\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserActivity\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserActivity(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user-activity/user-activity.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveDistanceSerchedQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveDistanceSerchedQuery(userId: string, distance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-activity/user-activity.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    distance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveEventView\n                        \n                    \n                \n            \n            \n                \nsaveEventView(user: User, event: Event)\n                \n            \n\n\n            \n                \n                    Defined in src/user-activity/user-activity.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveParticipantActivity\n                        \n                    \n                \n            \n            \n                \nsaveParticipantActivity(type, user, event)\n                \n            \n\n\n            \n                \n                    Defined in src/user-activity/user-activity.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveRateActivity\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRateActivity(rate: number, user: User, event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/user-activity/user-activity.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UsersService } from 'src/users/users.service';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { actionType, UserActivity } from './entities/userActivity.entity';\nimport UserActivitySave from './dto/user-activity-save.input';\nimport { User } from 'src/users/entities/user.entity';\nimport { Event } from 'src/events/entities/event.entity';\n@Injectable()\nexport class UserActivityService {\n  constructor(\n    @InjectRepository(UserActivity)\n    private readonly userActivityRepository: Repository,\n    private readonly usersService: UsersService,\n  ) {}\n\n  saveParticipantActivity(type, user, event) {\n    //Interested\n    let action = actionType.Interested;\n    let score = 2;\n    let weight = 0.03;\n    if (type === 2) {\n      //Take part\n      action = actionType.TakePart;\n      score = 3;\n      weight = 0.05;\n    }\n    this.createOrUpdate(user, action, event.type, score, weight);\n\n    this.createOrUpdate(user, actionType.Category, event.type, 1, 0.03);\n\n    this.createOrUpdate(\n      user,\n      actionType.Duration,\n      event.type,\n      this.checkDateScore(event),\n      0.02,\n    );\n  }\n\n  checkDateScore(event: any): number {\n    const startDate = new Date(event.startDate);\n    const endDate = new Date(event.endDate);\n    const diff = endDate.getTime() - startDate.getTime();\n    const hours = Math.floor(diff / 1000 / 60 / 60);\n    if (hours  7) return 3;\n\n    return 2;\n  }\n\n  async createOrUpdate(\n    user: any,\n    actionType: number,\n    type: any,\n    score: number,\n    weight: number,\n  ) {\n    const activity: UserActivitySave = {\n      user: user,\n      actionType: actionType,\n      eventType: type,\n      score: score,\n      weight: weight,\n      count: 1,\n    };\n    const userActivity = await this.userActivityRepository\n      .createQueryBuilder('user_activity')\n      .where(`user_activity.user = \"${user.id}\"`)\n      .andWhere(`user_activity.actionType = ${actionType}`)\n      .andWhere(`user_activity.eventType = ${type}`)\n      .andWhere(`user_activity.score = ${score}`)\n      .andWhere(`user_activity.weight = ${weight}`)\n      .getOne();\n\n    if (!userActivity) {\n      this.userActivityRepository.save(activity);\n    } else {\n      await this.userActivityRepository\n        .createQueryBuilder()\n        .update(UserActivity)\n        .set({\n          count: () => 'count + 1',\n        })\n        .where(\n          ` user = \"${user.id}\"  AND actionType = ${userActivity.actionType} AND eventType = ${userActivity.eventType} AND score = ${userActivity.score} AND weight = ${userActivity.weight}`,\n        )\n        .execute();\n    }\n  }\n  async getUserActivity(user: User) {\n    return this.userActivityRepository\n      .createQueryBuilder('user_activity')\n      .where(`user_activity.user = \"${user.id}\"`)\n      .getMany();\n  }\n  async saveDistanceSerchedQuery(userId: string, distance: number) {\n    const user = await this.usersService.findOne(userId);\n    let score = 1;\n    if (distance > 30 && distance  7, ${activity.count} * ${activity.score} * ${activity.weight}, ${activity.count} * ${activity.score} * ${activity.weight}))`;\n      }\n      if (activity.actionType === actionType.TakePart) {\n        query += ` IF(events.type = ${activity.eventType}, ${activity.count} * ${activity.score} * ${activity.weight}, 0) `;\n      }\n      if (activity.actionType === actionType.Interested) {\n        query += ` IF(events.type = ${activity.eventType}, ${activity.count} * ${activity.score} * ${activity.weight}, 0) `;\n      }\n      if (activity.actionType === actionType.Distance) {\n        query += `IF( ${distanceQuery} > 0, (IF(${distanceQuery}  30 AND ${distanceQuery}  70, ${activity.count} * ${activity.score} * ${activity.weight}, 0)))), 0)`;\n      }\n      if (activity.actionType === actionType.Rate) {\n        query += ` IF(events.type = ${activity.eventType}, ${activity.count} * ${activity.score} * ${activity.weight}, 0) `;\n      }\n      if (activity.actionType === actionType.Visit) {\n        query += ` IF(events.type = ${activity.eventType}, ${activity.count} * ${activity.score} * ${activity.weight}, 0) `;\n      }\n      if (lastElement != activity) {\n        query += ' + ';\n      }\n    }\n    query += `)`;\n\n    return query;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponse.html":{"url":"classes/UserResponse.html","title":"class - UserResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user.response.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectType } from '@nestjs/graphql';\nimport relayTypes from 'src/pagination/types/relay.types';\nimport { User } from '../entities/user.entity';\n\n@ObjectType()\nexport default class UserResponse extends relayTypes(User) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nMailModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nTokenService\n\nTokenService\n\nUsersModule -->\n\nTokenService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TokenService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersResolver } from './users.resolver';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { MailModule } from 'src/mail/mail.module';\nimport { TokenService } from './token/token.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), MailModule],\n  providers: [UsersResolver, UsersService, TokenService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersResolver.html":{"url":"classes/UsersResolver.html","title":"class - UsersResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                activateUser\n                            \n                            \n                                confirmResetPassword\n                            \n                            \n                                createUser\n                            \n                            \n                                currentUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                removeUser\n                            \n                            \n                                resetPassword\n                            \n                            \n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.resolver.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        activateUser\n                        \n                    \n                \n            \n            \n                \nactivateUser(activateUserInput: ActivateUserInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activateUserInput\n                                    \n                                                ActivateUserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmResetPassword\n                        \n                    \n                \n            \n            \n                \nconfirmResetPassword(resetPasswordTokenInput: ResetPasswordTokenInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resetPasswordTokenInput\n                                    \n                                                ResetPasswordTokenInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUser\n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserInput: CreateUserInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserInput\n                                    \n                                                CreateUserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n            \n                \ncurrentUser(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'currentUser'})@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(args: ConnectionArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'users'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'user'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUser\n                        \n                    \n                \n            \n            \n                \nremoveUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetPassword\n                        \n                    \n                \n            \n            \n                \nresetPassword(resetPasswordInput: ResetPasswordInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resetPasswordInput\n                                    \n                                                ResetPasswordInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUser\n                        \n                    \n                \n            \n            \n                \nupdateUser(user: User, updateUserInput: UpdateUserInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.resolver.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserInput\n                                    \n                                                UpdateUserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Resolver,\n  Query,\n  Mutation,\n  Args,\n  ObjectType,\n  Field,\n} from '@nestjs/graphql';\nimport { UsersService } from './users.service';\nimport { User } from './entities/user.entity';\nimport { CreateUserInput } from './dto/create-user.input';\nimport { UpdateUserInput } from './dto/update-user.input';\nimport { GqlAuthGuard } from '../auth/guards/gql-auth.guard';\nimport { UseGuards } from '@nestjs/common';\nimport { CurrentUser } from 'src/auth/current-user.decorator';\nimport { ActivateUserInput } from './dto/activate-user.input';\nimport { connectionFromArraySlice } from 'graphql-relay';\nimport ConnectionArgs from 'src/pagination/types/connection.args';\nimport UserResponse from './dto/user.response';\nimport { ResetPasswordInput } from './dto/reset-password.input';\nimport { ResetPasswordTokenInput } from './dto/reset-password-token.input';\n\n@ObjectType()\nexport class ResetResponse {\n  @Field()\n  message: string;\n}\n\n@Resolver(() => User)\nexport class UsersResolver {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Mutation(() => User)\n  createUser(@Args('createUserInput') createUserInput: CreateUserInput) {\n    return this.usersService.create(createUserInput);\n  }\n\n  @Mutation(() => User)\n  activateUser(@Args('activateUser') activateUserInput: ActivateUserInput) {\n    return this.usersService.activateUser(activateUserInput);\n  }\n\n  @Query(() => UserResponse, { name: 'users' })\n  async findAll(@Args() args: ConnectionArgs): Promise {\n    const { limit, offset } = args.pagingParams();\n    const { field, sort } = args.orderParams();\n    const [events, count] = await this.usersService.findAll(\n      limit,\n      offset,\n      field,\n      sort,\n    );\n    const page = connectionFromArraySlice(events, args, {\n      arrayLength: count,\n      sliceStart: offset || 0,\n    });\n\n    return { page, pageData: { count, limit, offset } };\n  }\n\n  @Query(() => User, { name: 'user' })\n  findOne(@Args('id') userId: string) {\n    return this.usersService.findOne(userId);\n  }\n\n  @Query(() => User, { name: 'currentUser' })\n  @UseGuards(GqlAuthGuard)\n  currentUser(@CurrentUser() user: User) {\n    return this.usersService.findOne(user.id);\n  }\n\n  @Mutation(() => User)\n  @UseGuards(GqlAuthGuard)\n  updateUser(\n    @CurrentUser() user: User,\n    @Args({\n      name: 'updateUserInput',\n    })\n    updateUserInput: UpdateUserInput,\n  ) {\n    return this.usersService.update(\n      updateUserInput.id ? updateUserInput.id : user.id,\n      updateUserInput,\n    );\n  }\n\n  @Mutation(() => User)\n  @UseGuards(GqlAuthGuard)\n  removeUser(@Args('id') id: string) {\n    return this.usersService.remove(id);\n  }\n\n  @Mutation(() => ResetResponse)\n  resetPassword(\n    @Args('resetPasswordInput') resetPasswordInput: ResetPasswordInput,\n  ) {\n    return this.usersService.resetPassword(resetPasswordInput.email);\n  }\n\n  @Mutation(() => ResetResponse)\n  confirmResetPassword(\n    @Args('confirmResetPassword')\n    resetPasswordTokenInput: ResetPasswordTokenInput,\n  ) {\n    return this.usersService.resetPasswordToken(resetPasswordTokenInput);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                activateUser\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findByMail\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                resetPasswordToken\n                            \n                            \n                                    Async\n                                saveRefreshToken\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, tokenService: TokenService, mailService: MailService, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tokenService\n                                                  \n                                                        \n                                                                        TokenService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        activateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    activateUser(activateUserInput: ActivateUserInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    activateUserInput\n                                    \n                                                ActivateUserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserInput: CreateUserInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserInput\n                                    \n                                                CreateUserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(limit: number, offset: number, field: string, sort: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    field\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sort\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByMail(mail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPasswordToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPasswordToken(resetPasswordToken: ResetPasswordTokenInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resetPasswordToken\n                                    \n                                                ResetPasswordTokenInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRefreshToken(userId: string, token: any, date: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserInput: UpdateUserInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserInput\n                                    \n                                                UpdateUserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ActivateUserInput } from './dto/activate-user.input';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { CreateUserInput } from './dto/create-user.input';\nimport { I18nService } from 'nestjs-i18n';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MailService } from 'src/mail/mail.service';\nimport { Repository } from 'typeorm';\nimport { ResetPasswordTokenInput } from './dto/reset-password-token.input';\nimport { TokenService } from './token/token.service';\nimport { UpdateUserInput } from './dto/update-user.input';\nimport { User } from './entities/user.entity';\nimport { genSalt, hash, compare } from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n    private readonly tokenService: TokenService,\n    private readonly mailService: MailService,\n    private readonly i18n: I18nService,\n  ) {}\n\n  async create(createUserInput: CreateUserInput) {\n    const salt = await genSalt(10);\n    createUserInput.password = await hash(createUserInput.password, salt);\n\n    const user = await this.usersRepository.save(createUserInput);\n    const token = this.tokenService.encrypt(user.id);\n\n    this.mailService.sendUserRegisterConfirmation(user.email, token);\n\n    return user;\n  }\n  findAll(\n    limit: number,\n    offset: number,\n    field: string,\n    sort: string,\n  ): Promise {\n    return this.usersRepository.findAndCount({\n      relations: ['company'],\n      take: limit,\n      skip: offset,\n      order: {\n        [field]: sort,\n      },\n    });\n  }\n\n  async findOne(id: string) {\n    const user = await this.usersRepository.findOneOrFail({\n      where: { id: id },\n      relations: ['company'],\n    });\n\n    return user;\n  }\n\n  async findByMail(mail: string) {\n    return this.usersRepository.findOne({ where: { email: mail } });\n  }\n\n  async update(id: string, updateUserInput: UpdateUserInput) {\n    const user = await this.findOne(id);\n    return this.usersRepository.save({ ...user, ...updateUserInput });\n  }\n\n  async remove(id: string) {\n    const user = await this.findOne(id);\n    this.usersRepository.remove(user);\n    return user;\n  }\n\n  async activateUser(activateUserInput: ActivateUserInput) {\n    const decrypted = await this.tokenService.decrypt(activateUserInput.token);\n    const dateIsValid = this.tokenService.validateDate(decrypted.validityDate);\n\n    const user = await this.usersRepository.findOne(decrypted.userId);\n\n    if (user.isActive) {\n      throw new BadRequestException('User has been activated already');\n    }\n\n    if (!user.isActive) {\n      if (dateIsValid) {\n        user.isActive = true;\n      }\n\n      if (!dateIsValid) {\n        throw new BadRequestException('Invalid token date');\n      }\n    }\n\n    return await this.usersRepository.save(user);\n  }\n\n  async resetPassword(email: string): Promise {\n    const user = await this.findByMail(email);\n    if (!user) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.INVALID_EMAIL'),\n      );\n    }\n    const token = this.tokenService.createToken(user);\n\n    user.resetPasswordToken = token;\n    user.resetPasswordExpires = new Date(new Date().getTime() + 20 * 60 * 1000);\n    this.usersRepository.save(user);\n\n    this.mailService.sendUserResetPassword(user.email, user.resetPasswordToken);\n\n    return {\n      message: await this.i18n.translate(\n        'emails.RESET_PASSWORD.RESET_PASSWORD_MAIL',\n      ),\n    };\n  }\n\n  async resetPasswordToken(\n    resetPasswordToken: ResetPasswordTokenInput,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { resetPasswordToken: resetPasswordToken.token },\n    });\n\n    if (!user) {\n      throw new BadRequestException(\n        await this.i18n.translate('errors.ERROR.TOKEN_NOT_FOUND'),\n      );\n    }\n    if (user.resetPasswordExpires \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                dist/src/i18n/QueryResolver.ts\n            \n            injectable\n            QueryResolver\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                ormconfig.ts\n            \n            variable\n            baseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.resolver.ts\n            \n            class\n            AccessToken\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.resolver.ts\n            \n            class\n            isValid\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.input.ts\n            \n            class\n            LoginUserInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-user-token.input.ts\n            \n            class\n            RefreshUserToken\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/gql-auth.guard.ts\n            \n            class\n            GqlAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            class\n            LocalAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/companies/companies.resolver.ts\n            \n            class\n            CompaniesResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/companies/companies.service.ts\n            \n            injectable\n            CompaniesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/companies/dto/create-company.input.ts\n            \n            class\n            CreateCompanyInput\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/companies/dto/update-company.input.ts\n            \n            class\n            UpdateCompanyInput\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/companies/entities/company.entity.ts\n            \n            entity\n            Company\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/companies/entities/company.entity.ts\n            \n            class\n            Company\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/database/seeds/create-event-address.seed.ts\n            \n            class\n            CreateEventAddress\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/seeds/create-events.seed.ts\n            \n            class\n            CreateEvents\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/seeds/create-paricipants.seed.ts\n            \n            class\n            CreateParticipants\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/seeds/create-tags.seed.ts\n            \n            class\n            CreateTags\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/seeds/create-tags.seed.ts\n            \n            variable\n            tags\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seeds/create-users.seed.ts\n            \n            class\n            CreateUsers\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/events/dto/create-event-address.input.ts\n            \n            class\n            CreateEventAddressInput\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/events/dto/create-event.input.ts\n            \n            class\n            CreateEventInput\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/events/dto/event.response.ts\n            \n            class\n            EventResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/dto/update-event.input.ts\n            \n            class\n            UpdateEventInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/events/entities/event-address.entity.ts\n            \n            entity\n            EventAddress\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/entities/event-address.entity.ts\n            \n            class\n            EventAddress\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/events/entities/event.entity.ts\n            \n            entity\n            Event\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/entities/event.entity.ts\n            \n            class\n            Event\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/events/events.resolver.ts\n            \n            class\n            EventsResolver\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/events/events.service.ts\n            \n            injectable\n            EventsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/i18n/QueryResolver.ts\n            \n            injectable\n            QueryResolver\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notifications/notifications.service.ts\n            \n            injectable\n            NotificationsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/pagination/types/connection.args.ts\n            \n            class\n            ConnectionArgs\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/pagination/types/connection.args.ts\n            \n            function\n            checkPagingSanity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pagination/types/connection.args.ts\n            \n            function\n            getDistanceParameters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pagination/types/connection.args.ts\n            \n            function\n            getOrderParameters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pagination/types/connection.args.ts\n            \n            function\n            getPagingParameters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pagination/types/connection.args.ts\n            \n            variable\n            getId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pagination/types/connection.args.ts\n            \n            variable\n            nextId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pagination/types/page-data.ts\n            \n            class\n            PageData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pagination/types/relay.types.ts\n            \n            function\n            relayTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pagination/types/relay.types.ts\n            \n            variable\n            typeMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/participants/dto/participant-by-date.response.ts\n            \n            class\n            ParticipantByDateResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/participants/dto/participant-list.response copy.ts\n            \n            class\n            ParticipantByDateListResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/participants/dto/participant-list.response.ts\n            \n            class\n            ParticipantListResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/participants/dto/participant-response.input.ts\n            \n            class\n            ParticipantResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/participants/dto/participant-update.input.ts\n            \n            class\n            ParticipantUpdate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/participants/entities/participant.entity.ts\n            \n            entity\n            Participant\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/participants/entities/participant.entity.ts\n            \n            class\n            Participant\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/participants/participants.resolver.ts\n            \n            class\n            ParticipantsResolver\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/participants/participants.service.ts\n            \n            injectable\n            ParticipantsService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/ratings/dto/rating-list.response.ts\n            \n            class\n            RatingListResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ratings/dto/rating-response.input.ts\n            \n            class\n            RatingResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/ratings/dto/rating-update.input.ts\n            \n            class\n            RatingUpdate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/ratings/entities/rating.entity.ts\n            \n            entity\n            Rating\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/ratings/entities/rating.entity.ts\n            \n            class\n            Rating\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/ratings/ratings.resolver.ts\n            \n            class\n            RatingsResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/ratings/ratings.service.ts\n            \n            injectable\n            RatingsService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/tags/entities/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/entities/tag.entity.ts\n            \n            class\n            Tag\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tags.resolver.ts\n            \n            class\n            TagsResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tags/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-activity/dto/user-activity-save.input.ts\n            \n            class\n            UserActivitySave\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user-activity/entities/userActivity.entity.ts\n            \n            entity\n            UserActivity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-activity/entities/userActivity.entity.ts\n            \n            class\n            UserActivity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user-activity/user-activity.service.ts\n            \n            injectable\n            UserActivityService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/dto/activate-user.input.ts\n            \n            class\n            ActivateUserInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.input.ts\n            \n            class\n            CreateUserInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/reset-password-token.input.ts\n            \n            class\n            ResetPasswordTokenInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/reset-password.input.ts\n            \n            class\n            ResetPasswordInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.input.ts\n            \n            class\n            UpdateUserInput\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/dto/user.response.ts\n            \n            class\n            UserResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/users/token/token.service.ts\n            \n            injectable\n            TokenService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.resolver.ts\n            \n            class\n            ResetResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.resolver.ts\n            \n            class\n            UsersResolver\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/utils/token.ts\n            \n            variable\n            getRefreshTokenExpiresTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/token.ts\n            \n            variable\n            getTokenExpiresTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/helpers/testHelpers.ts\n            \n            variable\n            createInputObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                utils/getRandoms.ts\n            \n            variable\n            getRandomBoolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                utils/getRandoms.ts\n            \n            variable\n            getRandomDateFromDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                utils/getRandoms.ts\n            \n            variable\n            getRandomKeyFromObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                utils/getRandoms.ts\n            \n            variable\n            getRandomNumberBetween\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                utils/getRandoms.ts\n            \n            variable\n            getRandomValueFromArray\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @apollo/gateway : ^0.44.1\n        \n            @nestjs-modules/mailer : ^1.6.0\n        \n            @nestjs/common : 8.0.0\n        \n            @nestjs/core : ^8.2.3\n        \n            @nestjs/graphql : 7.10.3\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : ^1.0.1\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.2.3\n        \n            @nestjs/schedule : ^1.0.2\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            @types/cron : ^1.7.2\n        \n            @types/graphql-relay : 0.7.0\n        \n            apollo-server-express : ^2.22.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            dayjs : ^1.10.5\n        \n            faker : ^5.5.3\n        \n            graphql : 15.5.0\n        \n            graphql-relay : 0.8.0\n        \n            graphql-tools : 8.2.0\n        \n            graphql-type-json : ^0.3.2\n        \n            handlebars : ^4.7.7\n        \n            mysql2 : ^2.2.5\n        \n            nestjs-i18n : ^8.1.0\n        \n            nodemailer : ^6.5.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : 7\n        \n            type-graphql : ^1.1.1\n        \n            typeorm : ^0.2.41\n        \n            typeorm-seeding : ^1.6.1\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            actionType   (src/.../userActivity.entity.ts)\n                        \n                        \n                            eventType   (src/.../event.entity.ts)\n                        \n                        \n                            participationType   (src/.../participant.entity.ts)\n                        \n                        \n                            Sex   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user-activity/entities/userActivity.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        actionType\n                    \n                \n                        \n                            \n                                 Category\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                 TakePart\n                            \n                        \n                        \n                            \n                                 Interested\n                            \n                        \n                        \n                            \n                                 Distance\n                            \n                        \n                        \n                            \n                                 Rate\n                            \n                        \n                        \n                            \n                                 Visit\n                            \n                        \n            \n        \n\n    src/events/entities/event.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        eventType\n                    \n                \n                        \n                            \n                                 Sport\n                            \n                        \n                        \n                            \n                                 Party\n                            \n                        \n                        \n                            \n                                 Social\n                            \n                        \n            \n        \n\n    src/participants/entities/participant.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        participationType\n                    \n                \n                        \n                            \n                                 Canceled\n                            \n                        \n                        \n                            \n                                 Interested\n                            \n                        \n                        \n                            \n                                 Going\n                            \n                        \n            \n        \n\n    src/users/entities/user.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Sex\n                    \n                \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                 Male\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            checkPagingSanity   (src/.../connection.args.ts)\n                        \n                        \n                            getDistanceParameters   (src/.../connection.args.ts)\n                        \n                        \n                            getOrderParameters   (src/.../connection.args.ts)\n                        \n                        \n                            getPagingParameters   (src/.../connection.args.ts)\n                        \n                        \n                            relayTypes   (src/.../relay.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/pagination/types/connection.args.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkPagingSanity\n                        \n                    \n                \n            \n            \n                \ncheckPagingSanity(args: ConnectionArgs)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PagingMeta\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDistanceParameters\n                        \n                    \n                \n            \n            \n                \ngetDistanceParameters(args: ConnectionArgs)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOrderParameters\n                        \n                    \n                \n            \n            \n                \ngetOrderParameters(args: ConnectionArgs)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPagingParameters\n                        \n                    \n                \n            \n            \n                \ngetPagingParameters(args: ConnectionArgs)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ConnectionArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/pagination/types/relay.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relayTypes\n                        \n                    \n                \n            \n            \n                \nrelayTypes(type: Type)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMeet us\nDemo\nhttps://meet-us-frontend-inz.herokuapp.com\nApp supports\n\nGraphQL\nSeeders based on faker\nMailer\nJWT tokens for authorisation requests to api\nTypeorm for MySQL\nPassword encryption\n\nDev Tools\n\npretter\neslint\nhusky\nlint-staged\ncommitlint\n\nRun in docker\n$ docker compose up -dUse docker container terminal\n$ docker exec -ti meet.us bashInstallation\n$ cp .env.sample .env\n$ yarn install\nSet values in .env file\n\nRunning the app\n# development\n$ yarn start\n\n# watch mode\n$ yarn start:dev\n\n# production mode\n$ yarn start:prodTest\n# unit tests\n$ yarn test\n\n# e2e tests\n$ yarn test:e2e\n\n# test coverage\n$ yarn test:covGenerate documentation\ndocs.nestjs.com/recipes/documentation\nnpx @compodoc/compodoc -p tsconfig.json -s\n# or\nyarn doc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/isValid.html":{"url":"classes/isValid.html","title":"class - isValid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  isValid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isValid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isValid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.resolver.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UseGuards } from '@nestjs/common';\nimport {\n  Args,\n  Field,\n  Mutation,\n  ObjectType,\n  Resolver,\n  Query,\n} from '@nestjs/graphql';\nimport { User } from 'src/users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { CurrentUser } from './current-user.decorator';\nimport { LoginUserInput } from './dto/login-user.input';\nimport { RefreshUserToken } from './dto/refresh-user-token.input';\nimport { GqlAuthGuard } from './guards/gql-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@ObjectType()\nexport class AccessToken {\n  @Field()\n  accessToken: string;\n\n  @Field()\n  refreshToken: string;\n\n  @Field()\n  accessTokenExpires: number;\n\n  @Field()\n  user: User;\n}\n@ObjectType()\nexport class isValid {\n  @Field()\n  isValid: boolean;\n}\n\n@Resolver()\nexport class AuthResolver {\n  constructor(private readonly authService: AuthService) {}\n\n  @Mutation(() => AccessToken)\n  @UseGuards(LocalAuthGuard)\n  async login(@Args('loginUserInput') loginUserInput: LoginUserInput) {\n    const user = new User();\n    user.email = loginUserInput.email;\n    user.password = loginUserInput.password;\n\n    return await this.authService.login(user);\n  }\n\n  @Mutation(() => AccessToken)\n  @UseGuards(GqlAuthGuard)\n  async refresh(\n    @CurrentUser() user: User,\n    @Args('refreshToken') refreshToken: RefreshUserToken,\n  ) {\n    return await this.authService.refreshLoginToken(user, refreshToken.token);\n  }\n\n  @Query(() => isValid)\n  @UseGuards(GqlAuthGuard)\n  async tokenIsValid(@CurrentUser() user: User) {\n    if (!user) return { isValid: false };\n\n    return { isValid: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CompaniesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParticipantsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RatingsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserActivityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CompaniesModule\n\n\n\ncluster_CompaniesModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_ParticipantsModule\n\n\n\ncluster_ParticipantsModule_exports\n\n\n\ncluster_ParticipantsModule_providers\n\n\n\ncluster_RatingsModule\n\n\n\ncluster_RatingsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UserActivityModule\n\n\n\ncluster_UserActivityModule_exports\n\n\n\ncluster_UserActivityModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCompaniesModule\n\nCompaniesModule\n\nAppModule -->\n\nCompaniesModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\n\n\nRatingsModule\n\nRatingsModule\n\nRatingsModule -->\n\nEventsModule->RatingsModule\n\n\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nEventsService \n\nEventsService \n\nEventsService  -->\n\nEventsModule->EventsService \n\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsModule -->\n\nMailModule->NotificationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nMailModule->UsersModule\n\n\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nNotificationsService \n\nNotificationsService \n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nNotificationsModule -->\n\nParticipantsModule->NotificationsModule\n\n\n\nRatingsModule -->\n\nParticipantsModule->RatingsModule\n\n\n\nAppModule -->\n\nParticipantsModule->AppModule\n\n\n\n\n\nParticipantsService \n\nParticipantsService \n\nParticipantsService  -->\n\nParticipantsModule->ParticipantsService \n\n\n\nAppModule -->\n\nRatingsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUserActivityModule\n\nUserActivityModule\n\nEventsModule -->\n\nUserActivityModule->EventsModule\n\n\n\nParticipantsModule -->\n\nUserActivityModule->ParticipantsModule\n\n\n\nRatingsModule -->\n\nUserActivityModule->RatingsModule\n\n\n\nAppModule -->\n\nUserActivityModule->AppModule\n\n\n\n\n\nUserActivityService \n\nUserActivityService \n\nUserActivityService  -->\n\nUserActivityModule->UserActivityService \n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nCompaniesModule -->\n\nUsersModule->CompaniesModule\n\n\n\nEventsModule -->\n\nUsersModule->EventsModule\n\n\n\nParticipantsModule -->\n\nUsersModule->ParticipantsModule\n\n\n\nRatingsModule -->\n\nUsersModule->RatingsModule\n\n\n\nUserActivityModule -->\n\nUsersModule->UserActivityModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCompaniesService\n\nCompaniesService\n\nCompaniesModule -->\n\nCompaniesService->CompaniesModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\nParticipantsService\n\nParticipantsService\n\nParticipantsModule -->\n\nParticipantsService->ParticipantsModule\n\n\n\n\n\nRatingsService\n\nRatingsService\n\nRatingsModule -->\n\nRatingsService->RatingsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUserActivityService\n\nUserActivityService\n\nUserActivityModule -->\n\nUserActivityService->UserActivityModule\n\n\n\n\n\nTokenService\n\nTokenService\n\nUsersModule -->\n\nTokenService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    50 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IEventState   (src/.../IEvents.ts)\n                        \n                        \n                            PagingMeta   (src/.../connection.args.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/events/IEvents.ts\n    \n    \n        \n            \n                \n                    \n                    IEventState\n                \n            \n            \n                \n                        \"PAST\" | \"DURING\" | \"FUTURE\"\n\n                \n            \n        \n    \n    src/pagination/types/connection.args.ts\n    \n    \n        \n            \n                \n                    \n                    PagingMeta\n                \n            \n            \n                \n                        literal type | literal type | literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            baseConfig   (ormconfig.ts)\n                        \n                        \n                            createInputObject   (test/.../testHelpers.ts)\n                        \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            getId   (src/.../connection.args.ts)\n                        \n                        \n                            getRandomBoolean   (utils/.../getRandoms.ts)\n                        \n                        \n                            getRandomDateFromDate   (utils/.../getRandoms.ts)\n                        \n                        \n                            getRandomKeyFromObject   (utils/.../getRandoms.ts)\n                        \n                        \n                            getRandomNumberBetween   (utils/.../getRandoms.ts)\n                        \n                        \n                            getRandomValueFromArray   (utils/.../getRandoms.ts)\n                        \n                        \n                            getRefreshTokenExpiresTime   (src/.../token.ts)\n                        \n                        \n                            getTokenExpiresTime   (src/.../token.ts)\n                        \n                        \n                            nextId   (src/.../connection.args.ts)\n                        \n                        \n                            tags   (src/.../create-tags.seed.ts)\n                        \n                        \n                            typeMap   (src/.../relay.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    ormconfig.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        baseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  database: process.env.DATABASE_NAME,\n  entities: [__dirname + '/**/*.entity.{js,ts}'],\n  logger: 'advanced-console',\n  logging: ['warn', 'error'],\n}\n                    \n                \n\n\n        \n    \n\n    test/helpers/testHelpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createInputObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (object: any) =>\n  JSON.stringify(object).replace(/\\\"([^(\\\")\"]+)\\\":/g, '$1:')\n                    \n                \n\n\n        \n    \n\n    src/auth/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const ctx = GqlExecutionContext.create(context);\n\n    return ctx.getContext().req.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/pagination/types/connection.args.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (cursor: ConnectionCursor) =>\n  parseInt(fromGlobalId(cursor).id, 10)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (cursor: ConnectionCursor) => getId(cursor) + 1\n                    \n                \n\n\n        \n    \n\n    utils/getRandoms.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getRandomBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): boolean => {\n  const booleans = [true, false];\n  return booleans[Math.floor(Math.random() * booleans.length)];\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomDateFromDate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  date: Date = new Date(),\n  minDay = 1,\n  maxDay = 2,\n  minHours = 1,\n  maxHours = 4,\n): {\n  startDate: Date;\n  endDate: Date;\n} => {\n  const startDate = dayjs(date);\n  const endDate = startDate\n    .add(\n      Math.floor(Math.random() * getRandomNumberBetween(minDay, maxDay)),\n      'day',\n    )\n    .add(getRandomNumberBetween(minHours, maxHours), 'hours')\n    .toDate();\n\n  return {\n    startDate: startDate.toDate(),\n    endDate,\n  };\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomKeyFromObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (someObject: any): any =>\n  Object.keys(someObject)[\n    Math.floor(Math.random() * Object.keys(someObject).length)\n  ]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomNumberBetween\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomValueFromArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (arr: Array) =>\n  arr[Math.floor(Math.random() * arr.length)]\n                    \n                \n\n\n        \n    \n\n    src/utils/token.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getRefreshTokenExpiresTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () =>\n  dayjs.unix(getTokenExpiresTime()).add(1, 'd').unix()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenExpiresTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => dayjs().add(2, 'd').unix()\n                    \n                \n\n\n        \n    \n\n    src/database/seeds/create-tags.seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'sport',\n  'fitness',\n  'gym',\n  'workout',\n  'motivation',\n  'training',\n  'fit',\n  'bodybuilding',\n  'lifestyle',\n  'fitnessmotivation',\n  'healthy',\n  'travel',\n  'photography',\n  'health',\n  'follow',\n  'gymlife',\n  'football',\n  'boxing',\n  'basketball',\n  'fun',\n  'muscle',\n  'sportscenetr',\n  'forest',\n  'runing',\n  'football',\n]\n                    \n                \n\n\n        \n    \n\n    src/pagination/types/relay.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        typeMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
